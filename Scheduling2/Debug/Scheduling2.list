
Scheduling2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003ee0  08003ee0  00004ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f54  08003f54  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003f54  08003f54  00004f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f5c  08003f5c  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f5c  08003f5c  00004f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f60  08003f60  00004f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003f64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005060  2**0
                  CONTENTS
 10 .bss          000041e4  20000060  20000060  00005060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004244  20004244  00005060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c95  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a6d  00000000  00000000  00017d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  0001a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc7  00000000  00000000  0001b800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022663  00000000  00000000  0001c4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011db7  00000000  00000000  0003eb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2dd2  00000000  00000000  000508e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001236b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000474c  00000000  00000000  001236f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00127e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ec8 	.word	0x08003ec8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08003ec8 	.word	0x08003ec8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000007c 	.word	0x2000007c
 8000500:	2000011c 	.word	0x2000011c

08000504 <vTaskBusyWait>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vTaskBusyWait(int count)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	for(int i = 0 ; i < count ; i++)
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e003      	b.n	800051a <vTaskBusyWait+0x16>
		__NOP();
 8000512:	bf00      	nop
	for(int i = 0 ; i < count ; i++)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3301      	adds	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	429a      	cmp	r2, r3
 8000520:	dbf7      	blt.n	8000512 <vTaskBusyWait+0xe>
}
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <vHighPriorityTask>:
	}
	vTaskDelete(NULL);
}

void vHighPriorityTask(void *pvParam)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	char *pcMessage = (char *)pvParam;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	60bb      	str	r3, [r7, #8]
	for(int i = 1 ; i <= 9 ; i++)
 800053c:	2301      	movs	r3, #1
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e01b      	b.n	800057a <vHighPriorityTask+0x4a>
	{
		portENTER_CRITICAL();
 8000542:	f003 f919 	bl	8003778 <vPortEnterCritical>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8000546:	68b8      	ldr	r0, [r7, #8]
 8000548:	f7ff fe42 	bl	80001d0 <strlen>
 800054c:	4603      	mov	r3, r0
 800054e:	b29a      	uxth	r2, r3
 8000550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000554:	68b9      	ldr	r1, [r7, #8]
 8000556:	480e      	ldr	r0, [pc, #56]	@ (8000590 <vHighPriorityTask+0x60>)
 8000558:	f001 fd47 	bl	8001fea <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 800055c:	f003 f93e 	bl	80037dc <vPortExitCritical>
		vTaskBusyWait(5000);
 8000560:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000564:	f7ff ffce 	bl	8000504 <vTaskBusyWait>
		if(i == 4)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b04      	cmp	r3, #4
 800056c:	d102      	bne.n	8000574 <vHighPriorityTask+0x44>
			vTaskDelay(5 / portTICK_RATE_MS);
 800056e:	2005      	movs	r0, #5
 8000570:	f002 fc22 	bl	8002db8 <vTaskDelay>
	for(int i = 1 ; i <= 9 ; i++)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2b09      	cmp	r3, #9
 800057e:	dde0      	ble.n	8000542 <vHighPriorityTask+0x12>
	}
	vTaskDelete(NULL);
 8000580:	2000      	movs	r0, #0
 8000582:	f002 fb89 	bl	8002c98 <vTaskDelete>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000031c 	.word	0x2000031c

08000594 <vLowPriorityTask>:

void vLowPriorityTask(void *pvParam)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	char *pcMessage = (char *)pvParam;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60bb      	str	r3, [r7, #8]
	for(int i = 1 ; i <= 9 ; i++)
 80005a0:	2301      	movs	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e015      	b.n	80005d2 <vLowPriorityTask+0x3e>
	{
		portENTER_CRITICAL();
 80005a6:	f003 f8e7 	bl	8003778 <vPortEnterCritical>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 80005aa:	68b8      	ldr	r0, [r7, #8]
 80005ac:	f7ff fe10 	bl	80001d0 <strlen>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b8:	68b9      	ldr	r1, [r7, #8]
 80005ba:	480b      	ldr	r0, [pc, #44]	@ (80005e8 <vLowPriorityTask+0x54>)
 80005bc:	f001 fd15 	bl	8001fea <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 80005c0:	f003 f90c 	bl	80037dc <vPortExitCritical>
		vTaskBusyWait(5000);
 80005c4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005c8:	f7ff ff9c 	bl	8000504 <vTaskBusyWait>
	for(int i = 1 ; i <= 9 ; i++)
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	3301      	adds	r3, #1
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2b09      	cmp	r3, #9
 80005d6:	dde6      	ble.n	80005a6 <vLowPriorityTask+0x12>
	}
	vTaskDelete(NULL);
 80005d8:	2000      	movs	r0, #0
 80005da:	f002 fb5d 	bl	8002c98 <vTaskDelete>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000031c 	.word	0x2000031c

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	BaseType_t xRet;
	char *pcMessage = "This is UART Demo\r\n";
 80005f2:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <main+0x9c>)
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fa73 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f859 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8eb 	bl	80007d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f8bf 	bl	8000784 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8000606:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000608:	f7ff fde2 	bl	80001d0 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000616:	481d      	ldr	r0, [pc, #116]	@ (800068c <main+0xa0>)
 8000618:	f001 fce7 	bl	8001fea <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800061c:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <main+0xa4>)
 800061e:	1d3c      	adds	r4, r7, #4
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 f86d 	bl	8002712 <osThreadCreate>
 8000638:	4603      	mov	r3, r0
 800063a:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <main+0xa8>)
 800063c:	6013      	str	r3, [r2, #0]
    xRet = xTaskCreate(vPortYieldTask, "Task3", configMINIMAL_STACK_SIZE, "Task3\r\n", 1, NULL);
    if(xRet != pdTRUE)
  	  Error_Handler();
	*/

  xRet = xTaskCreate(vHighPriorityTask, "HP", configMINIMAL_STACK_SIZE, "HP\r\n", 5, NULL);
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2305      	movs	r3, #5
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <main+0xac>)
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	4914      	ldr	r1, [pc, #80]	@ (800069c <main+0xb0>)
 800064c:	4814      	ldr	r0, [pc, #80]	@ (80006a0 <main+0xb4>)
 800064e:	f002 f9d4 	bl	80029fa <xTaskCreate>
 8000652:	6238      	str	r0, [r7, #32]
  if(xRet != pdTRUE)
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d001      	beq.n	800065e <main+0x72>
	  Error_Handler();
 800065a:	f000 f8f1 	bl	8000840 <Error_Handler>
  xRet = xTaskCreate(vLowPriorityTask, "LP", configMINIMAL_STACK_SIZE, "LP\r\n", 3, NULL);
 800065e:	2300      	movs	r3, #0
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2303      	movs	r3, #3
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <main+0xb8>)
 8000668:	2280      	movs	r2, #128	@ 0x80
 800066a:	490f      	ldr	r1, [pc, #60]	@ (80006a8 <main+0xbc>)
 800066c:	480f      	ldr	r0, [pc, #60]	@ (80006ac <main+0xc0>)
 800066e:	f002 f9c4 	bl	80029fa <xTaskCreate>
 8000672:	6238      	str	r0, [r7, #32]
  if(xRet != pdTRUE)
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d001      	beq.n	800067e <main+0x92>
	  Error_Handler();
 800067a:	f000 f8e1 	bl	8000840 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800067e:	f002 f841 	bl	8002704 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	bf00      	nop
 8000684:	e7fd      	b.n	8000682 <main+0x96>
 8000686:	bf00      	nop
 8000688:	08003ee0 	.word	0x08003ee0
 800068c:	2000031c 	.word	0x2000031c
 8000690:	08003f18 	.word	0x08003f18
 8000694:	20000360 	.word	0x20000360
 8000698:	08003ef4 	.word	0x08003ef4
 800069c:	08003efc 	.word	0x08003efc
 80006a0:	08000531 	.word	0x08000531
 80006a4:	08003f00 	.word	0x08003f00
 80006a8:	08003f08 	.word	0x08003f08
 80006ac:	08000595 	.word	0x08000595

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	@ 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	@ 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fb28 	bl	8003d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b28      	ldr	r3, [pc, #160]	@ (800077c <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	4a27      	ldr	r2, [pc, #156]	@ (800077c <SystemClock_Config+0xcc>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e4:	4b25      	ldr	r3, [pc, #148]	@ (800077c <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a21      	ldr	r2, [pc, #132]	@ (8000780 <SystemClock_Config+0xd0>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000720:	2308      	movs	r3, #8
 8000722:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000724:	2332      	movs	r3, #50	@ 0x32
 8000726:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000728:	2304      	movs	r3, #4
 800072a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800072c:	2307      	movs	r3, #7
 800072e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fc93 	bl	8001060 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000740:	f000 f87e 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000750:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fef4 	bl	8001550 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800076e:	f000 f867 	bl	8000840 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	@ 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_USART2_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007bc:	f001 fbc8 	bl	8001f50 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f83b 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000031c 	.word	0x2000031c
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_GPIO_Init+0x30>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <MX_GPIO_Init+0x30>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_GPIO_Init+0x30>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f001 ffc8 	bl	80027aa <osDelay>
 800081a:	e7fb      	b.n	8000814 <StartDefaultTask+0x8>

0800081c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a04      	ldr	r2, [pc, #16]	@ (800083c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d101      	bne.n	8000832 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082e:	f000 f979 	bl	8000b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40010000 	.word	0x40010000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_MspInit+0x54>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085a:	4a11      	ldr	r2, [pc, #68]	@ (80008a0 <HAL_MspInit+0x54>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000860:	6453      	str	r3, [r2, #68]	@ 0x44
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <HAL_MspInit+0x54>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <HAL_MspInit+0x54>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <HAL_MspInit+0x54>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	@ 0x40
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <HAL_MspInit+0x54>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	210f      	movs	r1, #15
 800088e:	f06f 0001 	mvn.w	r0, #1
 8000892:	f000 fa1f 	bl	8000cd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a19      	ldr	r2, [pc, #100]	@ (8000928 <HAL_UART_MspInit+0x84>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d12b      	bne.n	800091e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a10      	ldr	r2, [pc, #64]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008fe:	230c      	movs	r3, #12
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090e:	2307      	movs	r3, #7
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <HAL_UART_MspInit+0x8c>)
 800091a:	f000 fa05 	bl	8000d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	@ 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40004400 	.word	0x40004400
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000

08000934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	@ 0x30
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b2f      	ldr	r3, [pc, #188]	@ (8000a08 <HAL_InitTick+0xd4>)
 800094a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094c:	4a2e      	ldr	r2, [pc, #184]	@ (8000a08 <HAL_InitTick+0xd4>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6453      	str	r3, [r2, #68]	@ 0x44
 8000954:	4b2c      	ldr	r3, [pc, #176]	@ (8000a08 <HAL_InitTick+0xd4>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000960:	f107 020c 	add.w	r2, r7, #12
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f001 f810 	bl	8001990 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000970:	f000 fffa 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8000974:	4603      	mov	r3, r0
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800097c:	4a23      	ldr	r2, [pc, #140]	@ (8000a0c <HAL_InitTick+0xd8>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	0c9b      	lsrs	r3, r3, #18
 8000984:	3b01      	subs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000988:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <HAL_InitTick+0xdc>)
 800098a:	4a22      	ldr	r2, [pc, #136]	@ (8000a14 <HAL_InitTick+0xe0>)
 800098c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <HAL_InitTick+0xdc>)
 8000990:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000994:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000996:	4a1e      	ldr	r2, [pc, #120]	@ (8000a10 <HAL_InitTick+0xdc>)
 8000998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <HAL_InitTick+0xdc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <HAL_InitTick+0xdc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <HAL_InitTick+0xdc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009ae:	4818      	ldr	r0, [pc, #96]	@ (8000a10 <HAL_InitTick+0xdc>)
 80009b0:	f001 f820 	bl	80019f4 <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d11b      	bne.n	80009fa <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009c2:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <HAL_InitTick+0xdc>)
 80009c4:	f001 f870 	bl	8001aa8 <HAL_TIM_Base_Start_IT>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d111      	bne.n	80009fa <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009d6:	2019      	movs	r0, #25
 80009d8:	f000 f998 	bl	8000d0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b0f      	cmp	r3, #15
 80009e0:	d808      	bhi.n	80009f4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009e2:	2200      	movs	r2, #0
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	2019      	movs	r0, #25
 80009e8:	f000 f974 	bl	8000cd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <HAL_InitTick+0xe4>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
 80009f2:	e002      	b.n	80009fa <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3730      	adds	r7, #48	@ 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	431bde83 	.word	0x431bde83
 8000a10:	20000364 	.word	0x20000364
 8000a14:	40010000 	.word	0x40010000
 8000a18:	20000004 	.word	0x20000004

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a5a:	f001 f895 	bl	8001b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000364 	.word	0x20000364

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a90:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a92:	490e      	ldr	r1, [pc, #56]	@ (8000acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a94:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa8:	4c0b      	ldr	r4, [pc, #44]	@ (8000ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ab6:	f7ff ffd7 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aba:	f003 f989 	bl	8003dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000abe:	f7ff fd95 	bl	80005ec <main>
  bx  lr    
 8000ac2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ad0:	08003f64 	.word	0x08003f64
  ldr r2, =_sbss
 8000ad4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ad8:	20004244 	.word	0x20004244

08000adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b20 <HAL_Init+0x40>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <HAL_Init+0x40>)
 8000af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <HAL_Init+0x40>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f8d8 	bl	8000cbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f7ff ff10 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fe9a 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023c00 	.word	0x40023c00

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	200003ac 	.word	0x200003ac

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200003ac 	.word	0x200003ac

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	@ (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	@ 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ff4c 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce6:	f7ff ff61 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000cea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	6978      	ldr	r0, [r7, #20]
 8000cf2:	f7ff ffb1 	bl	8000c58 <NVIC_EncodePriority>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff80 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff54 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	e16b      	b.n	800101c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 815a 	bne.w	8001016 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d005      	beq.n	8000d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d017      	beq.n	8000e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d123      	bne.n	8000e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	69b9      	ldr	r1, [r7, #24]
 8000e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0203 	and.w	r2, r3, #3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 80b4 	beq.w	8001016 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b60      	ldr	r3, [pc, #384]	@ (8001034 <HAL_GPIO_Init+0x30c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a5f      	ldr	r2, [pc, #380]	@ (8001034 <HAL_GPIO_Init+0x30c>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8001034 <HAL_GPIO_Init+0x30c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eca:	4a5b      	ldr	r2, [pc, #364]	@ (8001038 <HAL_GPIO_Init+0x310>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a52      	ldr	r2, [pc, #328]	@ (800103c <HAL_GPIO_Init+0x314>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d02b      	beq.n	8000f4e <HAL_GPIO_Init+0x226>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a51      	ldr	r2, [pc, #324]	@ (8001040 <HAL_GPIO_Init+0x318>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d025      	beq.n	8000f4a <HAL_GPIO_Init+0x222>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a50      	ldr	r2, [pc, #320]	@ (8001044 <HAL_GPIO_Init+0x31c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d01f      	beq.n	8000f46 <HAL_GPIO_Init+0x21e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4f      	ldr	r2, [pc, #316]	@ (8001048 <HAL_GPIO_Init+0x320>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d019      	beq.n	8000f42 <HAL_GPIO_Init+0x21a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	@ (800104c <HAL_GPIO_Init+0x324>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0x216>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4d      	ldr	r2, [pc, #308]	@ (8001050 <HAL_GPIO_Init+0x328>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00d      	beq.n	8000f3a <HAL_GPIO_Init+0x212>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4c      	ldr	r2, [pc, #304]	@ (8001054 <HAL_GPIO_Init+0x32c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d007      	beq.n	8000f36 <HAL_GPIO_Init+0x20e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4b      	ldr	r2, [pc, #300]	@ (8001058 <HAL_GPIO_Init+0x330>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_GPIO_Init+0x20a>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e00e      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f32:	2308      	movs	r3, #8
 8000f34:	e00c      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e00a      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	e008      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	f002 0203 	and.w	r2, r2, #3
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	4093      	lsls	r3, r2
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f60:	4935      	ldr	r1, [pc, #212]	@ (8001038 <HAL_GPIO_Init+0x310>)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f92:	4a32      	ldr	r2, [pc, #200]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001010:	4a12      	ldr	r2, [pc, #72]	@ (800105c <HAL_GPIO_Init+0x334>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3301      	adds	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b0f      	cmp	r3, #15
 8001020:	f67f ae90 	bls.w	8000d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40013800 	.word	0x40013800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40021400 	.word	0x40021400
 8001054:	40021800 	.word	0x40021800
 8001058:	40021c00 	.word	0x40021c00
 800105c:	40013c00 	.word	0x40013c00

08001060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e267      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d075      	beq.n	800116a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107e:	4b88      	ldr	r3, [pc, #544]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b04      	cmp	r3, #4
 8001088:	d00c      	beq.n	80010a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	4b85      	ldr	r3, [pc, #532]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001092:	2b08      	cmp	r3, #8
 8001094:	d112      	bne.n	80010bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001096:	4b82      	ldr	r3, [pc, #520]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800109e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010a2:	d10b      	bne.n	80010bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	4b7e      	ldr	r3, [pc, #504]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d05b      	beq.n	8001168 <HAL_RCC_OscConfig+0x108>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d157      	bne.n	8001168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e242      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c4:	d106      	bne.n	80010d4 <HAL_RCC_OscConfig+0x74>
 80010c6:	4b76      	ldr	r3, [pc, #472]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a75      	ldr	r2, [pc, #468]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e01d      	b.n	8001110 <HAL_RCC_OscConfig+0xb0>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x98>
 80010de:	4b70      	ldr	r3, [pc, #448]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a6f      	ldr	r2, [pc, #444]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b6d      	ldr	r3, [pc, #436]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6c      	ldr	r2, [pc, #432]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0xb0>
 80010f8:	4b69      	ldr	r3, [pc, #420]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a68      	ldr	r2, [pc, #416]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b66      	ldr	r3, [pc, #408]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a65      	ldr	r2, [pc, #404]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800110e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fd18 	bl	8000b4c <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fd14 	bl	8000b4c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	@ 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e207      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b5b      	ldr	r3, [pc, #364]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0xc0>
 800113e:	e014      	b.n	800116a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fd04 	bl	8000b4c <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fd00 	bl	8000b4c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	@ 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1f3      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	4b51      	ldr	r3, [pc, #324]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0xe8>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d063      	beq.n	800123e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001176:	4b4a      	ldr	r3, [pc, #296]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b47      	ldr	r3, [pc, #284]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118a:	2b08      	cmp	r3, #8
 800118c:	d11c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118e:	4b44      	ldr	r3, [pc, #272]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d116      	bne.n	80011c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	4b41      	ldr	r3, [pc, #260]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <HAL_RCC_OscConfig+0x152>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e1c7      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b3b      	ldr	r3, [pc, #236]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4937      	ldr	r1, [pc, #220]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	e03a      	b.n	800123e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d0:	4b34      	ldr	r3, [pc, #208]	@ (80012a4 <HAL_RCC_OscConfig+0x244>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fcb9 	bl	8000b4c <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fcb5 	bl	8000b4c <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e1a8      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4925      	ldr	r1, [pc, #148]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
 8001210:	e015      	b.n	800123e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <HAL_RCC_OscConfig+0x244>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001218:	f7ff fc98 	bl	8000b4c <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff fc94 	bl	8000b4c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e187      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d036      	beq.n	80012b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d016      	beq.n	8001280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_RCC_OscConfig+0x248>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001258:	f7ff fc78 	bl	8000b4c <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fc74 	bl	8000b4c <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e167      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x200>
 800127e:	e01b      	b.n	80012b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <HAL_RCC_OscConfig+0x248>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fc61 	bl	8000b4c <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	e00e      	b.n	80012ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128e:	f7ff fc5d 	bl	8000b4c <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d907      	bls.n	80012ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e150      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
 80012a0:	40023800 	.word	0x40023800
 80012a4:	42470000 	.word	0x42470000
 80012a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	4b88      	ldr	r3, [pc, #544]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ea      	bne.n	800128e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 8097 	beq.w	80013f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ca:	4b81      	ldr	r3, [pc, #516]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10f      	bne.n	80012f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b7d      	ldr	r3, [pc, #500]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a7c      	ldr	r2, [pc, #496]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b7a      	ldr	r3, [pc, #488]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012f2:	2301      	movs	r3, #1
 80012f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f6:	4b77      	ldr	r3, [pc, #476]	@ (80014d4 <HAL_RCC_OscConfig+0x474>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d118      	bne.n	8001334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001302:	4b74      	ldr	r3, [pc, #464]	@ (80014d4 <HAL_RCC_OscConfig+0x474>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a73      	ldr	r2, [pc, #460]	@ (80014d4 <HAL_RCC_OscConfig+0x474>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800130c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130e:	f7ff fc1d 	bl	8000b4c <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001316:	f7ff fc19 	bl	8000b4c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e10c      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <HAL_RCC_OscConfig+0x474>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x2ea>
 800133c:	4b64      	ldr	r3, [pc, #400]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001340:	4a63      	ldr	r2, [pc, #396]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6713      	str	r3, [r2, #112]	@ 0x70
 8001348:	e01c      	b.n	8001384 <HAL_RCC_OscConfig+0x324>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x30c>
 8001352:	4b5f      	ldr	r3, [pc, #380]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001356:	4a5e      	ldr	r2, [pc, #376]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6713      	str	r3, [r2, #112]	@ 0x70
 800135e:	4b5c      	ldr	r3, [pc, #368]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001362:	4a5b      	ldr	r2, [pc, #364]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6713      	str	r3, [r2, #112]	@ 0x70
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0x324>
 800136c:	4b58      	ldr	r3, [pc, #352]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001370:	4a57      	ldr	r2, [pc, #348]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6713      	str	r3, [r2, #112]	@ 0x70
 8001378:	4b55      	ldr	r3, [pc, #340]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137c:	4a54      	ldr	r2, [pc, #336]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 800137e:	f023 0304 	bic.w	r3, r3, #4
 8001382:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d015      	beq.n	80013b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fbde 	bl	8000b4c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001392:	e00a      	b.n	80013aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff fbda 	bl	8000b4c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0cb      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013aa:	4b49      	ldr	r3, [pc, #292]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0ee      	beq.n	8001394 <HAL_RCC_OscConfig+0x334>
 80013b6:	e014      	b.n	80013e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fbc8 	bl	8000b4c <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fbc4 	bl	8000b4c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e0b5      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d6:	4b3e      	ldr	r3, [pc, #248]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ee      	bne.n	80013c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e8:	4b39      	ldr	r3, [pc, #228]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	4a38      	ldr	r2, [pc, #224]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80a1 	beq.w	8001540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013fe:	4b34      	ldr	r3, [pc, #208]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b08      	cmp	r3, #8
 8001408:	d05c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d141      	bne.n	8001496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <HAL_RCC_OscConfig+0x478>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb98 	bl	8000b4c <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fb94 	bl	8000b4c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e087      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	3b01      	subs	r3, #1
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	491b      	ldr	r1, [pc, #108]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_RCC_OscConfig+0x478>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fb6d 	bl	8000b4c <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fb69 	bl	8000b4c <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e05c      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x416>
 8001494:	e054      	b.n	8001540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <HAL_RCC_OscConfig+0x478>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb56 	bl	8000b4c <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fb52 	bl	8000b4c <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e045      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x444>
 80014c2:	e03d      	b.n	8001540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d107      	bne.n	80014dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e038      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000
 80014d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <HAL_RCC_OscConfig+0x4ec>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d028      	beq.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d121      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d11a      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800150c:	4013      	ands	r3, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001514:	4293      	cmp	r3, r2
 8001516:	d111      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	3b01      	subs	r3, #1
 8001526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0cc      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b68      	ldr	r3, [pc, #416]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d90c      	bls.n	800158c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b65      	ldr	r3, [pc, #404]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157a:	4b63      	ldr	r3, [pc, #396]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0b8      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a4:	4b59      	ldr	r3, [pc, #356]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a58      	ldr	r2, [pc, #352]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015bc:	4b53      	ldr	r3, [pc, #332]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a52      	ldr	r2, [pc, #328]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c8:	4b50      	ldr	r3, [pc, #320]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	494d      	ldr	r1, [pc, #308]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d044      	beq.n	8001670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b47      	ldr	r3, [pc, #284]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d119      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e07f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d003      	beq.n	800160e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	2b03      	cmp	r3, #3
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	4b3f      	ldr	r3, [pc, #252]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e06f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b3b      	ldr	r3, [pc, #236]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e067      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4b37      	ldr	r3, [pc, #220]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f023 0203 	bic.w	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4934      	ldr	r1, [pc, #208]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001640:	f7ff fa84 	bl	8000b4c <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	e00a      	b.n	800165e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7ff fa80 	bl	8000b4c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e04f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 020c 	and.w	r2, r3, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	429a      	cmp	r2, r3
 800166e:	d1eb      	bne.n	8001648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001670:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d20c      	bcs.n	8001698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e032      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4916      	ldr	r1, [pc, #88]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	490e      	ldr	r1, [pc, #56]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d6:	f000 f821 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016da:	4602      	mov	r2, r0
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	490a      	ldr	r1, [pc, #40]	@ (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	5ccb      	ldrb	r3, [r1, r3]
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a09      	ldr	r2, [pc, #36]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_RCC_ClockConfig+0x1c8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f91c 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00
 800170c:	40023800 	.word	0x40023800
 8001710:	08003f3c 	.word	0x08003f3c
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001720:	b094      	sub	sp, #80	@ 0x50
 8001722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	647b      	str	r3, [r7, #68]	@ 0x44
 8001728:	2300      	movs	r3, #0
 800172a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800172c:	2300      	movs	r3, #0
 800172e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001734:	4b79      	ldr	r3, [pc, #484]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d00d      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x40>
 8001740:	2b08      	cmp	r3, #8
 8001742:	f200 80e1 	bhi.w	8001908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x34>
 800174a:	2b04      	cmp	r3, #4
 800174c:	d003      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x3a>
 800174e:	e0db      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4b73      	ldr	r3, [pc, #460]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x204>)
 8001752:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001754:	e0db      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001756:	4b73      	ldr	r3, [pc, #460]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x208>)
 8001758:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800175a:	e0d8      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4b6f      	ldr	r3, [pc, #444]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001764:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001766:	4b6d      	ldr	r3, [pc, #436]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d063      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b6a      	ldr	r3, [pc, #424]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	2200      	movs	r2, #0
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800177c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800177e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001784:	633b      	str	r3, [r7, #48]	@ 0x30
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	@ 0x34
 800178a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800178e:	4622      	mov	r2, r4
 8001790:	462b      	mov	r3, r5
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	0159      	lsls	r1, r3, #5
 800179c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a0:	0150      	lsls	r0, r2, #5
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4621      	mov	r1, r4
 80017a8:	1a51      	subs	r1, r2, r1
 80017aa:	6139      	str	r1, [r7, #16]
 80017ac:	4629      	mov	r1, r5
 80017ae:	eb63 0301 	sbc.w	r3, r3, r1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017c0:	4659      	mov	r1, fp
 80017c2:	018b      	lsls	r3, r1, #6
 80017c4:	4651      	mov	r1, sl
 80017c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ca:	4651      	mov	r1, sl
 80017cc:	018a      	lsls	r2, r1, #6
 80017ce:	4651      	mov	r1, sl
 80017d0:	ebb2 0801 	subs.w	r8, r2, r1
 80017d4:	4659      	mov	r1, fp
 80017d6:	eb63 0901 	sbc.w	r9, r3, r1
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ee:	4690      	mov	r8, r2
 80017f0:	4699      	mov	r9, r3
 80017f2:	4623      	mov	r3, r4
 80017f4:	eb18 0303 	adds.w	r3, r8, r3
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	462b      	mov	r3, r5
 80017fc:	eb49 0303 	adc.w	r3, r9, r3
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800180e:	4629      	mov	r1, r5
 8001810:	024b      	lsls	r3, r1, #9
 8001812:	4621      	mov	r1, r4
 8001814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001818:	4621      	mov	r1, r4
 800181a:	024a      	lsls	r2, r1, #9
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001822:	2200      	movs	r2, #0
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800182c:	f7fe fcd8 	bl	80001e0 <__aeabi_uldivmod>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4613      	mov	r3, r2
 8001836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001838:	e058      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	4b38      	ldr	r3, [pc, #224]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	2200      	movs	r2, #0
 8001842:	4618      	mov	r0, r3
 8001844:	4611      	mov	r1, r2
 8001846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800184a:	623b      	str	r3, [r7, #32]
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001854:	4642      	mov	r2, r8
 8001856:	464b      	mov	r3, r9
 8001858:	f04f 0000 	mov.w	r0, #0
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	0159      	lsls	r1, r3, #5
 8001862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001866:	0150      	lsls	r0, r2, #5
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4641      	mov	r1, r8
 800186e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001872:	4649      	mov	r1, r9
 8001874:	eb63 0b01 	sbc.w	fp, r3, r1
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800188c:	ebb2 040a 	subs.w	r4, r2, sl
 8001890:	eb63 050b 	sbc.w	r5, r3, fp
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	00eb      	lsls	r3, r5, #3
 800189e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018a2:	00e2      	lsls	r2, r4, #3
 80018a4:	4614      	mov	r4, r2
 80018a6:	461d      	mov	r5, r3
 80018a8:	4643      	mov	r3, r8
 80018aa:	18e3      	adds	r3, r4, r3
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	464b      	mov	r3, r9
 80018b0:	eb45 0303 	adc.w	r3, r5, r3
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018c2:	4629      	mov	r1, r5
 80018c4:	028b      	lsls	r3, r1, #10
 80018c6:	4621      	mov	r1, r4
 80018c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018cc:	4621      	mov	r1, r4
 80018ce:	028a      	lsls	r2, r1, #10
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018d6:	2200      	movs	r2, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	61fa      	str	r2, [r7, #28]
 80018dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e0:	f7fe fc7e 	bl	80001e0 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018ec:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	3301      	adds	r3, #1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80018fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001906:	e002      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x204>)
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800190c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001910:	4618      	mov	r0, r3
 8001912:	3750      	adds	r7, #80	@ 0x50
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200

08001928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_RCC_GetHCLKFreq+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001944:	f7ff fff0 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0a9b      	lsrs	r3, r3, #10
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	4903      	ldr	r1, [pc, #12]	@ (8001964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	08003f4c 	.word	0x08003f4c

08001968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800196c:	f7ff ffdc 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001970:	4602      	mov	r2, r0
 8001972:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	0b5b      	lsrs	r3, r3, #13
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	4903      	ldr	r1, [pc, #12]	@ (800198c <HAL_RCC_GetPCLK2Freq+0x24>)
 800197e:	5ccb      	ldrb	r3, [r1, r3]
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	08003f4c 	.word	0x08003f4c

08001990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	220f      	movs	r2, #15
 800199e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_RCC_GetClockConfig+0x5c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019ac:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_RCC_GetClockConfig+0x5c>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <HAL_RCC_GetClockConfig+0x5c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <HAL_RCC_GetClockConfig+0x60>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0207 	and.w	r2, r3, #7
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	601a      	str	r2, [r3, #0]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40023c00 	.word	0x40023c00

080019f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e041      	b.n	8001a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f839 	bl	8001a92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f000 f9d8 	bl	8001de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d001      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e04e      	b.n	8001b5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a23      	ldr	r2, [pc, #140]	@ (8001b6c <HAL_TIM_Base_Start_IT+0xc4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d022      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x80>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aea:	d01d      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x80>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b70 <HAL_TIM_Base_Start_IT+0xc8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d018      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x80>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1e      	ldr	r2, [pc, #120]	@ (8001b74 <HAL_TIM_Base_Start_IT+0xcc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d013      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x80>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	@ (8001b78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00e      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x80>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001b7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d009      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x80>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a19      	ldr	r2, [pc, #100]	@ (8001b80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d004      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x80>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a18      	ldr	r2, [pc, #96]	@ (8001b84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d111      	bne.n	8001b4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d010      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4a:	e007      	b.n	8001b5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40000800 	.word	0x40000800
 8001b78:	40000c00 	.word	0x40000c00
 8001b7c:	40010400 	.word	0x40010400
 8001b80:	40014000 	.word	0x40014000
 8001b84:	40001800 	.word	0x40001800

08001b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d122      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d11b      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0202 	mvn.w	r2, #2
 8001bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8ee 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8e0 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8f1 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d122      	bne.n	8001c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d11b      	bne.n	8001c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0204 	mvn.w	r2, #4
 8001c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8c4 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001c24:	e005      	b.n	8001c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8b6 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f8c7 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d122      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d11b      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0208 	mvn.w	r2, #8
 8001c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2204      	movs	r2, #4
 8001c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f89a 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f88c 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f89d 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d122      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0210 	mvn.w	r2, #16
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f870 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f862 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f873 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0201 	mvn.w	r2, #1
 8001d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fd88 	bl	800081c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d16:	2b80      	cmp	r3, #128	@ 0x80
 8001d18:	d10e      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d24:	2b80      	cmp	r3, #128	@ 0x80
 8001d26:	d107      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f902 	bl	8001f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d42:	2b40      	cmp	r3, #64	@ 0x40
 8001d44:	d10e      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d50:	2b40      	cmp	r3, #64	@ 0x40
 8001d52:	d107      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f838 	bl	8001dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d10e      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0320 	and.w	r3, r3, #32
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d107      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0220 	mvn.w	r2, #32
 8001d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8cc 	bl	8001f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a40      	ldr	r2, [pc, #256]	@ (8001efc <TIM_Base_SetConfig+0x114>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e06:	d00f      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f00 <TIM_Base_SetConfig+0x118>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00b      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3c      	ldr	r2, [pc, #240]	@ (8001f04 <TIM_Base_SetConfig+0x11c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f08 <TIM_Base_SetConfig+0x120>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3a      	ldr	r2, [pc, #232]	@ (8001f0c <TIM_Base_SetConfig+0x124>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d108      	bne.n	8001e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001efc <TIM_Base_SetConfig+0x114>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d02b      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e48:	d027      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f00 <TIM_Base_SetConfig+0x118>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d023      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2b      	ldr	r2, [pc, #172]	@ (8001f04 <TIM_Base_SetConfig+0x11c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01f      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f08 <TIM_Base_SetConfig+0x120>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01b      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <TIM_Base_SetConfig+0x124>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d017      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	@ (8001f10 <TIM_Base_SetConfig+0x128>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <TIM_Base_SetConfig+0x12c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00f      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a26      	ldr	r2, [pc, #152]	@ (8001f18 <TIM_Base_SetConfig+0x130>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00b      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a25      	ldr	r2, [pc, #148]	@ (8001f1c <TIM_Base_SetConfig+0x134>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a24      	ldr	r2, [pc, #144]	@ (8001f20 <TIM_Base_SetConfig+0x138>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d003      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a23      	ldr	r2, [pc, #140]	@ (8001f24 <TIM_Base_SetConfig+0x13c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d108      	bne.n	8001eac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <TIM_Base_SetConfig+0x114>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d003      	beq.n	8001ee0 <TIM_Base_SetConfig+0xf8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a0c      	ldr	r2, [pc, #48]	@ (8001f0c <TIM_Base_SetConfig+0x124>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d103      	bne.n	8001ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	615a      	str	r2, [r3, #20]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40010400 	.word	0x40010400
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40014400 	.word	0x40014400
 8001f18:	40014800 	.word	0x40014800
 8001f1c:	40001800 	.word	0x40001800
 8001f20:	40001c00 	.word	0x40001c00
 8001f24:	40002000 	.word	0x40002000

08001f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e03f      	b.n	8001fe2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fc94 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	@ 0x24
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f929 	bl	80021ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b08a      	sub	sp, #40	@ 0x28
 8001fee:	af02      	add	r7, sp, #8
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b20      	cmp	r3, #32
 8002008:	d17c      	bne.n	8002104 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_UART_Transmit+0x2c>
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e075      	b.n	8002106 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_UART_Transmit+0x3e>
 8002024:	2302      	movs	r3, #2
 8002026:	e06e      	b.n	8002106 <HAL_UART_Transmit+0x11c>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2221      	movs	r2, #33	@ 0x21
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800203e:	f7fe fd85 	bl	8000b4c <HAL_GetTick>
 8002042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	88fa      	ldrh	r2, [r7, #6]
 800204e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002058:	d108      	bne.n	800206c <HAL_UART_Transmit+0x82>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d104      	bne.n	800206c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	e003      	b.n	8002074 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800207c:	e02a      	b.n	80020d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2200      	movs	r2, #0
 8002086:	2180      	movs	r1, #128	@ 0x80
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f840 	bl	800210e <UART_WaitOnFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e036      	b.n	8002106 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10b      	bne.n	80020b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	3302      	adds	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	e007      	b.n	80020c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3301      	adds	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1cf      	bne.n	800207e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2140      	movs	r1, #64	@ 0x40
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f810 	bl	800210e <UART_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e006      	b.n	8002106 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b090      	sub	sp, #64	@ 0x40
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800211e:	e050      	b.n	80021c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002126:	d04c      	beq.n	80021c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <UART_WaitOnFlagUntilTimeout+0x30>
 800212e:	f7fe fd0d 	bl	8000b4c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800213a:	429a      	cmp	r2, r3
 800213c:	d241      	bcs.n	80021c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	330c      	adds	r3, #12
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002148:	e853 3f00 	ldrex	r3, [r3]
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	330c      	adds	r3, #12
 800215c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800215e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002160:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002162:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002164:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002166:	e841 2300 	strex	r3, r2, [r1]
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800216c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1e5      	bne.n	800213e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3314      	adds	r3, #20
 8002178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	e853 3f00 	ldrex	r3, [r3]
 8002180:	613b      	str	r3, [r7, #16]
   return(result);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	63bb      	str	r3, [r7, #56]	@ 0x38
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3314      	adds	r3, #20
 8002190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002192:	623a      	str	r2, [r7, #32]
 8002194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002196:	69f9      	ldr	r1, [r7, #28]
 8002198:	6a3a      	ldr	r2, [r7, #32]
 800219a:	e841 2300 	strex	r3, r2, [r1]
 800219e:	61bb      	str	r3, [r7, #24]
   return(result);
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1e5      	bne.n	8002172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e00f      	b.n	80021e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4013      	ands	r3, r2
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	bf0c      	ite	eq
 80021d2:	2301      	moveq	r3, #1
 80021d4:	2300      	movne	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d09f      	beq.n	8002120 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3740      	adds	r7, #64	@ 0x40
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f0:	b0c0      	sub	sp, #256	@ 0x100
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002208:	68d9      	ldr	r1, [r3, #12]
 800220a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	ea40 0301 	orr.w	r3, r0, r1
 8002214:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	431a      	orrs	r2, r3
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	431a      	orrs	r2, r3
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002244:	f021 010c 	bic.w	r1, r1, #12
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002252:	430b      	orrs	r3, r1
 8002254:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002266:	6999      	ldr	r1, [r3, #24]
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	ea40 0301 	orr.w	r3, r0, r1
 8002272:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b8f      	ldr	r3, [pc, #572]	@ (80024b8 <UART_SetConfig+0x2cc>)
 800227c:	429a      	cmp	r2, r3
 800227e:	d005      	beq.n	800228c <UART_SetConfig+0xa0>
 8002280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b8d      	ldr	r3, [pc, #564]	@ (80024bc <UART_SetConfig+0x2d0>)
 8002288:	429a      	cmp	r2, r3
 800228a:	d104      	bne.n	8002296 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800228c:	f7ff fb6c 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8002290:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002294:	e003      	b.n	800229e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002296:	f7ff fb53 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 800229a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800229e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022a8:	f040 810c 	bne.w	80024c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022b0:	2200      	movs	r2, #0
 80022b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80022b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80022ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80022be:	4622      	mov	r2, r4
 80022c0:	462b      	mov	r3, r5
 80022c2:	1891      	adds	r1, r2, r2
 80022c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80022c6:	415b      	adcs	r3, r3
 80022c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022ce:	4621      	mov	r1, r4
 80022d0:	eb12 0801 	adds.w	r8, r2, r1
 80022d4:	4629      	mov	r1, r5
 80022d6:	eb43 0901 	adc.w	r9, r3, r1
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ee:	4690      	mov	r8, r2
 80022f0:	4699      	mov	r9, r3
 80022f2:	4623      	mov	r3, r4
 80022f4:	eb18 0303 	adds.w	r3, r8, r3
 80022f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80022fc:	462b      	mov	r3, r5
 80022fe:	eb49 0303 	adc.w	r3, r9, r3
 8002302:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002312:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002316:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800231a:	460b      	mov	r3, r1
 800231c:	18db      	adds	r3, r3, r3
 800231e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002320:	4613      	mov	r3, r2
 8002322:	eb42 0303 	adc.w	r3, r2, r3
 8002326:	657b      	str	r3, [r7, #84]	@ 0x54
 8002328:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800232c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002330:	f7fd ff56 	bl	80001e0 <__aeabi_uldivmod>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4b61      	ldr	r3, [pc, #388]	@ (80024c0 <UART_SetConfig+0x2d4>)
 800233a:	fba3 2302 	umull	r2, r3, r3, r2
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	011c      	lsls	r4, r3, #4
 8002342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002346:	2200      	movs	r2, #0
 8002348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800234c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002350:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002354:	4642      	mov	r2, r8
 8002356:	464b      	mov	r3, r9
 8002358:	1891      	adds	r1, r2, r2
 800235a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800235c:	415b      	adcs	r3, r3
 800235e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002360:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002364:	4641      	mov	r1, r8
 8002366:	eb12 0a01 	adds.w	sl, r2, r1
 800236a:	4649      	mov	r1, r9
 800236c:	eb43 0b01 	adc.w	fp, r3, r1
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800237c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002384:	4692      	mov	sl, r2
 8002386:	469b      	mov	fp, r3
 8002388:	4643      	mov	r3, r8
 800238a:	eb1a 0303 	adds.w	r3, sl, r3
 800238e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002392:	464b      	mov	r3, r9
 8002394:	eb4b 0303 	adc.w	r3, fp, r3
 8002398:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80023ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80023b0:	460b      	mov	r3, r1
 80023b2:	18db      	adds	r3, r3, r3
 80023b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80023b6:	4613      	mov	r3, r2
 80023b8:	eb42 0303 	adc.w	r3, r2, r3
 80023bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80023be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80023c6:	f7fd ff0b 	bl	80001e0 <__aeabi_uldivmod>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4611      	mov	r1, r2
 80023d0:	4b3b      	ldr	r3, [pc, #236]	@ (80024c0 <UART_SetConfig+0x2d4>)
 80023d2:	fba3 2301 	umull	r2, r3, r3, r1
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2264      	movs	r2, #100	@ 0x64
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	1acb      	subs	r3, r1, r3
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80023e6:	4b36      	ldr	r3, [pc, #216]	@ (80024c0 <UART_SetConfig+0x2d4>)
 80023e8:	fba3 2302 	umull	r2, r3, r3, r2
 80023ec:	095b      	lsrs	r3, r3, #5
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80023f4:	441c      	add	r4, r3
 80023f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023fa:	2200      	movs	r2, #0
 80023fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002400:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002404:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002408:	4642      	mov	r2, r8
 800240a:	464b      	mov	r3, r9
 800240c:	1891      	adds	r1, r2, r2
 800240e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002410:	415b      	adcs	r3, r3
 8002412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002418:	4641      	mov	r1, r8
 800241a:	1851      	adds	r1, r2, r1
 800241c:	6339      	str	r1, [r7, #48]	@ 0x30
 800241e:	4649      	mov	r1, r9
 8002420:	414b      	adcs	r3, r1
 8002422:	637b      	str	r3, [r7, #52]	@ 0x34
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002430:	4659      	mov	r1, fp
 8002432:	00cb      	lsls	r3, r1, #3
 8002434:	4651      	mov	r1, sl
 8002436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800243a:	4651      	mov	r1, sl
 800243c:	00ca      	lsls	r2, r1, #3
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	4603      	mov	r3, r0
 8002444:	4642      	mov	r2, r8
 8002446:	189b      	adds	r3, r3, r2
 8002448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800244c:	464b      	mov	r3, r9
 800244e:	460a      	mov	r2, r1
 8002450:	eb42 0303 	adc.w	r3, r2, r3
 8002454:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002464:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002468:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800246c:	460b      	mov	r3, r1
 800246e:	18db      	adds	r3, r3, r3
 8002470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002472:	4613      	mov	r3, r2
 8002474:	eb42 0303 	adc.w	r3, r2, r3
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800247a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800247e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002482:	f7fd fead 	bl	80001e0 <__aeabi_uldivmod>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <UART_SetConfig+0x2d4>)
 800248c:	fba3 1302 	umull	r1, r3, r3, r2
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	2164      	movs	r1, #100	@ 0x64
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	3332      	adds	r3, #50	@ 0x32
 800249e:	4a08      	ldr	r2, [pc, #32]	@ (80024c0 <UART_SetConfig+0x2d4>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	f003 0207 	and.w	r2, r3, #7
 80024aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4422      	add	r2, r4
 80024b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024b4:	e106      	b.n	80026c4 <UART_SetConfig+0x4d8>
 80024b6:	bf00      	nop
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40011400 	.word	0x40011400
 80024c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024c8:	2200      	movs	r2, #0
 80024ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80024ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80024d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80024d6:	4642      	mov	r2, r8
 80024d8:	464b      	mov	r3, r9
 80024da:	1891      	adds	r1, r2, r2
 80024dc:	6239      	str	r1, [r7, #32]
 80024de:	415b      	adcs	r3, r3
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024e6:	4641      	mov	r1, r8
 80024e8:	1854      	adds	r4, r2, r1
 80024ea:	4649      	mov	r1, r9
 80024ec:	eb43 0501 	adc.w	r5, r3, r1
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	00eb      	lsls	r3, r5, #3
 80024fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024fe:	00e2      	lsls	r2, r4, #3
 8002500:	4614      	mov	r4, r2
 8002502:	461d      	mov	r5, r3
 8002504:	4643      	mov	r3, r8
 8002506:	18e3      	adds	r3, r4, r3
 8002508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800250c:	464b      	mov	r3, r9
 800250e:	eb45 0303 	adc.w	r3, r5, r3
 8002512:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002522:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002532:	4629      	mov	r1, r5
 8002534:	008b      	lsls	r3, r1, #2
 8002536:	4621      	mov	r1, r4
 8002538:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800253c:	4621      	mov	r1, r4
 800253e:	008a      	lsls	r2, r1, #2
 8002540:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002544:	f7fd fe4c 	bl	80001e0 <__aeabi_uldivmod>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4b60      	ldr	r3, [pc, #384]	@ (80026d0 <UART_SetConfig+0x4e4>)
 800254e:	fba3 2302 	umull	r2, r3, r3, r2
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	011c      	lsls	r4, r3, #4
 8002556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800255a:	2200      	movs	r2, #0
 800255c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002560:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002564:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002568:	4642      	mov	r2, r8
 800256a:	464b      	mov	r3, r9
 800256c:	1891      	adds	r1, r2, r2
 800256e:	61b9      	str	r1, [r7, #24]
 8002570:	415b      	adcs	r3, r3
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002578:	4641      	mov	r1, r8
 800257a:	1851      	adds	r1, r2, r1
 800257c:	6139      	str	r1, [r7, #16]
 800257e:	4649      	mov	r1, r9
 8002580:	414b      	adcs	r3, r1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002590:	4659      	mov	r1, fp
 8002592:	00cb      	lsls	r3, r1, #3
 8002594:	4651      	mov	r1, sl
 8002596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259a:	4651      	mov	r1, sl
 800259c:	00ca      	lsls	r2, r1, #3
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	4642      	mov	r2, r8
 80025a6:	189b      	adds	r3, r3, r2
 80025a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025ac:	464b      	mov	r3, r9
 80025ae:	460a      	mov	r2, r1
 80025b0:	eb42 0303 	adc.w	r3, r2, r3
 80025b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80025d0:	4649      	mov	r1, r9
 80025d2:	008b      	lsls	r3, r1, #2
 80025d4:	4641      	mov	r1, r8
 80025d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025da:	4641      	mov	r1, r8
 80025dc:	008a      	lsls	r2, r1, #2
 80025de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80025e2:	f7fd fdfd 	bl	80001e0 <__aeabi_uldivmod>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	4b38      	ldr	r3, [pc, #224]	@ (80026d0 <UART_SetConfig+0x4e4>)
 80025ee:	fba3 2301 	umull	r2, r3, r3, r1
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2264      	movs	r2, #100	@ 0x64
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	1acb      	subs	r3, r1, r3
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	3332      	adds	r3, #50	@ 0x32
 8002600:	4a33      	ldr	r2, [pc, #204]	@ (80026d0 <UART_SetConfig+0x4e4>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800260c:	441c      	add	r4, r3
 800260e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002612:	2200      	movs	r2, #0
 8002614:	673b      	str	r3, [r7, #112]	@ 0x70
 8002616:	677a      	str	r2, [r7, #116]	@ 0x74
 8002618:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800261c:	4642      	mov	r2, r8
 800261e:	464b      	mov	r3, r9
 8002620:	1891      	adds	r1, r2, r2
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	415b      	adcs	r3, r3
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800262c:	4641      	mov	r1, r8
 800262e:	1851      	adds	r1, r2, r1
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	4649      	mov	r1, r9
 8002634:	414b      	adcs	r3, r1
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002644:	4659      	mov	r1, fp
 8002646:	00cb      	lsls	r3, r1, #3
 8002648:	4651      	mov	r1, sl
 800264a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800264e:	4651      	mov	r1, sl
 8002650:	00ca      	lsls	r2, r1, #3
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	4603      	mov	r3, r0
 8002658:	4642      	mov	r2, r8
 800265a:	189b      	adds	r3, r3, r2
 800265c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800265e:	464b      	mov	r3, r9
 8002660:	460a      	mov	r2, r1
 8002662:	eb42 0303 	adc.w	r3, r2, r3
 8002666:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	663b      	str	r3, [r7, #96]	@ 0x60
 8002672:	667a      	str	r2, [r7, #100]	@ 0x64
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002680:	4649      	mov	r1, r9
 8002682:	008b      	lsls	r3, r1, #2
 8002684:	4641      	mov	r1, r8
 8002686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800268a:	4641      	mov	r1, r8
 800268c:	008a      	lsls	r2, r1, #2
 800268e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002692:	f7fd fda5 	bl	80001e0 <__aeabi_uldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4b0d      	ldr	r3, [pc, #52]	@ (80026d0 <UART_SetConfig+0x4e4>)
 800269c:	fba3 1302 	umull	r1, r3, r3, r2
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	2164      	movs	r1, #100	@ 0x64
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	3332      	adds	r3, #50	@ 0x32
 80026ae:	4a08      	ldr	r2, [pc, #32]	@ (80026d0 <UART_SetConfig+0x4e4>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	f003 020f 	and.w	r2, r3, #15
 80026ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4422      	add	r2, r4
 80026c2:	609a      	str	r2, [r3, #8]
}
 80026c4:	bf00      	nop
 80026c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80026ca:	46bd      	mov	sp, r7
 80026cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d0:	51eb851f 	.word	0x51eb851f

080026d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e6:	2b84      	cmp	r3, #132	@ 0x84
 80026e8:	d005      	beq.n	80026f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4413      	add	r3, r2
 80026f2:	3303      	adds	r3, #3
 80026f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002708:	f000 fb8c 	bl	8002e24 <vTaskStartScheduler>
  
  return osOK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	bd80      	pop	{r7, pc}

08002712 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002714:	b089      	sub	sp, #36	@ 0x24
 8002716:	af04      	add	r7, sp, #16
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <osThreadCreate+0x54>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01c      	beq.n	8002766 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685c      	ldr	r4, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691e      	ldr	r6, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ffc8 	bl	80026d4 <makeFreeRtosPriority>
 8002744:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800274e:	9202      	str	r2, [sp, #8]
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	9100      	str	r1, [sp, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4632      	mov	r2, r6
 8002758:	4629      	mov	r1, r5
 800275a:	4620      	mov	r0, r4
 800275c:	f000 f8ed 	bl	800293a <xTaskCreateStatic>
 8002760:	4603      	mov	r3, r0
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e01c      	b.n	80027a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685c      	ldr	r4, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002772:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ffaa 	bl	80026d4 <makeFreeRtosPriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	9200      	str	r2, [sp, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	4632      	mov	r2, r6
 800278e:	4629      	mov	r1, r5
 8002790:	4620      	mov	r0, r4
 8002792:	f000 f932 	bl	80029fa <xTaskCreate>
 8002796:	4603      	mov	r3, r0
 8002798:	2b01      	cmp	r3, #1
 800279a:	d001      	beq.n	80027a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80027a0:	68fb      	ldr	r3, [r7, #12]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <osDelay+0x16>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	e000      	b.n	80027c2 <osDelay+0x18>
 80027c0:	2301      	movs	r3, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 faf8 	bl	8002db8 <vTaskDelay>
  
  return osOK;
 80027c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f103 0208 	add.w	r2, r3, #8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f103 0208 	add.w	r2, r3, #8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f103 0208 	add.w	r2, r3, #8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	601a      	str	r2, [r3, #0]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800288a:	d103      	bne.n	8002894 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	e00c      	b.n	80028ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3308      	adds	r3, #8
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e002      	b.n	80028a2 <vListInsert+0x2e>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d2f6      	bcs.n	800289c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6892      	ldr	r2, [r2, #8]
 80028fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6852      	ldr	r2, [r2, #4]
 8002906:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	429a      	cmp	r2, r3
 8002910:	d103      	bne.n	800291a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800293a:	b580      	push	{r7, lr}
 800293c:	b08e      	sub	sp, #56	@ 0x38
 800293e:	af04      	add	r7, sp, #16
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10b      	bne.n	8002966 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	e7fd      	b.n	8002962 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <xTaskCreateStatic+0x4a>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	61fb      	str	r3, [r7, #28]
}
 800297e:	bf00      	nop
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002984:	23a0      	movs	r3, #160	@ 0xa0
 8002986:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2ba0      	cmp	r3, #160	@ 0xa0
 800298c:	d00b      	beq.n	80029a6 <xTaskCreateStatic+0x6c>
	__asm volatile
 800298e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002992:	f383 8811 	msr	BASEPRI, r3
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	61bb      	str	r3, [r7, #24]
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	e7fd      	b.n	80029a2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80029a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01e      	beq.n	80029ec <xTaskCreateStatic+0xb2>
 80029ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01b      	beq.n	80029ec <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029bc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029c6:	2300      	movs	r3, #0
 80029c8:	9303      	str	r3, [sp, #12]
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f850 	bl	8002a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029e6:	f000 f8ed 	bl	8002bc4 <prvAddNewTaskToReadyList>
 80029ea:	e001      	b.n	80029f0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029f0:	697b      	ldr	r3, [r7, #20]
	}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3728      	adds	r7, #40	@ 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b08c      	sub	sp, #48	@ 0x30
 80029fe:	af04      	add	r7, sp, #16
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 ff92 	bl	8003938 <pvPortMalloc>
 8002a14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00e      	beq.n	8002a3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a1c:	20a0      	movs	r0, #160	@ 0xa0
 8002a1e:	f000 ff8b 	bl	8003938 <pvPortMalloc>
 8002a22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a30:	e005      	b.n	8002a3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f001 f84e 	bl	8003ad4 <vPortFree>
 8002a38:	e001      	b.n	8002a3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d017      	beq.n	8002a74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9303      	str	r3, [sp, #12]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f80e 	bl	8002a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a68:	69f8      	ldr	r0, [r7, #28]
 8002a6a:	f000 f8ab 	bl	8002bc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e002      	b.n	8002a7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f023 0307 	bic.w	r3, r3, #7
 8002aaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	617b      	str	r3, [r7, #20]
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	e7fd      	b.n	8002aca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01f      	beq.n	8002b14 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	e012      	b.n	8002b00 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	7819      	ldrb	r1, [r3, #0]
 8002ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3334      	adds	r3, #52	@ 0x34
 8002aea:	460a      	mov	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	d9e9      	bls.n	8002ada <prvInitialiseNewTask+0x56>
 8002b06:	e000      	b.n	8002b0a <prvInitialiseNewTask+0x86>
			{
				break;
 8002b08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b12:	e003      	b.n	8002b1c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d901      	bls.n	8002b26 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b22:	2306      	movs	r3, #6
 8002b24:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b30:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	2200      	movs	r2, #0
 8002b36:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fe68 	bl	8002812 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	3318      	adds	r3, #24
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fe63 	bl	8002812 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b54:	f1c3 0207 	rsb	r2, r3, #7
 8002b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	2200      	movs	r2, #0
 8002b66:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b74:	334c      	adds	r3, #76	@ 0x4c
 8002b76:	224c      	movs	r2, #76	@ 0x4c
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 f8ca 	bl	8003d14 <memset>
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb8 <prvInitialiseNewTask+0x134>)
 8002b84:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <prvInitialiseNewTask+0x138>)
 8002b8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc0 <prvInitialiseNewTask+0x13c>)
 8002b90:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	69b8      	ldr	r0, [r7, #24]
 8002b98:	f000 fcba 	bl	8003510 <pxPortInitialiseStack>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bae:	bf00      	nop
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20004104 	.word	0x20004104
 8002bbc:	2000416c 	.word	0x2000416c
 8002bc0:	200041d4 	.word	0x200041d4

08002bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bcc:	f000 fdd4 	bl	8003778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c7c <prvAddNewTaskToReadyList+0xb8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	4a29      	ldr	r2, [pc, #164]	@ (8002c7c <prvAddNewTaskToReadyList+0xb8>)
 8002bd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bda:	4b29      	ldr	r3, [pc, #164]	@ (8002c80 <prvAddNewTaskToReadyList+0xbc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002be2:	4a27      	ldr	r2, [pc, #156]	@ (8002c80 <prvAddNewTaskToReadyList+0xbc>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002be8:	4b24      	ldr	r3, [pc, #144]	@ (8002c7c <prvAddNewTaskToReadyList+0xb8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d110      	bne.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bf0:	f000 fb64 	bl	80032bc <prvInitialiseTaskLists>
 8002bf4:	e00d      	b.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bf6:	4b23      	ldr	r3, [pc, #140]	@ (8002c84 <prvAddNewTaskToReadyList+0xc0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bfe:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <prvAddNewTaskToReadyList+0xbc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d802      	bhi.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002c80 <prvAddNewTaskToReadyList+0xbc>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <prvAddNewTaskToReadyList+0xc4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4a1b      	ldr	r2, [pc, #108]	@ (8002c88 <prvAddNewTaskToReadyList+0xc4>)
 8002c1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	2201      	movs	r2, #1
 8002c22:	409a      	lsls	r2, r3
 8002c24:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <prvAddNewTaskToReadyList+0xc8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	4a18      	ldr	r2, [pc, #96]	@ (8002c8c <prvAddNewTaskToReadyList+0xc8>)
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4a15      	ldr	r2, [pc, #84]	@ (8002c90 <prvAddNewTaskToReadyList+0xcc>)
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3304      	adds	r3, #4
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f7ff fdf1 	bl	800282c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c4a:	f000 fdc7 	bl	80037dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <prvAddNewTaskToReadyList+0xc0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00e      	beq.n	8002c74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c56:	4b0a      	ldr	r3, [pc, #40]	@ (8002c80 <prvAddNewTaskToReadyList+0xbc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d207      	bcs.n	8002c74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <prvAddNewTaskToReadyList+0xd0>)
 8002c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200004b0 	.word	0x200004b0
 8002c80:	200003b0 	.word	0x200003b0
 8002c84:	200004bc 	.word	0x200004bc
 8002c88:	200004cc 	.word	0x200004cc
 8002c8c:	200004b8 	.word	0x200004b8
 8002c90:	200003b4 	.word	0x200003b4
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002ca0:	f000 fd6a 	bl	8003778 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <vTaskDelete+0x18>
 8002caa:	4b39      	ldr	r3, [pc, #228]	@ (8002d90 <vTaskDelete+0xf8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	e000      	b.n	8002cb2 <vTaskDelete+0x1a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fe14 	bl	80028e6 <uxListRemove>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d115      	bne.n	8002cf0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc8:	4932      	ldr	r1, [pc, #200]	@ (8002d94 <vTaskDelete+0xfc>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <vTaskDelete+0x58>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cde:	2201      	movs	r2, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <vTaskDelete+0x100>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4013      	ands	r3, r2
 8002cec:	4a2a      	ldr	r2, [pc, #168]	@ (8002d98 <vTaskDelete+0x100>)
 8002cee:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fdf2 	bl	80028e6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002d02:	4b26      	ldr	r3, [pc, #152]	@ (8002d9c <vTaskDelete+0x104>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	4a24      	ldr	r2, [pc, #144]	@ (8002d9c <vTaskDelete+0x104>)
 8002d0a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002d0c:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <vTaskDelete+0xf8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d10b      	bne.n	8002d2e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4820      	ldr	r0, [pc, #128]	@ (8002da0 <vTaskDelete+0x108>)
 8002d1e:	f7ff fd85 	bl	800282c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002d22:	4b20      	ldr	r3, [pc, #128]	@ (8002da4 <vTaskDelete+0x10c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	4a1e      	ldr	r2, [pc, #120]	@ (8002da4 <vTaskDelete+0x10c>)
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	e009      	b.n	8002d42 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <vTaskDelete+0x110>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4a1c      	ldr	r2, [pc, #112]	@ (8002da8 <vTaskDelete+0x110>)
 8002d36:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fb2d 	bl	8003398 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002d3e:	f000 fb61 	bl	8003404 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002d42:	f000 fd4b 	bl	80037dc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002d46:	4b19      	ldr	r3, [pc, #100]	@ (8002dac <vTaskDelete+0x114>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01c      	beq.n	8002d88 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <vTaskDelete+0xf8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d117      	bne.n	8002d88 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002d58:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <vTaskDelete+0x118>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <vTaskDelete+0xe0>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	60bb      	str	r3, [r7, #8]
}
 8002d72:	bf00      	nop
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <vTaskDelete+0x11c>)
 8002d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200003b0 	.word	0x200003b0
 8002d94:	200003b4 	.word	0x200003b4
 8002d98:	200004b8 	.word	0x200004b8
 8002d9c:	200004cc 	.word	0x200004cc
 8002da0:	20000484 	.word	0x20000484
 8002da4:	20000498 	.word	0x20000498
 8002da8:	200004b0 	.word	0x200004b0
 8002dac:	200004bc 	.word	0x200004bc
 8002db0:	200004d8 	.word	0x200004d8
 8002db4:	e000ed04 	.word	0xe000ed04

08002db8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002dca:	4b14      	ldr	r3, [pc, #80]	@ (8002e1c <vTaskDelay+0x64>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <vTaskDelay+0x32>
	__asm volatile
 8002dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	60bb      	str	r3, [r7, #8]
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	e7fd      	b.n	8002de6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002dea:	f000 f885 	bl	8002ef8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002dee:	2100      	movs	r1, #0
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fb27 	bl	8003444 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002df6:	f000 f88d 	bl	8002f14 <xTaskResumeAll>
 8002dfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002e02:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <vTaskDelay+0x68>)
 8002e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200004d8 	.word	0x200004d8
 8002e20:	e000ed04 	.word	0xe000ed04

08002e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	@ 0x28
 8002e28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e32:	463a      	mov	r2, r7
 8002e34:	1d39      	adds	r1, r7, #4
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fb48 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e40:	6839      	ldr	r1, [r7, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	9202      	str	r2, [sp, #8]
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	460a      	mov	r2, r1
 8002e52:	4921      	ldr	r1, [pc, #132]	@ (8002ed8 <vTaskStartScheduler+0xb4>)
 8002e54:	4821      	ldr	r0, [pc, #132]	@ (8002edc <vTaskStartScheduler+0xb8>)
 8002e56:	f7ff fd70 	bl	800293a <xTaskCreateStatic>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ee0 <vTaskStartScheduler+0xbc>)
 8002e5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <vTaskStartScheduler+0xbc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	e001      	b.n	8002e72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d11b      	bne.n	8002eb0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	613b      	str	r3, [r7, #16]
}
 8002e8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <vTaskStartScheduler+0xc0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	334c      	adds	r3, #76	@ 0x4c
 8002e92:	4a15      	ldr	r2, [pc, #84]	@ (8002ee8 <vTaskStartScheduler+0xc4>)
 8002e94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <vTaskStartScheduler+0xc8>)
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <vTaskStartScheduler+0xcc>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ea4:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <vTaskStartScheduler+0xd0>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002eaa:	f000 fbc1 	bl	8003630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002eae:	e00f      	b.n	8002ed0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eb6:	d10b      	bne.n	8002ed0 <vTaskStartScheduler+0xac>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	60fb      	str	r3, [r7, #12]
}
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <vTaskStartScheduler+0xa8>
}
 8002ed0:	bf00      	nop
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	08003f34 	.word	0x08003f34
 8002edc:	0800328d 	.word	0x0800328d
 8002ee0:	200004d4 	.word	0x200004d4
 8002ee4:	200003b0 	.word	0x200003b0
 8002ee8:	20000010 	.word	0x20000010
 8002eec:	200004d0 	.word	0x200004d0
 8002ef0:	200004bc 	.word	0x200004bc
 8002ef4:	200004b4 	.word	0x200004b4

08002ef8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002efc:	4b04      	ldr	r3, [pc, #16]	@ (8002f10 <vTaskSuspendAll+0x18>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	4a03      	ldr	r2, [pc, #12]	@ (8002f10 <vTaskSuspendAll+0x18>)
 8002f04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	200004d8 	.word	0x200004d8

08002f14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f22:	4b42      	ldr	r3, [pc, #264]	@ (800302c <xTaskResumeAll+0x118>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <xTaskResumeAll+0x2e>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	603b      	str	r3, [r7, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	e7fd      	b.n	8002f3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f42:	f000 fc19 	bl	8003778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f46:	4b39      	ldr	r3, [pc, #228]	@ (800302c <xTaskResumeAll+0x118>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	4a37      	ldr	r2, [pc, #220]	@ (800302c <xTaskResumeAll+0x118>)
 8002f4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f50:	4b36      	ldr	r3, [pc, #216]	@ (800302c <xTaskResumeAll+0x118>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d161      	bne.n	800301c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f58:	4b35      	ldr	r3, [pc, #212]	@ (8003030 <xTaskResumeAll+0x11c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d05d      	beq.n	800301c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f60:	e02e      	b.n	8002fc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f62:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <xTaskResumeAll+0x120>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fcb9 	bl	80028e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fcb4 	bl	80028e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f82:	2201      	movs	r2, #1
 8002f84:	409a      	lsls	r2, r3
 8002f86:	4b2c      	ldr	r3, [pc, #176]	@ (8003038 <xTaskResumeAll+0x124>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8003038 <xTaskResumeAll+0x124>)
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4a27      	ldr	r2, [pc, #156]	@ (800303c <xTaskResumeAll+0x128>)
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f7ff fc40 	bl	800282c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb0:	4b23      	ldr	r3, [pc, #140]	@ (8003040 <xTaskResumeAll+0x12c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d302      	bcc.n	8002fc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002fba:	4b22      	ldr	r3, [pc, #136]	@ (8003044 <xTaskResumeAll+0x130>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003034 <xTaskResumeAll+0x120>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1cc      	bne.n	8002f62 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002fce:	f000 fa19 	bl	8003404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <xTaskResumeAll+0x134>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002fde:	f000 f837 	bl	8003050 <xTaskIncrementTick>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002fe8:	4b16      	ldr	r3, [pc, #88]	@ (8003044 <xTaskResumeAll+0x130>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f1      	bne.n	8002fde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002ffa:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <xTaskResumeAll+0x134>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003000:	4b10      	ldr	r3, [pc, #64]	@ (8003044 <xTaskResumeAll+0x130>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003008:	2301      	movs	r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800300c:	4b0f      	ldr	r3, [pc, #60]	@ (800304c <xTaskResumeAll+0x138>)
 800300e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800301c:	f000 fbde 	bl	80037dc <vPortExitCritical>

	return xAlreadyYielded;
 8003020:	68bb      	ldr	r3, [r7, #8]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200004d8 	.word	0x200004d8
 8003030:	200004b0 	.word	0x200004b0
 8003034:	20000470 	.word	0x20000470
 8003038:	200004b8 	.word	0x200004b8
 800303c:	200003b4 	.word	0x200003b4
 8003040:	200003b0 	.word	0x200003b0
 8003044:	200004c4 	.word	0x200004c4
 8003048:	200004c0 	.word	0x200004c0
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800305a:	4b4f      	ldr	r3, [pc, #316]	@ (8003198 <xTaskIncrementTick+0x148>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 808f 	bne.w	8003182 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003064:	4b4d      	ldr	r3, [pc, #308]	@ (800319c <xTaskIncrementTick+0x14c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800306c:	4a4b      	ldr	r2, [pc, #300]	@ (800319c <xTaskIncrementTick+0x14c>)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d121      	bne.n	80030bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003078:	4b49      	ldr	r3, [pc, #292]	@ (80031a0 <xTaskIncrementTick+0x150>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	603b      	str	r3, [r7, #0]
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	e7fd      	b.n	8003096 <xTaskIncrementTick+0x46>
 800309a:	4b41      	ldr	r3, [pc, #260]	@ (80031a0 <xTaskIncrementTick+0x150>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	4b40      	ldr	r3, [pc, #256]	@ (80031a4 <xTaskIncrementTick+0x154>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a3e      	ldr	r2, [pc, #248]	@ (80031a0 <xTaskIncrementTick+0x150>)
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4a3e      	ldr	r2, [pc, #248]	@ (80031a4 <xTaskIncrementTick+0x154>)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b3e      	ldr	r3, [pc, #248]	@ (80031a8 <xTaskIncrementTick+0x158>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
 80030b4:	4a3c      	ldr	r2, [pc, #240]	@ (80031a8 <xTaskIncrementTick+0x158>)
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	f000 f9a4 	bl	8003404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030bc:	4b3b      	ldr	r3, [pc, #236]	@ (80031ac <xTaskIncrementTick+0x15c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d348      	bcc.n	8003158 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030c6:	4b36      	ldr	r3, [pc, #216]	@ (80031a0 <xTaskIncrementTick+0x150>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d0:	4b36      	ldr	r3, [pc, #216]	@ (80031ac <xTaskIncrementTick+0x15c>)
 80030d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030d6:	601a      	str	r2, [r3, #0]
					break;
 80030d8:	e03e      	b.n	8003158 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030da:	4b31      	ldr	r3, [pc, #196]	@ (80031a0 <xTaskIncrementTick+0x150>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d203      	bcs.n	80030fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030f2:	4a2e      	ldr	r2, [pc, #184]	@ (80031ac <xTaskIncrementTick+0x15c>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030f8:	e02e      	b.n	8003158 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3304      	adds	r3, #4
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fbf1 	bl	80028e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3318      	adds	r3, #24
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fbe8 	bl	80028e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311a:	2201      	movs	r2, #1
 800311c:	409a      	lsls	r2, r3
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <xTaskIncrementTick+0x160>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	4a22      	ldr	r2, [pc, #136]	@ (80031b0 <xTaskIncrementTick+0x160>)
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4a1f      	ldr	r2, [pc, #124]	@ (80031b4 <xTaskIncrementTick+0x164>)
 8003136:	441a      	add	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	3304      	adds	r3, #4
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f7ff fb74 	bl	800282c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <xTaskIncrementTick+0x168>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	429a      	cmp	r2, r3
 8003150:	d3b9      	bcc.n	80030c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003152:	2301      	movs	r3, #1
 8003154:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003156:	e7b6      	b.n	80030c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003158:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <xTaskIncrementTick+0x168>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800315e:	4915      	ldr	r1, [pc, #84]	@ (80031b4 <xTaskIncrementTick+0x164>)
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d901      	bls.n	8003174 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003170:	2301      	movs	r3, #1
 8003172:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003174:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <xTaskIncrementTick+0x16c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800317c:	2301      	movs	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	e004      	b.n	800318c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <xTaskIncrementTick+0x170>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	4a0d      	ldr	r2, [pc, #52]	@ (80031c0 <xTaskIncrementTick+0x170>)
 800318a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800318c:	697b      	ldr	r3, [r7, #20]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200004d8 	.word	0x200004d8
 800319c:	200004b4 	.word	0x200004b4
 80031a0:	20000468 	.word	0x20000468
 80031a4:	2000046c 	.word	0x2000046c
 80031a8:	200004c8 	.word	0x200004c8
 80031ac:	200004d0 	.word	0x200004d0
 80031b0:	200004b8 	.word	0x200004b8
 80031b4:	200003b4 	.word	0x200003b4
 80031b8:	200003b0 	.word	0x200003b0
 80031bc:	200004c4 	.word	0x200004c4
 80031c0:	200004c0 	.word	0x200004c0

080031c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003274 <vTaskSwitchContext+0xb0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031d2:	4b29      	ldr	r3, [pc, #164]	@ (8003278 <vTaskSwitchContext+0xb4>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031d8:	e045      	b.n	8003266 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80031da:	4b27      	ldr	r3, [pc, #156]	@ (8003278 <vTaskSwitchContext+0xb4>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e0:	4b26      	ldr	r3, [pc, #152]	@ (800327c <vTaskSwitchContext+0xb8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	f1c3 031f 	rsb	r3, r3, #31
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	4922      	ldr	r1, [pc, #136]	@ (8003280 <vTaskSwitchContext+0xbc>)
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <vTaskSwitchContext+0x5e>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	607b      	str	r3, [r7, #4]
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	e7fd      	b.n	800321e <vTaskSwitchContext+0x5a>
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4a14      	ldr	r2, [pc, #80]	@ (8003280 <vTaskSwitchContext+0xbc>)
 800322e:	4413      	add	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	3308      	adds	r3, #8
 8003244:	429a      	cmp	r2, r3
 8003246:	d104      	bne.n	8003252 <vTaskSwitchContext+0x8e>
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <vTaskSwitchContext+0xc0>)
 800325a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <vTaskSwitchContext+0xc0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	334c      	adds	r3, #76	@ 0x4c
 8003262:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <vTaskSwitchContext+0xc4>)
 8003264:	6013      	str	r3, [r2, #0]
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	200004d8 	.word	0x200004d8
 8003278:	200004c4 	.word	0x200004c4
 800327c:	200004b8 	.word	0x200004b8
 8003280:	200003b4 	.word	0x200003b4
 8003284:	200003b0 	.word	0x200003b0
 8003288:	20000010 	.word	0x20000010

0800328c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003294:	f000 f852 	bl	800333c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <prvIdleTask+0x28>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d9f9      	bls.n	8003294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032a0:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <prvIdleTask+0x2c>)
 80032a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032b0:	e7f0      	b.n	8003294 <prvIdleTask+0x8>
 80032b2:	bf00      	nop
 80032b4:	200003b4 	.word	0x200003b4
 80032b8:	e000ed04 	.word	0xe000ed04

080032bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	e00c      	b.n	80032e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4a12      	ldr	r2, [pc, #72]	@ (800331c <prvInitialiseTaskLists+0x60>)
 80032d4:	4413      	add	r3, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fa7b 	bl	80027d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3301      	adds	r3, #1
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d9ef      	bls.n	80032c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032e8:	480d      	ldr	r0, [pc, #52]	@ (8003320 <prvInitialiseTaskLists+0x64>)
 80032ea:	f7ff fa72 	bl	80027d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032ee:	480d      	ldr	r0, [pc, #52]	@ (8003324 <prvInitialiseTaskLists+0x68>)
 80032f0:	f7ff fa6f 	bl	80027d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032f4:	480c      	ldr	r0, [pc, #48]	@ (8003328 <prvInitialiseTaskLists+0x6c>)
 80032f6:	f7ff fa6c 	bl	80027d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032fa:	480c      	ldr	r0, [pc, #48]	@ (800332c <prvInitialiseTaskLists+0x70>)
 80032fc:	f7ff fa69 	bl	80027d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003300:	480b      	ldr	r0, [pc, #44]	@ (8003330 <prvInitialiseTaskLists+0x74>)
 8003302:	f7ff fa66 	bl	80027d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003306:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <prvInitialiseTaskLists+0x78>)
 8003308:	4a05      	ldr	r2, [pc, #20]	@ (8003320 <prvInitialiseTaskLists+0x64>)
 800330a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800330c:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <prvInitialiseTaskLists+0x7c>)
 800330e:	4a05      	ldr	r2, [pc, #20]	@ (8003324 <prvInitialiseTaskLists+0x68>)
 8003310:	601a      	str	r2, [r3, #0]
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200003b4 	.word	0x200003b4
 8003320:	20000440 	.word	0x20000440
 8003324:	20000454 	.word	0x20000454
 8003328:	20000470 	.word	0x20000470
 800332c:	20000484 	.word	0x20000484
 8003330:	2000049c 	.word	0x2000049c
 8003334:	20000468 	.word	0x20000468
 8003338:	2000046c 	.word	0x2000046c

0800333c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003342:	e019      	b.n	8003378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003344:	f000 fa18 	bl	8003778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003348:	4b10      	ldr	r3, [pc, #64]	@ (800338c <prvCheckTasksWaitingTermination+0x50>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fac6 	bl	80028e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800335a:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <prvCheckTasksWaitingTermination+0x54>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3b01      	subs	r3, #1
 8003360:	4a0b      	ldr	r2, [pc, #44]	@ (8003390 <prvCheckTasksWaitingTermination+0x54>)
 8003362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003364:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <prvCheckTasksWaitingTermination+0x58>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3b01      	subs	r3, #1
 800336a:	4a0a      	ldr	r2, [pc, #40]	@ (8003394 <prvCheckTasksWaitingTermination+0x58>)
 800336c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800336e:	f000 fa35 	bl	80037dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f810 	bl	8003398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003378:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <prvCheckTasksWaitingTermination+0x58>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e1      	bne.n	8003344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000484 	.word	0x20000484
 8003390:	200004b0 	.word	0x200004b0
 8003394:	20000498 	.word	0x20000498

08003398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	334c      	adds	r3, #76	@ 0x4c
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fcbd 	bl	8003d24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d108      	bne.n	80033c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fb8b 	bl	8003ad4 <vPortFree>
				vPortFree( pxTCB );
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fb88 	bl	8003ad4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033c4:	e019      	b.n	80033fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d103      	bne.n	80033d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fb7f 	bl	8003ad4 <vPortFree>
	}
 80033d6:	e010      	b.n	80033fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d00b      	beq.n	80033fa <prvDeleteTCB+0x62>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	60fb      	str	r3, [r7, #12]
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	e7fd      	b.n	80033f6 <prvDeleteTCB+0x5e>
	}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800340a:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <prvResetNextTaskUnblockTime+0x38>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003414:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <prvResetNextTaskUnblockTime+0x3c>)
 8003416:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800341a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800341c:	e008      	b.n	8003430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800341e:	4b07      	ldr	r3, [pc, #28]	@ (800343c <prvResetNextTaskUnblockTime+0x38>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a04      	ldr	r2, [pc, #16]	@ (8003440 <prvResetNextTaskUnblockTime+0x3c>)
 800342e:	6013      	str	r3, [r2, #0]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	20000468 	.word	0x20000468
 8003440:	200004d0 	.word	0x200004d0

08003444 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800344e:	4b29      	ldr	r3, [pc, #164]	@ (80034f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003454:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3304      	adds	r3, #4
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fa43 	bl	80028e6 <uxListRemove>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003466:	4b24      	ldr	r3, [pc, #144]	@ (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	2201      	movs	r2, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	4b21      	ldr	r3, [pc, #132]	@ (80034fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4013      	ands	r3, r2
 800347a:	4a20      	ldr	r2, [pc, #128]	@ (80034fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800347c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003484:	d10a      	bne.n	800349c <prvAddCurrentTaskToDelayedList+0x58>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800348c:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3304      	adds	r3, #4
 8003492:	4619      	mov	r1, r3
 8003494:	481a      	ldr	r0, [pc, #104]	@ (8003500 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003496:	f7ff f9c9 	bl	800282c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800349a:	e026      	b.n	80034ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034a4:	4b14      	ldr	r3, [pc, #80]	@ (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d209      	bcs.n	80034c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034b4:	4b13      	ldr	r3, [pc, #76]	@ (8003504 <prvAddCurrentTaskToDelayedList+0xc0>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3304      	adds	r3, #4
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7ff f9d7 	bl	8002874 <vListInsert>
}
 80034c6:	e010      	b.n	80034ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <prvAddCurrentTaskToDelayedList+0xc4>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3304      	adds	r3, #4
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f7ff f9cd 	bl	8002874 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034da:	4b0c      	ldr	r3, [pc, #48]	@ (800350c <prvAddCurrentTaskToDelayedList+0xc8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d202      	bcs.n	80034ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80034e4:	4a09      	ldr	r2, [pc, #36]	@ (800350c <prvAddCurrentTaskToDelayedList+0xc8>)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	6013      	str	r3, [r2, #0]
}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200004b4 	.word	0x200004b4
 80034f8:	200003b0 	.word	0x200003b0
 80034fc:	200004b8 	.word	0x200004b8
 8003500:	2000049c 	.word	0x2000049c
 8003504:	2000046c 	.word	0x2000046c
 8003508:	20000468 	.word	0x20000468
 800350c:	200004d0 	.word	0x200004d0

08003510 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3b04      	subs	r3, #4
 8003520:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b04      	subs	r3, #4
 800352e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f023 0201 	bic.w	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3b04      	subs	r3, #4
 800353e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003540:	4a0c      	ldr	r2, [pc, #48]	@ (8003574 <pxPortInitialiseStack+0x64>)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3b14      	subs	r3, #20
 800354a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3b04      	subs	r3, #4
 8003556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f06f 0202 	mvn.w	r2, #2
 800355e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3b20      	subs	r3, #32
 8003564:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	08003579 	.word	0x08003579

08003578 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003582:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <prvTaskExitError+0x58>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800358a:	d00b      	beq.n	80035a4 <prvTaskExitError+0x2c>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	60fb      	str	r3, [r7, #12]
}
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <prvTaskExitError+0x28>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	60bb      	str	r3, [r7, #8]
}
 80035b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80035b8:	bf00      	nop
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0fc      	beq.n	80035ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	2000000c 	.word	0x2000000c
	...

080035e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035e0:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <pxCurrentTCBConst2>)
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	6808      	ldr	r0, [r1, #0]
 80035e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ea:	f380 8809 	msr	PSP, r0
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f04f 0000 	mov.w	r0, #0
 80035f6:	f380 8811 	msr	BASEPRI, r0
 80035fa:	4770      	bx	lr
 80035fc:	f3af 8000 	nop.w

08003600 <pxCurrentTCBConst2>:
 8003600:	200003b0 	.word	0x200003b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop

08003608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003608:	4808      	ldr	r0, [pc, #32]	@ (800362c <prvPortStartFirstTask+0x24>)
 800360a:	6800      	ldr	r0, [r0, #0]
 800360c:	6800      	ldr	r0, [r0, #0]
 800360e:	f380 8808 	msr	MSP, r0
 8003612:	f04f 0000 	mov.w	r0, #0
 8003616:	f380 8814 	msr	CONTROL, r0
 800361a:	b662      	cpsie	i
 800361c:	b661      	cpsie	f
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	df00      	svc	0
 8003628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800362a:	bf00      	nop
 800362c:	e000ed08 	.word	0xe000ed08

08003630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003636:	4b47      	ldr	r3, [pc, #284]	@ (8003754 <xPortStartScheduler+0x124>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a47      	ldr	r2, [pc, #284]	@ (8003758 <xPortStartScheduler+0x128>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d10b      	bne.n	8003658 <xPortStartScheduler+0x28>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	613b      	str	r3, [r7, #16]
}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003658:	4b3e      	ldr	r3, [pc, #248]	@ (8003754 <xPortStartScheduler+0x124>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a3f      	ldr	r2, [pc, #252]	@ (800375c <xPortStartScheduler+0x12c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d10b      	bne.n	800367a <xPortStartScheduler+0x4a>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	60fb      	str	r3, [r7, #12]
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	e7fd      	b.n	8003676 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800367a:	4b39      	ldr	r3, [pc, #228]	@ (8003760 <xPortStartScheduler+0x130>)
 800367c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	22ff      	movs	r2, #255	@ 0xff
 800368a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4b31      	ldr	r3, [pc, #196]	@ (8003764 <xPortStartScheduler+0x134>)
 80036a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036a2:	4b31      	ldr	r3, [pc, #196]	@ (8003768 <xPortStartScheduler+0x138>)
 80036a4:	2207      	movs	r2, #7
 80036a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036a8:	e009      	b.n	80036be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80036aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003768 <xPortStartScheduler+0x138>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003768 <xPortStartScheduler+0x138>)
 80036b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b80      	cmp	r3, #128	@ 0x80
 80036c8:	d0ef      	beq.n	80036aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036ca:	4b27      	ldr	r3, [pc, #156]	@ (8003768 <xPortStartScheduler+0x138>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d00b      	beq.n	80036ee <xPortStartScheduler+0xbe>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60bb      	str	r3, [r7, #8]
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	e7fd      	b.n	80036ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003768 <xPortStartScheduler+0x138>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003768 <xPortStartScheduler+0x138>)
 80036f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <xPortStartScheduler+0x138>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003700:	4a19      	ldr	r2, [pc, #100]	@ (8003768 <xPortStartScheduler+0x138>)
 8003702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	b2da      	uxtb	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800370c:	4b17      	ldr	r3, [pc, #92]	@ (800376c <xPortStartScheduler+0x13c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a16      	ldr	r2, [pc, #88]	@ (800376c <xPortStartScheduler+0x13c>)
 8003712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003718:	4b14      	ldr	r3, [pc, #80]	@ (800376c <xPortStartScheduler+0x13c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a13      	ldr	r2, [pc, #76]	@ (800376c <xPortStartScheduler+0x13c>)
 800371e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003724:	f000 f8da 	bl	80038dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <xPortStartScheduler+0x140>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800372e:	f000 f8f9 	bl	8003924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003732:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <xPortStartScheduler+0x144>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a0f      	ldr	r2, [pc, #60]	@ (8003774 <xPortStartScheduler+0x144>)
 8003738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800373c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800373e:	f7ff ff63 	bl	8003608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003742:	f7ff fd3f 	bl	80031c4 <vTaskSwitchContext>
	prvTaskExitError();
 8003746:	f7ff ff17 	bl	8003578 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	e000ed00 	.word	0xe000ed00
 8003758:	410fc271 	.word	0x410fc271
 800375c:	410fc270 	.word	0x410fc270
 8003760:	e000e400 	.word	0xe000e400
 8003764:	200004dc 	.word	0x200004dc
 8003768:	200004e0 	.word	0x200004e0
 800376c:	e000ed20 	.word	0xe000ed20
 8003770:	2000000c 	.word	0x2000000c
 8003774:	e000ef34 	.word	0xe000ef34

08003778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	607b      	str	r3, [r7, #4]
}
 8003790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <vPortEnterCritical+0x5c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	4a0e      	ldr	r2, [pc, #56]	@ (80037d4 <vPortEnterCritical+0x5c>)
 800379a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800379c:	4b0d      	ldr	r3, [pc, #52]	@ (80037d4 <vPortEnterCritical+0x5c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d110      	bne.n	80037c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037a4:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <vPortEnterCritical+0x60>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	603b      	str	r3, [r7, #0]
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	e7fd      	b.n	80037c2 <vPortEnterCritical+0x4a>
	}
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	2000000c 	.word	0x2000000c
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80037e2:	4b12      	ldr	r3, [pc, #72]	@ (800382c <vPortExitCritical+0x50>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10b      	bne.n	8003802 <vPortExitCritical+0x26>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	607b      	str	r3, [r7, #4]
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	e7fd      	b.n	80037fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003802:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <vPortExitCritical+0x50>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3b01      	subs	r3, #1
 8003808:	4a08      	ldr	r2, [pc, #32]	@ (800382c <vPortExitCritical+0x50>)
 800380a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800380c:	4b07      	ldr	r3, [pc, #28]	@ (800382c <vPortExitCritical+0x50>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <vPortExitCritical+0x44>
 8003814:	2300      	movs	r3, #0
 8003816:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800381e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	2000000c 	.word	0x2000000c

08003830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003830:	f3ef 8009 	mrs	r0, PSP
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	4b15      	ldr	r3, [pc, #84]	@ (8003890 <pxCurrentTCBConst>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	f01e 0f10 	tst.w	lr, #16
 8003840:	bf08      	it	eq
 8003842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384a:	6010      	str	r0, [r2, #0]
 800384c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003854:	f380 8811 	msr	BASEPRI, r0
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f7ff fcb0 	bl	80031c4 <vTaskSwitchContext>
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f380 8811 	msr	BASEPRI, r0
 800386c:	bc09      	pop	{r0, r3}
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	6808      	ldr	r0, [r1, #0]
 8003872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003876:	f01e 0f10 	tst.w	lr, #16
 800387a:	bf08      	it	eq
 800387c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003880:	f380 8809 	msr	PSP, r0
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	f3af 8000 	nop.w

08003890 <pxCurrentTCBConst>:
 8003890:	200003b0 	.word	0x200003b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop

08003898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	607b      	str	r3, [r7, #4]
}
 80038b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038b2:	f7ff fbcd 	bl	8003050 <xTaskIncrementTick>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038bc:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <SysTick_Handler+0x40>)
 80038be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	2300      	movs	r3, #0
 80038c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f383 8811 	msr	BASEPRI, r3
}
 80038ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <vPortSetupTimerInterrupt+0x34>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <vPortSetupTimerInterrupt+0x38>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <vPortSetupTimerInterrupt+0x3c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0a      	ldr	r2, [pc, #40]	@ (800391c <vPortSetupTimerInterrupt+0x40>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	4a09      	ldr	r2, [pc, #36]	@ (8003920 <vPortSetupTimerInterrupt+0x44>)
 80038fa:	3b01      	subs	r3, #1
 80038fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038fe:	4b04      	ldr	r3, [pc, #16]	@ (8003910 <vPortSetupTimerInterrupt+0x34>)
 8003900:	2207      	movs	r2, #7
 8003902:	601a      	str	r2, [r3, #0]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000e010 	.word	0xe000e010
 8003914:	e000e018 	.word	0xe000e018
 8003918:	20000000 	.word	0x20000000
 800391c:	10624dd3 	.word	0x10624dd3
 8003920:	e000e014 	.word	0xe000e014

08003924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003934 <vPortEnableVFP+0x10>
 8003928:	6801      	ldr	r1, [r0, #0]
 800392a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800392e:	6001      	str	r1, [r0, #0]
 8003930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003932:	bf00      	nop
 8003934:	e000ed88 	.word	0xe000ed88

08003938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	@ 0x28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003944:	f7ff fad8 	bl	8002ef8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003948:	4b5c      	ldr	r3, [pc, #368]	@ (8003abc <pvPortMalloc+0x184>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003950:	f000 f924 	bl	8003b9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003954:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac0 <pvPortMalloc+0x188>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	f040 8095 	bne.w	8003a8c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01e      	beq.n	80039a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003968:	2208      	movs	r2, #8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	2b00      	cmp	r3, #0
 8003978:	d015      	beq.n	80039a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f023 0307 	bic.w	r3, r3, #7
 8003980:	3308      	adds	r3, #8
 8003982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <pvPortMalloc+0x6e>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	617b      	str	r3, [r7, #20]
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	e7fd      	b.n	80039a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d06f      	beq.n	8003a8c <pvPortMalloc+0x154>
 80039ac:	4b45      	ldr	r3, [pc, #276]	@ (8003ac4 <pvPortMalloc+0x18c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d86a      	bhi.n	8003a8c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80039b6:	4b44      	ldr	r3, [pc, #272]	@ (8003ac8 <pvPortMalloc+0x190>)
 80039b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80039ba:	4b43      	ldr	r3, [pc, #268]	@ (8003ac8 <pvPortMalloc+0x190>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039c0:	e004      	b.n	80039cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d903      	bls.n	80039de <pvPortMalloc+0xa6>
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f1      	bne.n	80039c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039de:	4b37      	ldr	r3, [pc, #220]	@ (8003abc <pvPortMalloc+0x184>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d051      	beq.n	8003a8c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2208      	movs	r2, #8
 80039ee:	4413      	add	r3, r2
 80039f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	1ad2      	subs	r2, r2, r3
 8003a02:	2308      	movs	r3, #8
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d920      	bls.n	8003a4c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <pvPortMalloc+0xfc>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	613b      	str	r3, [r7, #16]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	1ad2      	subs	r2, r2, r3
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a46:	69b8      	ldr	r0, [r7, #24]
 8003a48:	f000 f90a 	bl	8003c60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <pvPortMalloc+0x18c>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac4 <pvPortMalloc+0x18c>)
 8003a58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <pvPortMalloc+0x18c>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <pvPortMalloc+0x194>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d203      	bcs.n	8003a6e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a66:	4b17      	ldr	r3, [pc, #92]	@ (8003ac4 <pvPortMalloc+0x18c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	@ (8003acc <pvPortMalloc+0x194>)
 8003a6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4b13      	ldr	r3, [pc, #76]	@ (8003ac0 <pvPortMalloc+0x188>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a82:	4b13      	ldr	r3, [pc, #76]	@ (8003ad0 <pvPortMalloc+0x198>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	4a11      	ldr	r2, [pc, #68]	@ (8003ad0 <pvPortMalloc+0x198>)
 8003a8a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a8c:	f7ff fa42 	bl	8002f14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <pvPortMalloc+0x17a>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	60fb      	str	r3, [r7, #12]
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	e7fd      	b.n	8003aae <pvPortMalloc+0x176>
	return pvReturn;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3728      	adds	r7, #40	@ 0x28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	200040ec 	.word	0x200040ec
 8003ac0:	20004100 	.word	0x20004100
 8003ac4:	200040f0 	.word	0x200040f0
 8003ac8:	200040e4 	.word	0x200040e4
 8003acc:	200040f4 	.word	0x200040f4
 8003ad0:	200040f8 	.word	0x200040f8

08003ad4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d04f      	beq.n	8003b86 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	425b      	negs	r3, r3
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4413      	add	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4b25      	ldr	r3, [pc, #148]	@ (8003b90 <vPortFree+0xbc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <vPortFree+0x46>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	60fb      	str	r3, [r7, #12]
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	e7fd      	b.n	8003b16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <vPortFree+0x66>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	60bb      	str	r3, [r7, #8]
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	e7fd      	b.n	8003b36 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <vPortFree+0xbc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01e      	beq.n	8003b86 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11a      	bne.n	8003b86 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <vPortFree+0xbc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b60:	f7ff f9ca 	bl	8002ef8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <vPortFree+0xc0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	4a09      	ldr	r2, [pc, #36]	@ (8003b94 <vPortFree+0xc0>)
 8003b70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b72:	6938      	ldr	r0, [r7, #16]
 8003b74:	f000 f874 	bl	8003c60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b78:	4b07      	ldr	r3, [pc, #28]	@ (8003b98 <vPortFree+0xc4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	4a06      	ldr	r2, [pc, #24]	@ (8003b98 <vPortFree+0xc4>)
 8003b80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b82:	f7ff f9c7 	bl	8002f14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20004100 	.word	0x20004100
 8003b94:	200040f0 	.word	0x200040f0
 8003b98:	200040fc 	.word	0x200040fc

08003b9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ba2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003ba6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ba8:	4b27      	ldr	r3, [pc, #156]	@ (8003c48 <prvHeapInit+0xac>)
 8003baa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3307      	adds	r3, #7
 8003bba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0307 	bic.w	r3, r3, #7
 8003bc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	4a1f      	ldr	r2, [pc, #124]	@ (8003c48 <prvHeapInit+0xac>)
 8003bcc:	4413      	add	r3, r2
 8003bce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c4c <prvHeapInit+0xb0>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003bda:	4b1c      	ldr	r3, [pc, #112]	@ (8003c4c <prvHeapInit+0xb0>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	4413      	add	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003be8:	2208      	movs	r2, #8
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0307 	bic.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a15      	ldr	r2, [pc, #84]	@ (8003c50 <prvHeapInit+0xb4>)
 8003bfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bfe:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <prvHeapInit+0xb4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2200      	movs	r2, #0
 8003c04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c06:	4b12      	ldr	r3, [pc, #72]	@ (8003c50 <prvHeapInit+0xb4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	1ad2      	subs	r2, r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <prvHeapInit+0xb4>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a0a      	ldr	r2, [pc, #40]	@ (8003c54 <prvHeapInit+0xb8>)
 8003c2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a09      	ldr	r2, [pc, #36]	@ (8003c58 <prvHeapInit+0xbc>)
 8003c32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c34:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <prvHeapInit+0xc0>)
 8003c36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003c3a:	601a      	str	r2, [r3, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	200004e4 	.word	0x200004e4
 8003c4c:	200040e4 	.word	0x200040e4
 8003c50:	200040ec 	.word	0x200040ec
 8003c54:	200040f4 	.word	0x200040f4
 8003c58:	200040f0 	.word	0x200040f0
 8003c5c:	20004100 	.word	0x20004100

08003c60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c68:	4b28      	ldr	r3, [pc, #160]	@ (8003d0c <prvInsertBlockIntoFreeList+0xac>)
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	e002      	b.n	8003c74 <prvInsertBlockIntoFreeList+0x14>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d8f7      	bhi.n	8003c6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4413      	add	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d108      	bne.n	8003ca2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	441a      	add	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	441a      	add	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d118      	bne.n	8003ce8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <prvInsertBlockIntoFreeList+0xb0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d00d      	beq.n	8003cde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	441a      	add	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e008      	b.n	8003cf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cde:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <prvInsertBlockIntoFreeList+0xb0>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e003      	b.n	8003cf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d002      	beq.n	8003cfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	200040e4 	.word	0x200040e4
 8003d10:	200040ec 	.word	0x200040ec

08003d14 <memset>:
 8003d14:	4402      	add	r2, r0
 8003d16:	4603      	mov	r3, r0
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d100      	bne.n	8003d1e <memset+0xa>
 8003d1c:	4770      	bx	lr
 8003d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d22:	e7f9      	b.n	8003d18 <memset+0x4>

08003d24 <_reclaim_reent>:
 8003d24:	4b29      	ldr	r3, [pc, #164]	@ (8003dcc <_reclaim_reent+0xa8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4283      	cmp	r3, r0
 8003d2a:	b570      	push	{r4, r5, r6, lr}
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	d04b      	beq.n	8003dc8 <_reclaim_reent+0xa4>
 8003d30:	69c3      	ldr	r3, [r0, #28]
 8003d32:	b1ab      	cbz	r3, 8003d60 <_reclaim_reent+0x3c>
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	b16b      	cbz	r3, 8003d54 <_reclaim_reent+0x30>
 8003d38:	2500      	movs	r5, #0
 8003d3a:	69e3      	ldr	r3, [r4, #28]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	5959      	ldr	r1, [r3, r5]
 8003d40:	2900      	cmp	r1, #0
 8003d42:	d13b      	bne.n	8003dbc <_reclaim_reent+0x98>
 8003d44:	3504      	adds	r5, #4
 8003d46:	2d80      	cmp	r5, #128	@ 0x80
 8003d48:	d1f7      	bne.n	8003d3a <_reclaim_reent+0x16>
 8003d4a:	69e3      	ldr	r3, [r4, #28]
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	68d9      	ldr	r1, [r3, #12]
 8003d50:	f000 f864 	bl	8003e1c <_free_r>
 8003d54:	69e3      	ldr	r3, [r4, #28]
 8003d56:	6819      	ldr	r1, [r3, #0]
 8003d58:	b111      	cbz	r1, 8003d60 <_reclaim_reent+0x3c>
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f000 f85e 	bl	8003e1c <_free_r>
 8003d60:	6961      	ldr	r1, [r4, #20]
 8003d62:	b111      	cbz	r1, 8003d6a <_reclaim_reent+0x46>
 8003d64:	4620      	mov	r0, r4
 8003d66:	f000 f859 	bl	8003e1c <_free_r>
 8003d6a:	69e1      	ldr	r1, [r4, #28]
 8003d6c:	b111      	cbz	r1, 8003d74 <_reclaim_reent+0x50>
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f000 f854 	bl	8003e1c <_free_r>
 8003d74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003d76:	b111      	cbz	r1, 8003d7e <_reclaim_reent+0x5a>
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f000 f84f 	bl	8003e1c <_free_r>
 8003d7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d80:	b111      	cbz	r1, 8003d88 <_reclaim_reent+0x64>
 8003d82:	4620      	mov	r0, r4
 8003d84:	f000 f84a 	bl	8003e1c <_free_r>
 8003d88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003d8a:	b111      	cbz	r1, 8003d92 <_reclaim_reent+0x6e>
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f000 f845 	bl	8003e1c <_free_r>
 8003d92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003d94:	b111      	cbz	r1, 8003d9c <_reclaim_reent+0x78>
 8003d96:	4620      	mov	r0, r4
 8003d98:	f000 f840 	bl	8003e1c <_free_r>
 8003d9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003d9e:	b111      	cbz	r1, 8003da6 <_reclaim_reent+0x82>
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 f83b 	bl	8003e1c <_free_r>
 8003da6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003da8:	b111      	cbz	r1, 8003db0 <_reclaim_reent+0x8c>
 8003daa:	4620      	mov	r0, r4
 8003dac:	f000 f836 	bl	8003e1c <_free_r>
 8003db0:	6a23      	ldr	r3, [r4, #32]
 8003db2:	b14b      	cbz	r3, 8003dc8 <_reclaim_reent+0xa4>
 8003db4:	4620      	mov	r0, r4
 8003db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003dba:	4718      	bx	r3
 8003dbc:	680e      	ldr	r6, [r1, #0]
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f000 f82c 	bl	8003e1c <_free_r>
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	e7bb      	b.n	8003d40 <_reclaim_reent+0x1c>
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000010 	.word	0x20000010

08003dd0 <__libc_init_array>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8003e08 <__libc_init_array+0x38>)
 8003dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8003e0c <__libc_init_array+0x3c>)
 8003dd6:	1b64      	subs	r4, r4, r5
 8003dd8:	10a4      	asrs	r4, r4, #2
 8003dda:	2600      	movs	r6, #0
 8003ddc:	42a6      	cmp	r6, r4
 8003dde:	d109      	bne.n	8003df4 <__libc_init_array+0x24>
 8003de0:	4d0b      	ldr	r5, [pc, #44]	@ (8003e10 <__libc_init_array+0x40>)
 8003de2:	4c0c      	ldr	r4, [pc, #48]	@ (8003e14 <__libc_init_array+0x44>)
 8003de4:	f000 f870 	bl	8003ec8 <_init>
 8003de8:	1b64      	subs	r4, r4, r5
 8003dea:	10a4      	asrs	r4, r4, #2
 8003dec:	2600      	movs	r6, #0
 8003dee:	42a6      	cmp	r6, r4
 8003df0:	d105      	bne.n	8003dfe <__libc_init_array+0x2e>
 8003df2:	bd70      	pop	{r4, r5, r6, pc}
 8003df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df8:	4798      	blx	r3
 8003dfa:	3601      	adds	r6, #1
 8003dfc:	e7ee      	b.n	8003ddc <__libc_init_array+0xc>
 8003dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e02:	4798      	blx	r3
 8003e04:	3601      	adds	r6, #1
 8003e06:	e7f2      	b.n	8003dee <__libc_init_array+0x1e>
 8003e08:	08003f5c 	.word	0x08003f5c
 8003e0c:	08003f5c 	.word	0x08003f5c
 8003e10:	08003f5c 	.word	0x08003f5c
 8003e14:	08003f60 	.word	0x08003f60

08003e18 <__retarget_lock_acquire_recursive>:
 8003e18:	4770      	bx	lr

08003e1a <__retarget_lock_release_recursive>:
 8003e1a:	4770      	bx	lr

08003e1c <_free_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4605      	mov	r5, r0
 8003e20:	2900      	cmp	r1, #0
 8003e22:	d041      	beq.n	8003ea8 <_free_r+0x8c>
 8003e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e28:	1f0c      	subs	r4, r1, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bfb8      	it	lt
 8003e2e:	18e4      	addlt	r4, r4, r3
 8003e30:	f000 f83e 	bl	8003eb0 <__malloc_lock>
 8003e34:	4a1d      	ldr	r2, [pc, #116]	@ (8003eac <_free_r+0x90>)
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	b933      	cbnz	r3, 8003e48 <_free_r+0x2c>
 8003e3a:	6063      	str	r3, [r4, #4]
 8003e3c:	6014      	str	r4, [r2, #0]
 8003e3e:	4628      	mov	r0, r5
 8003e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e44:	f000 b83a 	b.w	8003ebc <__malloc_unlock>
 8003e48:	42a3      	cmp	r3, r4
 8003e4a:	d908      	bls.n	8003e5e <_free_r+0x42>
 8003e4c:	6820      	ldr	r0, [r4, #0]
 8003e4e:	1821      	adds	r1, r4, r0
 8003e50:	428b      	cmp	r3, r1
 8003e52:	bf01      	itttt	eq
 8003e54:	6819      	ldreq	r1, [r3, #0]
 8003e56:	685b      	ldreq	r3, [r3, #4]
 8003e58:	1809      	addeq	r1, r1, r0
 8003e5a:	6021      	streq	r1, [r4, #0]
 8003e5c:	e7ed      	b.n	8003e3a <_free_r+0x1e>
 8003e5e:	461a      	mov	r2, r3
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b10b      	cbz	r3, 8003e68 <_free_r+0x4c>
 8003e64:	42a3      	cmp	r3, r4
 8003e66:	d9fa      	bls.n	8003e5e <_free_r+0x42>
 8003e68:	6811      	ldr	r1, [r2, #0]
 8003e6a:	1850      	adds	r0, r2, r1
 8003e6c:	42a0      	cmp	r0, r4
 8003e6e:	d10b      	bne.n	8003e88 <_free_r+0x6c>
 8003e70:	6820      	ldr	r0, [r4, #0]
 8003e72:	4401      	add	r1, r0
 8003e74:	1850      	adds	r0, r2, r1
 8003e76:	4283      	cmp	r3, r0
 8003e78:	6011      	str	r1, [r2, #0]
 8003e7a:	d1e0      	bne.n	8003e3e <_free_r+0x22>
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	6053      	str	r3, [r2, #4]
 8003e82:	4408      	add	r0, r1
 8003e84:	6010      	str	r0, [r2, #0]
 8003e86:	e7da      	b.n	8003e3e <_free_r+0x22>
 8003e88:	d902      	bls.n	8003e90 <_free_r+0x74>
 8003e8a:	230c      	movs	r3, #12
 8003e8c:	602b      	str	r3, [r5, #0]
 8003e8e:	e7d6      	b.n	8003e3e <_free_r+0x22>
 8003e90:	6820      	ldr	r0, [r4, #0]
 8003e92:	1821      	adds	r1, r4, r0
 8003e94:	428b      	cmp	r3, r1
 8003e96:	bf04      	itt	eq
 8003e98:	6819      	ldreq	r1, [r3, #0]
 8003e9a:	685b      	ldreq	r3, [r3, #4]
 8003e9c:	6063      	str	r3, [r4, #4]
 8003e9e:	bf04      	itt	eq
 8003ea0:	1809      	addeq	r1, r1, r0
 8003ea2:	6021      	streq	r1, [r4, #0]
 8003ea4:	6054      	str	r4, [r2, #4]
 8003ea6:	e7ca      	b.n	8003e3e <_free_r+0x22>
 8003ea8:	bd38      	pop	{r3, r4, r5, pc}
 8003eaa:	bf00      	nop
 8003eac:	20004240 	.word	0x20004240

08003eb0 <__malloc_lock>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	@ (8003eb8 <__malloc_lock+0x8>)
 8003eb2:	f7ff bfb1 	b.w	8003e18 <__retarget_lock_acquire_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	2000423c 	.word	0x2000423c

08003ebc <__malloc_unlock>:
 8003ebc:	4801      	ldr	r0, [pc, #4]	@ (8003ec4 <__malloc_unlock+0x8>)
 8003ebe:	f7ff bfac 	b.w	8003e1a <__retarget_lock_release_recursive>
 8003ec2:	bf00      	nop
 8003ec4:	2000423c 	.word	0x2000423c

08003ec8 <_init>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr

08003ed4 <_fini>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	bf00      	nop
 8003ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eda:	bc08      	pop	{r3}
 8003edc:	469e      	mov	lr, r3
 8003ede:	4770      	bx	lr
