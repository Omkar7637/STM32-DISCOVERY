
Queue1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f0  080053f0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000063f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f4  080053f4  000063f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080053f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          000041f4  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004254  20004254  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014597  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec5  00000000  00000000  0001b627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  0001e4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d95  00000000  00000000  0001f668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e35  00000000  00000000  000203fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135f2  00000000  00000000  00043232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d1c  00000000  00000000  00056824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a540  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dcc  00000000  00000000  0012a584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0012f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005320 	.word	0x08005320

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005320 	.word	0x08005320

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	2000011c 	.word	0x2000011c

080005a4 <vQueueSenderTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vQueueSenderTask(void *pvParam)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	char msg[20];

	sprintf(msg, "Message %d\r\n", 1);
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2201      	movs	r2, #1
 80005b2:	4925      	ldr	r1, [pc, #148]	@ (8000648 <vQueueSenderTask+0xa4>)
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 f9bd 	bl	8004934 <siprintf>
	xQueueSendToBack(xQueue, msg, portMAX_DELAY);
 80005ba:	4b24      	ldr	r3, [pc, #144]	@ (800064c <vQueueSenderTask+0xa8>)
 80005bc:	6818      	ldr	r0, [r3, #0]
 80005be:	f107 0108 	add.w	r1, r7, #8
 80005c2:	2300      	movs	r3, #0
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005c8:	f002 fb00 	bl	8002bcc <xQueueGenericSend>

	sprintf(msg, "Message %d\r\n", 2);
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2202      	movs	r2, #2
 80005d2:	491d      	ldr	r1, [pc, #116]	@ (8000648 <vQueueSenderTask+0xa4>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f004 f9ad 	bl	8004934 <siprintf>
	xQueueSendToBack(xQueue, msg, portMAX_DELAY);
 80005da:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <vQueueSenderTask+0xa8>)
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	f107 0108 	add.w	r1, r7, #8
 80005e2:	2300      	movs	r3, #0
 80005e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005e8:	f002 faf0 	bl	8002bcc <xQueueGenericSend>

	sprintf(msg, "Message %d\r\n", 3);
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2203      	movs	r2, #3
 80005f2:	4915      	ldr	r1, [pc, #84]	@ (8000648 <vQueueSenderTask+0xa4>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 f99d 	bl	8004934 <siprintf>
	xQueueSendToBack(xQueue, msg, portMAX_DELAY);
 80005fa:	4b14      	ldr	r3, [pc, #80]	@ (800064c <vQueueSenderTask+0xa8>)
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	f107 0108 	add.w	r1, r7, #8
 8000602:	2300      	movs	r3, #0
 8000604:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000608:	f002 fae0 	bl	8002bcc <xQueueGenericSend>

	portBASE_TYPE count = uxQueueMessagesWaiting(xQueue);
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <vQueueSenderTask+0xa8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fcbf 	bl	8002f94 <uxQueueMessagesWaiting>
 8000616:	4603      	mov	r3, r0
 8000618:	61fb      	str	r3, [r7, #28]
	sprintf(msg, "count =  %ld\r\n", count);
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	69fa      	ldr	r2, [r7, #28]
 8000620:	490b      	ldr	r1, [pc, #44]	@ (8000650 <vQueueSenderTask+0xac>)
 8000622:	4618      	mov	r0, r3
 8000624:	f004 f986 	bl	8004934 <siprintf>
	xQueueSendToBack(xQueue, msg, portMAX_DELAY);
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <vQueueSenderTask+0xa8>)
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	f107 0108 	add.w	r1, r7, #8
 8000630:	2300      	movs	r3, #0
 8000632:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000636:	f002 fac9 	bl	8002bcc <xQueueGenericSend>

	//while(1);
	vTaskDelete(NULL);
 800063a:	2000      	movs	r0, #0
 800063c:	f002 ff88 	bl	8003550 <vTaskDelete>
}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	08005338 	.word	0x08005338
 800064c:	20000364 	.word	0x20000364
 8000650:	08005348 	.word	0x08005348

08000654 <vQueueReceiverTask>:

void vQueueReceiverTask(void *pvParam)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	char buf[20];

	while((xQueueReceive(xQueue, buf, portMAX_DELAY)) == pdPASS)
 800065c:	e00d      	b.n	800067a <vQueueReceiverTask+0x26>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fdb4 	bl	80001d0 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	f107 010c 	add.w	r1, r7, #12
 8000670:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000674:	4808      	ldr	r0, [pc, #32]	@ (8000698 <vQueueReceiverTask+0x44>)
 8000676:	f001 fd3c 	bl	80020f2 <HAL_UART_Transmit>
	while((xQueueReceive(xQueue, buf, portMAX_DELAY)) == pdPASS)
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <vQueueReceiverTask+0x48>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f107 010c 	add.w	r1, r7, #12
 8000682:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fba2 	bl	8002dd0 <xQueueReceive>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d0e5      	beq.n	800065e <vQueueReceiverTask+0xa>
	}
	while(1);
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <vQueueReceiverTask+0x3e>
 8000696:	bf00      	nop
 8000698:	2000031c 	.word	0x2000031c
 800069c:	20000364 	.word	0x20000364

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f000 fa9f 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f84f 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 f8e1 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b2:	f000 f8b5 	bl	8000820 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  xQueue = xQueueCreate(5, 20);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2114      	movs	r1, #20
 80006ba:	2005      	movs	r0, #5
 80006bc:	f002 fa2c 	bl	8002b18 <xQueueGenericCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000730 <main+0x90>)
 80006c4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <main+0x94>)
 80006c8:	463c      	mov	r4, r7
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006d8:	463b      	mov	r3, r7
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f89c 	bl	800281a <osThreadCreate>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <main+0x98>)
 80006e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xRet = xTaskCreate(vQueueSenderTask, "Sender", 128, NULL, 4, NULL);
 80006e8:	2300      	movs	r3, #0
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	2304      	movs	r3, #4
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2300      	movs	r3, #0
 80006f2:	2280      	movs	r2, #128	@ 0x80
 80006f4:	4911      	ldr	r1, [pc, #68]	@ (800073c <main+0x9c>)
 80006f6:	4812      	ldr	r0, [pc, #72]	@ (8000740 <main+0xa0>)
 80006f8:	f002 fddb 	bl	80032b2 <xTaskCreate>
 80006fc:	61f8      	str	r0, [r7, #28]
  if(xRet != pdTRUE)
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d001      	beq.n	8000708 <main+0x68>
	  Error_Handler();
 8000704:	f000 f8ea 	bl	80008dc <Error_Handler>

  xRet = xTaskCreate(vQueueReceiverTask, "Receiver", 128, NULL, 3, NULL);
 8000708:	2300      	movs	r3, #0
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	2303      	movs	r3, #3
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2300      	movs	r3, #0
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	490b      	ldr	r1, [pc, #44]	@ (8000744 <main+0xa4>)
 8000716:	480c      	ldr	r0, [pc, #48]	@ (8000748 <main+0xa8>)
 8000718:	f002 fdcb 	bl	80032b2 <xTaskCreate>
 800071c:	61f8      	str	r0, [r7, #28]
  if(xRet != pdTRUE)
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d001      	beq.n	8000728 <main+0x88>
  	  Error_Handler();
 8000724:	f000 f8da 	bl	80008dc <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000728:	f002 f870 	bl	800280c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <main+0x8c>
 8000730:	20000364 	.word	0x20000364
 8000734:	08005378 	.word	0x08005378
 8000738:	20000360 	.word	0x20000360
 800073c:	08005358 	.word	0x08005358
 8000740:	080005a5 	.word	0x080005a5
 8000744:	08005360 	.word	0x08005360
 8000748:	08000655 	.word	0x08000655

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2230      	movs	r2, #48	@ 0x30
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f004 f90a 	bl	8004974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a27      	ldr	r2, [pc, #156]	@ (8000818 <SystemClock_Config+0xcc>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b22      	ldr	r3, [pc, #136]	@ (800081c <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a21      	ldr	r2, [pc, #132]	@ (800081c <SystemClock_Config+0xd0>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007bc:	2308      	movs	r3, #8
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007c0:	2332      	movs	r3, #50	@ 0x32
 80007c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c8:	2307      	movs	r3, #7
 80007ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fcc9 	bl	8001168 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007dc:	f000 f87e 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 ff2a 	bl	8001658 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800080a:	f000 f867 	bl	80008dc <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	@ 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f001 fbfe 	bl	8002058 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f83b 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000031c 	.word	0x2000031c
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_GPIO_Init+0x30>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <MX_GPIO_Init+0x30>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_GPIO_Init+0x30>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f001 fffe 	bl	80028b2 <osDelay>
 80008b6:	e7fb      	b.n	80008b0 <StartDefaultTask+0x8>

080008b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d101      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ca:	f000 f9af 	bl	8000c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40010000 	.word	0x40010000

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <HAL_MspInit+0x54>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	4a11      	ldr	r2, [pc, #68]	@ (800093c <HAL_MspInit+0x54>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <HAL_MspInit+0x54>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <HAL_MspInit+0x54>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <HAL_MspInit+0x54>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	@ 0x40
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <HAL_MspInit+0x54>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	210f      	movs	r1, #15
 800092a:	f06f 0001 	mvn.w	r0, #1
 800092e:	f000 fa55 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a19      	ldr	r2, [pc, #100]	@ (80009c4 <HAL_UART_MspInit+0x84>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d12b      	bne.n	80009ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a17      	ldr	r2, [pc, #92]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a10      	ldr	r2, [pc, #64]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800099a:	230c      	movs	r3, #12
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009aa:	2307      	movs	r3, #7
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <HAL_UART_MspInit+0x8c>)
 80009b6:	f000 fa3b 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	@ 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	@ 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa4 <HAL_InitTick+0xd4>)
 80009e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e8:	4a2e      	ldr	r2, [pc, #184]	@ (8000aa4 <HAL_InitTick+0xd4>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f0:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa4 <HAL_InitTick+0xd4>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009fc:	f107 020c 	add.w	r2, r7, #12
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 f846 	bl	8001a98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a0c:	f001 f830 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8000a10:	4603      	mov	r3, r0
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a18:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <HAL_InitTick+0xd8>)
 8000a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1e:	0c9b      	lsrs	r3, r3, #18
 8000a20:	3b01      	subs	r3, #1
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a24:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <HAL_InitTick+0xdc>)
 8000a26:	4a22      	ldr	r2, [pc, #136]	@ (8000ab0 <HAL_InitTick+0xe0>)
 8000a28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <HAL_InitTick+0xdc>)
 8000a2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a32:	4a1e      	ldr	r2, [pc, #120]	@ (8000aac <HAL_InitTick+0xdc>)
 8000a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <HAL_InitTick+0xdc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <HAL_InitTick+0xdc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <HAL_InitTick+0xdc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a4a:	4818      	ldr	r0, [pc, #96]	@ (8000aac <HAL_InitTick+0xdc>)
 8000a4c:	f001 f856 	bl	8001afc <HAL_TIM_Base_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d11b      	bne.n	8000a96 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a5e:	4813      	ldr	r0, [pc, #76]	@ (8000aac <HAL_InitTick+0xdc>)
 8000a60:	f001 f8a6 	bl	8001bb0 <HAL_TIM_Base_Start_IT>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d111      	bne.n	8000a96 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a72:	2019      	movs	r0, #25
 8000a74:	f000 f9ce 	bl	8000e14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	d808      	bhi.n	8000a90 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	6879      	ldr	r1, [r7, #4]
 8000a82:	2019      	movs	r0, #25
 8000a84:	f000 f9aa 	bl	8000ddc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <HAL_InitTick+0xe4>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	e002      	b.n	8000a96 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3730      	adds	r7, #48	@ 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	431bde83 	.word	0x431bde83
 8000aac:	20000368 	.word	0x20000368
 8000ab0:	40010000 	.word	0x40010000
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <NMI_Handler+0x4>

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <UsageFault_Handler+0x4>

08000ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000af6:	f001 f8cb 	bl	8001c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000368 	.word	0x20000368

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	@ (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f003 ff7c 	bl	8004a30 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20020000 	.word	0x20020000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	200003b0 	.word	0x200003b0
 8000b6c:	20004258 	.word	0x20004258

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9a:	490e      	ldr	r1, [pc, #56]	@ (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb0:	4c0b      	ldr	r4, [pc, #44]	@ (8000be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bbe:	f7ff ffd7 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f003 ff3b 	bl	8004a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc6:	f7ff fd6b 	bl	80006a0 <main>
  bx  lr    
 8000bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bd8:	080053f8 	.word	0x080053f8
  ldr r2, =_sbss
 8000bdc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000be0:	20004254 	.word	0x20004254

08000be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <HAL_Init+0x40>)
 8000bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <HAL_Init+0x40>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	@ (8000c28 <HAL_Init+0x40>)
 8000c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f8d8 	bl	8000dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f7ff feda 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fe64 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023c00 	.word	0x40023c00

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200003b4 	.word	0x200003b4

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200003b4 	.word	0x200003b4

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	@ (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	@ (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	@ (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	@ 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff4c 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dee:	f7ff ff61 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	6978      	ldr	r0, [r7, #20]
 8000dfa:	f7ff ffb1 	bl	8000d60 <NVIC_EncodePriority>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff80 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff54 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	@ 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e16b      	b.n	8001124 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 815a 	bne.w	800111e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d017      	beq.n	8000f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80b4 	beq.w	800111e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b60      	ldr	r3, [pc, #384]	@ (800113c <HAL_GPIO_Init+0x30c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	4a5f      	ldr	r2, [pc, #380]	@ (800113c <HAL_GPIO_Init+0x30c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800113c <HAL_GPIO_Init+0x30c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8001140 <HAL_GPIO_Init+0x310>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	@ (8001144 <HAL_GPIO_Init+0x314>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a51      	ldr	r2, [pc, #324]	@ (8001148 <HAL_GPIO_Init+0x318>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a50      	ldr	r2, [pc, #320]	@ (800114c <HAL_GPIO_Init+0x31c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	@ (8001150 <HAL_GPIO_Init+0x320>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4e      	ldr	r2, [pc, #312]	@ (8001154 <HAL_GPIO_Init+0x324>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4d      	ldr	r2, [pc, #308]	@ (8001158 <HAL_GPIO_Init+0x328>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4c      	ldr	r2, [pc, #304]	@ (800115c <HAL_GPIO_Init+0x32c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4b      	ldr	r2, [pc, #300]	@ (8001160 <HAL_GPIO_Init+0x330>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x20a>
 8001036:	2307      	movs	r3, #7
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103a:	2308      	movs	r3, #8
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	@ (8001140 <HAL_GPIO_Init+0x310>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001076:	4b3b      	ldr	r3, [pc, #236]	@ (8001164 <HAL_GPIO_Init+0x334>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109a:	4a32      	ldr	r2, [pc, #200]	@ (8001164 <HAL_GPIO_Init+0x334>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a0:	4b30      	ldr	r3, [pc, #192]	@ (8001164 <HAL_GPIO_Init+0x334>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c4:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <HAL_GPIO_Init+0x334>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ca:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <HAL_GPIO_Init+0x334>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001164 <HAL_GPIO_Init+0x334>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <HAL_GPIO_Init+0x334>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001118:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <HAL_GPIO_Init+0x334>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae90 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40021800 	.word	0x40021800
 8001160:	40021c00 	.word	0x40021c00
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e267      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d075      	beq.n	8001272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001186:	4b88      	ldr	r3, [pc, #544]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b04      	cmp	r3, #4
 8001190:	d00c      	beq.n	80011ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001192:	4b85      	ldr	r3, [pc, #532]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119a:	2b08      	cmp	r3, #8
 800119c:	d112      	bne.n	80011c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119e:	4b82      	ldr	r3, [pc, #520]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011aa:	d10b      	bne.n	80011c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	4b7e      	ldr	r3, [pc, #504]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d05b      	beq.n	8001270 <HAL_RCC_OscConfig+0x108>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d157      	bne.n	8001270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e242      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011cc:	d106      	bne.n	80011dc <HAL_RCC_OscConfig+0x74>
 80011ce:	4b76      	ldr	r3, [pc, #472]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a75      	ldr	r2, [pc, #468]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e01d      	b.n	8001218 <HAL_RCC_OscConfig+0xb0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x98>
 80011e6:	4b70      	ldr	r3, [pc, #448]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6f      	ldr	r2, [pc, #444]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b6d      	ldr	r3, [pc, #436]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a6c      	ldr	r2, [pc, #432]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0xb0>
 8001200:	4b69      	ldr	r3, [pc, #420]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a68      	ldr	r2, [pc, #416]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b66      	ldr	r3, [pc, #408]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a65      	ldr	r2, [pc, #404]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d013      	beq.n	8001248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fd18 	bl	8000c54 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fd14 	bl	8000c54 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	@ 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e207      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	4b5b      	ldr	r3, [pc, #364]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0xc0>
 8001246:	e014      	b.n	8001272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fd04 	bl	8000c54 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fd00 	bl	8000c54 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	@ 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e1f3      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	4b51      	ldr	r3, [pc, #324]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0xe8>
 800126e:	e000      	b.n	8001272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d063      	beq.n	8001346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127e:	4b4a      	ldr	r3, [pc, #296]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128a:	4b47      	ldr	r3, [pc, #284]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001292:	2b08      	cmp	r3, #8
 8001294:	d11c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001296:	4b44      	ldr	r3, [pc, #272]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d116      	bne.n	80012d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a2:	4b41      	ldr	r3, [pc, #260]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <HAL_RCC_OscConfig+0x152>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d001      	beq.n	80012ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e1c7      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	4b3b      	ldr	r3, [pc, #236]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4937      	ldr	r1, [pc, #220]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	e03a      	b.n	8001346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d020      	beq.n	800131a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d8:	4b34      	ldr	r3, [pc, #208]	@ (80013ac <HAL_RCC_OscConfig+0x244>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	f7ff fcb9 	bl	8000c54 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff fcb5 	bl	8000c54 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e1a8      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4925      	ldr	r1, [pc, #148]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131a:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <HAL_RCC_OscConfig+0x244>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fc98 	bl	8000c54 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001328:	f7ff fc94 	bl	8000c54 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e187      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d036      	beq.n	80013c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d016      	beq.n	8001388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <HAL_RCC_OscConfig+0x248>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001360:	f7ff fc78 	bl	8000c54 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff fc74 	bl	8000c54 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e167      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_RCC_OscConfig+0x240>)
 800137c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x200>
 8001386:	e01b      	b.n	80013c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <HAL_RCC_OscConfig+0x248>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fc61 	bl	8000c54 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	e00e      	b.n	80013b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001396:	f7ff fc5d 	bl	8000c54 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d907      	bls.n	80013b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e150      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
 80013a8:	40023800 	.word	0x40023800
 80013ac:	42470000 	.word	0x42470000
 80013b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b4:	4b88      	ldr	r3, [pc, #544]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1ea      	bne.n	8001396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 8097 	beq.w	80014fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d2:	4b81      	ldr	r3, [pc, #516]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10f      	bne.n	80013fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	4b7d      	ldr	r3, [pc, #500]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	4a7c      	ldr	r2, [pc, #496]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ee:	4b7a      	ldr	r3, [pc, #488]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fe:	4b77      	ldr	r3, [pc, #476]	@ (80015dc <HAL_RCC_OscConfig+0x474>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001406:	2b00      	cmp	r3, #0
 8001408:	d118      	bne.n	800143c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140a:	4b74      	ldr	r3, [pc, #464]	@ (80015dc <HAL_RCC_OscConfig+0x474>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a73      	ldr	r2, [pc, #460]	@ (80015dc <HAL_RCC_OscConfig+0x474>)
 8001410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001416:	f7ff fc1d 	bl	8000c54 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141e:	f7ff fc19 	bl	8000c54 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e10c      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001430:	4b6a      	ldr	r3, [pc, #424]	@ (80015dc <HAL_RCC_OscConfig+0x474>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d106      	bne.n	8001452 <HAL_RCC_OscConfig+0x2ea>
 8001444:	4b64      	ldr	r3, [pc, #400]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001448:	4a63      	ldr	r2, [pc, #396]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001450:	e01c      	b.n	800148c <HAL_RCC_OscConfig+0x324>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b05      	cmp	r3, #5
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x30c>
 800145a:	4b5f      	ldr	r3, [pc, #380]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800145e:	4a5e      	ldr	r2, [pc, #376]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6713      	str	r3, [r2, #112]	@ 0x70
 8001466:	4b5c      	ldr	r3, [pc, #368]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146a:	4a5b      	ldr	r2, [pc, #364]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6713      	str	r3, [r2, #112]	@ 0x70
 8001472:	e00b      	b.n	800148c <HAL_RCC_OscConfig+0x324>
 8001474:	4b58      	ldr	r3, [pc, #352]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001478:	4a57      	ldr	r2, [pc, #348]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001480:	4b55      	ldr	r3, [pc, #340]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001484:	4a54      	ldr	r2, [pc, #336]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001486:	f023 0304 	bic.w	r3, r3, #4
 800148a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d015      	beq.n	80014c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001494:	f7ff fbde 	bl	8000c54 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7ff fbda 	bl	8000c54 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e0cb      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b2:	4b49      	ldr	r3, [pc, #292]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0ee      	beq.n	800149c <HAL_RCC_OscConfig+0x334>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fbc8 	bl	8000c54 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff fbc4 	bl	8000c54 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e0b5      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014de:	4b3e      	ldr	r3, [pc, #248]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1ee      	bne.n	80014c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d105      	bne.n	80014fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f0:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	4a38      	ldr	r2, [pc, #224]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 80014f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80a1 	beq.w	8001648 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001506:	4b34      	ldr	r3, [pc, #208]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b08      	cmp	r3, #8
 8001510:	d05c      	beq.n	80015cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d141      	bne.n	800159e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <HAL_RCC_OscConfig+0x478>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fb98 	bl	8000c54 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff fb94 	bl	8000c54 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e087      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153a:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	019b      	lsls	r3, r3, #6
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	3b01      	subs	r3, #1
 8001560:	041b      	lsls	r3, r3, #16
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	491b      	ldr	r1, [pc, #108]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_RCC_OscConfig+0x478>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fb6d 	bl	8000c54 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fb69 	bl	8000c54 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e05c      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x416>
 800159c:	e054      	b.n	8001648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_RCC_OscConfig+0x478>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb56 	bl	8000c54 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ac:	f7ff fb52 	bl	8000c54 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e045      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_RCC_OscConfig+0x470>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x444>
 80015ca:	e03d      	b.n	8001648 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d107      	bne.n	80015e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e038      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000
 80015e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x4ec>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d028      	beq.n	8001644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d121      	bne.n	8001644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d11a      	bne.n	8001644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001614:	4013      	ands	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800161a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800161c:	4293      	cmp	r3, r2
 800161e:	d111      	bne.n	8001644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162a:	085b      	lsrs	r3, r3, #1
 800162c:	3b01      	subs	r3, #1
 800162e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0cc      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b68      	ldr	r3, [pc, #416]	@ (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d90c      	bls.n	8001694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b65      	ldr	r3, [pc, #404]	@ (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b63      	ldr	r3, [pc, #396]	@ (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0b8      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ac:	4b59      	ldr	r3, [pc, #356]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a58      	ldr	r2, [pc, #352]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c4:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a52      	ldr	r2, [pc, #328]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d0:	4b50      	ldr	r3, [pc, #320]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	494d      	ldr	r1, [pc, #308]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d044      	beq.n	8001778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b47      	ldr	r3, [pc, #284]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d119      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e07f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d003      	beq.n	8001716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001712:	2b03      	cmp	r3, #3
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	4b3f      	ldr	r3, [pc, #252]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e06f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	4b3b      	ldr	r3, [pc, #236]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e067      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001736:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f023 0203 	bic.w	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4934      	ldr	r1, [pc, #208]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff fa84 	bl	8000c54 <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	e00a      	b.n	8001766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7ff fa80 	bl	8000c54 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e04f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 020c 	and.w	r2, r3, #12
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	429a      	cmp	r2, r3
 8001776:	d1eb      	bne.n	8001750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001778:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d20c      	bcs.n	80017a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e032      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4916      	ldr	r1, [pc, #88]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	490e      	ldr	r1, [pc, #56]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017de:	f000 f821 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80017e2:	4602      	mov	r2, r0
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	490a      	ldr	r1, [pc, #40]	@ (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	5ccb      	ldrb	r3, [r1, r3]
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	4a09      	ldr	r2, [pc, #36]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f8e6 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023c00 	.word	0x40023c00
 8001814:	40023800 	.word	0x40023800
 8001818:	0800539c 	.word	0x0800539c
 800181c:	20000000 	.word	0x20000000
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001828:	b094      	sub	sp, #80	@ 0x50
 800182a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001830:	2300      	movs	r3, #0
 8001832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001834:	2300      	movs	r3, #0
 8001836:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800183c:	4b79      	ldr	r3, [pc, #484]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x200>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	d00d      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x40>
 8001848:	2b08      	cmp	r3, #8
 800184a:	f200 80e1 	bhi.w	8001a10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x34>
 8001852:	2b04      	cmp	r3, #4
 8001854:	d003      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x3a>
 8001856:	e0db      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b73      	ldr	r3, [pc, #460]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x204>)
 800185a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800185c:	e0db      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185e:	4b73      	ldr	r3, [pc, #460]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x208>)
 8001860:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001862:	e0d8      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001864:	4b6f      	ldr	r3, [pc, #444]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800186c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d063      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x200>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	2200      	movs	r2, #0
 8001882:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001884:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800188c:	633b      	str	r3, [r7, #48]	@ 0x30
 800188e:	2300      	movs	r3, #0
 8001890:	637b      	str	r3, [r7, #52]	@ 0x34
 8001892:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001896:	4622      	mov	r2, r4
 8001898:	462b      	mov	r3, r5
 800189a:	f04f 0000 	mov.w	r0, #0
 800189e:	f04f 0100 	mov.w	r1, #0
 80018a2:	0159      	lsls	r1, r3, #5
 80018a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a8:	0150      	lsls	r0, r2, #5
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4621      	mov	r1, r4
 80018b0:	1a51      	subs	r1, r2, r1
 80018b2:	6139      	str	r1, [r7, #16]
 80018b4:	4629      	mov	r1, r5
 80018b6:	eb63 0301 	sbc.w	r3, r3, r1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018c8:	4659      	mov	r1, fp
 80018ca:	018b      	lsls	r3, r1, #6
 80018cc:	4651      	mov	r1, sl
 80018ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018d2:	4651      	mov	r1, sl
 80018d4:	018a      	lsls	r2, r1, #6
 80018d6:	4651      	mov	r1, sl
 80018d8:	ebb2 0801 	subs.w	r8, r2, r1
 80018dc:	4659      	mov	r1, fp
 80018de:	eb63 0901 	sbc.w	r9, r3, r1
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018f6:	4690      	mov	r8, r2
 80018f8:	4699      	mov	r9, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	eb18 0303 	adds.w	r3, r8, r3
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	462b      	mov	r3, r5
 8001904:	eb49 0303 	adc.w	r3, r9, r3
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001916:	4629      	mov	r1, r5
 8001918:	024b      	lsls	r3, r1, #9
 800191a:	4621      	mov	r1, r4
 800191c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001920:	4621      	mov	r1, r4
 8001922:	024a      	lsls	r2, r1, #9
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192a:	2200      	movs	r2, #0
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800192e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001934:	f7fe fca4 	bl	8000280 <__aeabi_uldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4613      	mov	r3, r2
 800193e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001940:	e058      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b38      	ldr	r3, [pc, #224]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	2200      	movs	r2, #0
 800194a:	4618      	mov	r0, r3
 800194c:	4611      	mov	r1, r2
 800194e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001952:	623b      	str	r3, [r7, #32]
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
 8001958:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800195c:	4642      	mov	r2, r8
 800195e:	464b      	mov	r3, r9
 8001960:	f04f 0000 	mov.w	r0, #0
 8001964:	f04f 0100 	mov.w	r1, #0
 8001968:	0159      	lsls	r1, r3, #5
 800196a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800196e:	0150      	lsls	r0, r2, #5
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4641      	mov	r1, r8
 8001976:	ebb2 0a01 	subs.w	sl, r2, r1
 800197a:	4649      	mov	r1, r9
 800197c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800198c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001990:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001994:	ebb2 040a 	subs.w	r4, r2, sl
 8001998:	eb63 050b 	sbc.w	r5, r3, fp
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	00eb      	lsls	r3, r5, #3
 80019a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019aa:	00e2      	lsls	r2, r4, #3
 80019ac:	4614      	mov	r4, r2
 80019ae:	461d      	mov	r5, r3
 80019b0:	4643      	mov	r3, r8
 80019b2:	18e3      	adds	r3, r4, r3
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	464b      	mov	r3, r9
 80019b8:	eb45 0303 	adc.w	r3, r5, r3
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ca:	4629      	mov	r1, r5
 80019cc:	028b      	lsls	r3, r1, #10
 80019ce:	4621      	mov	r1, r4
 80019d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d4:	4621      	mov	r1, r4
 80019d6:	028a      	lsls	r2, r1, #10
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019de:	2200      	movs	r2, #0
 80019e0:	61bb      	str	r3, [r7, #24]
 80019e2:	61fa      	str	r2, [r7, #28]
 80019e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019e8:	f7fe fc4a 	bl	8000280 <__aeabi_uldivmod>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4613      	mov	r3, r2
 80019f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	3301      	adds	r3, #1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001a04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a0e:	e002      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3750      	adds	r7, #80	@ 0x50
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	00f42400 	.word	0x00f42400
 8001a2c:	007a1200 	.word	0x007a1200

08001a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000000 	.word	0x20000000

08001a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a4c:	f7ff fff0 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	0a9b      	lsrs	r3, r3, #10
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	4903      	ldr	r1, [pc, #12]	@ (8001a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	080053ac 	.word	0x080053ac

08001a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a74:	f7ff ffdc 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	0b5b      	lsrs	r3, r3, #13
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4903      	ldr	r1, [pc, #12]	@ (8001a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	080053ac 	.word	0x080053ac

08001a98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aa8:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <HAL_RCC_GetClockConfig+0x60>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0207 	and.w	r2, r3, #7
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	601a      	str	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40023c00 	.word	0x40023c00

08001afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e041      	b.n	8001b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f839 	bl	8001b9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3304      	adds	r3, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	f000 f9d8 	bl	8001ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d001      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e04e      	b.n	8001c66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a23      	ldr	r2, [pc, #140]	@ (8001c74 <HAL_TIM_Base_Start_IT+0xc4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d022      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf2:	d01d      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c78 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d018      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <HAL_TIM_Base_Start_IT+0xcc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d013      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00e      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1b      	ldr	r2, [pc, #108]	@ (8001c84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d009      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	@ (8001c88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a18      	ldr	r2, [pc, #96]	@ (8001c8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d111      	bne.n	8001c54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d010      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c52:	e007      	b.n	8001c64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40010000 	.word	0x40010000
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	40000c00 	.word	0x40000c00
 8001c84:	40010400 	.word	0x40010400
 8001c88:	40014000 	.word	0x40014000
 8001c8c:	40001800 	.word	0x40001800

08001c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d122      	bne.n	8001cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d11b      	bne.n	8001cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0202 	mvn.w	r2, #2
 8001cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8ee 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001cd8:	e005      	b.n	8001ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8e0 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f8f1 	bl	8001ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d122      	bne.n	8001d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d11b      	bne.n	8001d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0204 	mvn.w	r2, #4
 8001d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8c4 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8b6 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8c7 	bl	8001ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d122      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d11b      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0208 	mvn.w	r2, #8
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f89a 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f88c 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f89d 	bl	8001ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d122      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d11b      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0210 	mvn.w	r2, #16
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f870 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f862 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f873 	bl	8001ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d107      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0201 	mvn.w	r2, #1
 8001e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fd52 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1e:	2b80      	cmp	r3, #128	@ 0x80
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e2c:	2b80      	cmp	r3, #128	@ 0x80
 8001e2e:	d107      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f902 	bl	8002044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4a:	2b40      	cmp	r3, #64	@ 0x40
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e58:	2b40      	cmp	r3, #64	@ 0x40
 8001e5a:	d107      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f838 	bl	8001edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d10e      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b20      	cmp	r3, #32
 8001e86:	d107      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0220 	mvn.w	r2, #32
 8001e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8cc 	bl	8002030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a40      	ldr	r2, [pc, #256]	@ (8002004 <TIM_Base_SetConfig+0x114>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <TIM_Base_SetConfig+0x40>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f0e:	d00f      	beq.n	8001f30 <TIM_Base_SetConfig+0x40>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3d      	ldr	r2, [pc, #244]	@ (8002008 <TIM_Base_SetConfig+0x118>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00b      	beq.n	8001f30 <TIM_Base_SetConfig+0x40>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3c      	ldr	r2, [pc, #240]	@ (800200c <TIM_Base_SetConfig+0x11c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <TIM_Base_SetConfig+0x40>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3b      	ldr	r2, [pc, #236]	@ (8002010 <TIM_Base_SetConfig+0x120>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d003      	beq.n	8001f30 <TIM_Base_SetConfig+0x40>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3a      	ldr	r2, [pc, #232]	@ (8002014 <TIM_Base_SetConfig+0x124>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d108      	bne.n	8001f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2f      	ldr	r2, [pc, #188]	@ (8002004 <TIM_Base_SetConfig+0x114>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d02b      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f50:	d027      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2c      	ldr	r2, [pc, #176]	@ (8002008 <TIM_Base_SetConfig+0x118>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d023      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800200c <TIM_Base_SetConfig+0x11c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01f      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2a      	ldr	r2, [pc, #168]	@ (8002010 <TIM_Base_SetConfig+0x120>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01b      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a29      	ldr	r2, [pc, #164]	@ (8002014 <TIM_Base_SetConfig+0x124>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d017      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a28      	ldr	r2, [pc, #160]	@ (8002018 <TIM_Base_SetConfig+0x128>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a27      	ldr	r2, [pc, #156]	@ (800201c <TIM_Base_SetConfig+0x12c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00f      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a26      	ldr	r2, [pc, #152]	@ (8002020 <TIM_Base_SetConfig+0x130>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00b      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	@ (8002024 <TIM_Base_SetConfig+0x134>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a24      	ldr	r2, [pc, #144]	@ (8002028 <TIM_Base_SetConfig+0x138>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d003      	beq.n	8001fa2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	@ (800202c <TIM_Base_SetConfig+0x13c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d108      	bne.n	8001fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <TIM_Base_SetConfig+0x114>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <TIM_Base_SetConfig+0xf8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8002014 <TIM_Base_SetConfig+0x124>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d103      	bne.n	8001ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	615a      	str	r2, [r3, #20]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40010000 	.word	0x40010000
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800
 8002010:	40000c00 	.word	0x40000c00
 8002014:	40010400 	.word	0x40010400
 8002018:	40014000 	.word	0x40014000
 800201c:	40014400 	.word	0x40014400
 8002020:	40014800 	.word	0x40014800
 8002024:	40001800 	.word	0x40001800
 8002028:	40001c00 	.word	0x40001c00
 800202c:	40002000 	.word	0x40002000

08002030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e03f      	b.n	80020ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fc5e 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	@ 0x24
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800209a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f929 	bl	80022f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b08a      	sub	sp, #40	@ 0x28
 80020f6:	af02      	add	r7, sp, #8
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b20      	cmp	r3, #32
 8002110:	d17c      	bne.n	800220c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_UART_Transmit+0x2c>
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e075      	b.n	800220e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_UART_Transmit+0x3e>
 800212c:	2302      	movs	r3, #2
 800212e:	e06e      	b.n	800220e <HAL_UART_Transmit+0x11c>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2221      	movs	r2, #33	@ 0x21
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002146:	f7fe fd85 	bl	8000c54 <HAL_GetTick>
 800214a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	88fa      	ldrh	r2, [r7, #6]
 8002156:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002160:	d108      	bne.n	8002174 <HAL_UART_Transmit+0x82>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d104      	bne.n	8002174 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	e003      	b.n	800217c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8002184:	e02a      	b.n	80021dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	2180      	movs	r1, #128	@ 0x80
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f840 	bl	8002216 <UART_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e036      	b.n	800220e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10b      	bne.n	80021be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	3302      	adds	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	e007      	b.n	80021ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	3301      	adds	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1cf      	bne.n	8002186 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2200      	movs	r2, #0
 80021ee:	2140      	movs	r1, #64	@ 0x40
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f810 	bl	8002216 <UART_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e006      	b.n	800220e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e000      	b.n	800220e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b090      	sub	sp, #64	@ 0x40
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002226:	e050      	b.n	80022ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800222a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800222e:	d04c      	beq.n	80022ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002232:	2b00      	cmp	r3, #0
 8002234:	d007      	beq.n	8002246 <UART_WaitOnFlagUntilTimeout+0x30>
 8002236:	f7fe fd0d 	bl	8000c54 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002242:	429a      	cmp	r2, r3
 8002244:	d241      	bcs.n	80022ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	330c      	adds	r3, #12
 800224c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002250:	e853 3f00 	ldrex	r3, [r3]
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800225c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	330c      	adds	r3, #12
 8002264:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002266:	637a      	str	r2, [r7, #52]	@ 0x34
 8002268:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800226c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800226e:	e841 2300 	strex	r3, r2, [r1]
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e5      	bne.n	8002246 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3314      	adds	r3, #20
 8002280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	e853 3f00 	ldrex	r3, [r3]
 8002288:	613b      	str	r3, [r7, #16]
   return(result);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3314      	adds	r3, #20
 8002298:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800229a:	623a      	str	r2, [r7, #32]
 800229c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229e:	69f9      	ldr	r1, [r7, #28]
 80022a0:	6a3a      	ldr	r2, [r7, #32]
 80022a2:	e841 2300 	strex	r3, r2, [r1]
 80022a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1e5      	bne.n	800227a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e00f      	b.n	80022ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4013      	ands	r3, r2
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	bf0c      	ite	eq
 80022da:	2301      	moveq	r3, #1
 80022dc:	2300      	movne	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d09f      	beq.n	8002228 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3740      	adds	r7, #64	@ 0x40
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f8:	b0c0      	sub	sp, #256	@ 0x100
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800230c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002310:	68d9      	ldr	r1, [r3, #12]
 8002312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	ea40 0301 	orr.w	r3, r0, r1
 800231c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800231e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	431a      	orrs	r2, r3
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	431a      	orrs	r2, r3
 8002334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800234c:	f021 010c 	bic.w	r1, r1, #12
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800235a:	430b      	orrs	r3, r1
 800235c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800235e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236e:	6999      	ldr	r1, [r3, #24]
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	ea40 0301 	orr.w	r3, r0, r1
 800237a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b8f      	ldr	r3, [pc, #572]	@ (80025c0 <UART_SetConfig+0x2cc>)
 8002384:	429a      	cmp	r2, r3
 8002386:	d005      	beq.n	8002394 <UART_SetConfig+0xa0>
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b8d      	ldr	r3, [pc, #564]	@ (80025c4 <UART_SetConfig+0x2d0>)
 8002390:	429a      	cmp	r2, r3
 8002392:	d104      	bne.n	800239e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002394:	f7ff fb6c 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8002398:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800239c:	e003      	b.n	80023a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800239e:	f7ff fb53 	bl	8001a48 <HAL_RCC_GetPCLK1Freq>
 80023a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023b0:	f040 810c 	bne.w	80025cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023b8:	2200      	movs	r2, #0
 80023ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023c6:	4622      	mov	r2, r4
 80023c8:	462b      	mov	r3, r5
 80023ca:	1891      	adds	r1, r2, r2
 80023cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023ce:	415b      	adcs	r3, r3
 80023d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023d6:	4621      	mov	r1, r4
 80023d8:	eb12 0801 	adds.w	r8, r2, r1
 80023dc:	4629      	mov	r1, r5
 80023de:	eb43 0901 	adc.w	r9, r3, r1
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023f6:	4690      	mov	r8, r2
 80023f8:	4699      	mov	r9, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	eb18 0303 	adds.w	r3, r8, r3
 8002400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002404:	462b      	mov	r3, r5
 8002406:	eb49 0303 	adc.w	r3, r9, r3
 800240a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800241a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800241e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002422:	460b      	mov	r3, r1
 8002424:	18db      	adds	r3, r3, r3
 8002426:	653b      	str	r3, [r7, #80]	@ 0x50
 8002428:	4613      	mov	r3, r2
 800242a:	eb42 0303 	adc.w	r3, r2, r3
 800242e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002430:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002434:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002438:	f7fd ff22 	bl	8000280 <__aeabi_uldivmod>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4b61      	ldr	r3, [pc, #388]	@ (80025c8 <UART_SetConfig+0x2d4>)
 8002442:	fba3 2302 	umull	r2, r3, r3, r2
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	011c      	lsls	r4, r3, #4
 800244a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800244e:	2200      	movs	r2, #0
 8002450:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002454:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002458:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800245c:	4642      	mov	r2, r8
 800245e:	464b      	mov	r3, r9
 8002460:	1891      	adds	r1, r2, r2
 8002462:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002464:	415b      	adcs	r3, r3
 8002466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002468:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800246c:	4641      	mov	r1, r8
 800246e:	eb12 0a01 	adds.w	sl, r2, r1
 8002472:	4649      	mov	r1, r9
 8002474:	eb43 0b01 	adc.w	fp, r3, r1
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002484:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002488:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800248c:	4692      	mov	sl, r2
 800248e:	469b      	mov	fp, r3
 8002490:	4643      	mov	r3, r8
 8002492:	eb1a 0303 	adds.w	r3, sl, r3
 8002496:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800249a:	464b      	mov	r3, r9
 800249c:	eb4b 0303 	adc.w	r3, fp, r3
 80024a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024b8:	460b      	mov	r3, r1
 80024ba:	18db      	adds	r3, r3, r3
 80024bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80024be:	4613      	mov	r3, r2
 80024c0:	eb42 0303 	adc.w	r3, r2, r3
 80024c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80024c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024ce:	f7fd fed7 	bl	8000280 <__aeabi_uldivmod>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	4b3b      	ldr	r3, [pc, #236]	@ (80025c8 <UART_SetConfig+0x2d4>)
 80024da:	fba3 2301 	umull	r2, r3, r3, r1
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	2264      	movs	r2, #100	@ 0x64
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	1acb      	subs	r3, r1, r3
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80024ee:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <UART_SetConfig+0x2d4>)
 80024f0:	fba3 2302 	umull	r2, r3, r3, r2
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024fc:	441c      	add	r4, r3
 80024fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002502:	2200      	movs	r2, #0
 8002504:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002508:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800250c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002510:	4642      	mov	r2, r8
 8002512:	464b      	mov	r3, r9
 8002514:	1891      	adds	r1, r2, r2
 8002516:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002518:	415b      	adcs	r3, r3
 800251a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800251c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002520:	4641      	mov	r1, r8
 8002522:	1851      	adds	r1, r2, r1
 8002524:	6339      	str	r1, [r7, #48]	@ 0x30
 8002526:	4649      	mov	r1, r9
 8002528:	414b      	adcs	r3, r1
 800252a:	637b      	str	r3, [r7, #52]	@ 0x34
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002538:	4659      	mov	r1, fp
 800253a:	00cb      	lsls	r3, r1, #3
 800253c:	4651      	mov	r1, sl
 800253e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002542:	4651      	mov	r1, sl
 8002544:	00ca      	lsls	r2, r1, #3
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	4603      	mov	r3, r0
 800254c:	4642      	mov	r2, r8
 800254e:	189b      	adds	r3, r3, r2
 8002550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002554:	464b      	mov	r3, r9
 8002556:	460a      	mov	r2, r1
 8002558:	eb42 0303 	adc.w	r3, r2, r3
 800255c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800256c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002570:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002574:	460b      	mov	r3, r1
 8002576:	18db      	adds	r3, r3, r3
 8002578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800257a:	4613      	mov	r3, r2
 800257c:	eb42 0303 	adc.w	r3, r2, r3
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002586:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800258a:	f7fd fe79 	bl	8000280 <__aeabi_uldivmod>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <UART_SetConfig+0x2d4>)
 8002594:	fba3 1302 	umull	r1, r3, r3, r2
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	2164      	movs	r1, #100	@ 0x64
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	3332      	adds	r3, #50	@ 0x32
 80025a6:	4a08      	ldr	r2, [pc, #32]	@ (80025c8 <UART_SetConfig+0x2d4>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	f003 0207 	and.w	r2, r3, #7
 80025b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4422      	add	r2, r4
 80025ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025bc:	e106      	b.n	80027cc <UART_SetConfig+0x4d8>
 80025be:	bf00      	nop
 80025c0:	40011000 	.word	0x40011000
 80025c4:	40011400 	.word	0x40011400
 80025c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025d0:	2200      	movs	r2, #0
 80025d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025de:	4642      	mov	r2, r8
 80025e0:	464b      	mov	r3, r9
 80025e2:	1891      	adds	r1, r2, r2
 80025e4:	6239      	str	r1, [r7, #32]
 80025e6:	415b      	adcs	r3, r3
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ee:	4641      	mov	r1, r8
 80025f0:	1854      	adds	r4, r2, r1
 80025f2:	4649      	mov	r1, r9
 80025f4:	eb43 0501 	adc.w	r5, r3, r1
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	00eb      	lsls	r3, r5, #3
 8002602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002606:	00e2      	lsls	r2, r4, #3
 8002608:	4614      	mov	r4, r2
 800260a:	461d      	mov	r5, r3
 800260c:	4643      	mov	r3, r8
 800260e:	18e3      	adds	r3, r4, r3
 8002610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002614:	464b      	mov	r3, r9
 8002616:	eb45 0303 	adc.w	r3, r5, r3
 800261a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800261e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800262a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800263a:	4629      	mov	r1, r5
 800263c:	008b      	lsls	r3, r1, #2
 800263e:	4621      	mov	r1, r4
 8002640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002644:	4621      	mov	r1, r4
 8002646:	008a      	lsls	r2, r1, #2
 8002648:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800264c:	f7fd fe18 	bl	8000280 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4b60      	ldr	r3, [pc, #384]	@ (80027d8 <UART_SetConfig+0x4e4>)
 8002656:	fba3 2302 	umull	r2, r3, r3, r2
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	011c      	lsls	r4, r3, #4
 800265e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002662:	2200      	movs	r2, #0
 8002664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002668:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800266c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002670:	4642      	mov	r2, r8
 8002672:	464b      	mov	r3, r9
 8002674:	1891      	adds	r1, r2, r2
 8002676:	61b9      	str	r1, [r7, #24]
 8002678:	415b      	adcs	r3, r3
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002680:	4641      	mov	r1, r8
 8002682:	1851      	adds	r1, r2, r1
 8002684:	6139      	str	r1, [r7, #16]
 8002686:	4649      	mov	r1, r9
 8002688:	414b      	adcs	r3, r1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002698:	4659      	mov	r1, fp
 800269a:	00cb      	lsls	r3, r1, #3
 800269c:	4651      	mov	r1, sl
 800269e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026a2:	4651      	mov	r1, sl
 80026a4:	00ca      	lsls	r2, r1, #3
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	4642      	mov	r2, r8
 80026ae:	189b      	adds	r3, r3, r2
 80026b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026b4:	464b      	mov	r3, r9
 80026b6:	460a      	mov	r2, r1
 80026b8:	eb42 0303 	adc.w	r3, r2, r3
 80026bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026d8:	4649      	mov	r1, r9
 80026da:	008b      	lsls	r3, r1, #2
 80026dc:	4641      	mov	r1, r8
 80026de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e2:	4641      	mov	r1, r8
 80026e4:	008a      	lsls	r2, r1, #2
 80026e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026ea:	f7fd fdc9 	bl	8000280 <__aeabi_uldivmod>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	4b38      	ldr	r3, [pc, #224]	@ (80027d8 <UART_SetConfig+0x4e4>)
 80026f6:	fba3 2301 	umull	r2, r3, r3, r1
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2264      	movs	r2, #100	@ 0x64
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	1acb      	subs	r3, r1, r3
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	3332      	adds	r3, #50	@ 0x32
 8002708:	4a33      	ldr	r2, [pc, #204]	@ (80027d8 <UART_SetConfig+0x4e4>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002714:	441c      	add	r4, r3
 8002716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800271a:	2200      	movs	r2, #0
 800271c:	673b      	str	r3, [r7, #112]	@ 0x70
 800271e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002720:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002724:	4642      	mov	r2, r8
 8002726:	464b      	mov	r3, r9
 8002728:	1891      	adds	r1, r2, r2
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	415b      	adcs	r3, r3
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002734:	4641      	mov	r1, r8
 8002736:	1851      	adds	r1, r2, r1
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	4649      	mov	r1, r9
 800273c:	414b      	adcs	r3, r1
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800274c:	4659      	mov	r1, fp
 800274e:	00cb      	lsls	r3, r1, #3
 8002750:	4651      	mov	r1, sl
 8002752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002756:	4651      	mov	r1, sl
 8002758:	00ca      	lsls	r2, r1, #3
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	4603      	mov	r3, r0
 8002760:	4642      	mov	r2, r8
 8002762:	189b      	adds	r3, r3, r2
 8002764:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002766:	464b      	mov	r3, r9
 8002768:	460a      	mov	r2, r1
 800276a:	eb42 0303 	adc.w	r3, r2, r3
 800276e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	663b      	str	r3, [r7, #96]	@ 0x60
 800277a:	667a      	str	r2, [r7, #100]	@ 0x64
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002788:	4649      	mov	r1, r9
 800278a:	008b      	lsls	r3, r1, #2
 800278c:	4641      	mov	r1, r8
 800278e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002792:	4641      	mov	r1, r8
 8002794:	008a      	lsls	r2, r1, #2
 8002796:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800279a:	f7fd fd71 	bl	8000280 <__aeabi_uldivmod>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4b0d      	ldr	r3, [pc, #52]	@ (80027d8 <UART_SetConfig+0x4e4>)
 80027a4:	fba3 1302 	umull	r1, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	2164      	movs	r1, #100	@ 0x64
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	3332      	adds	r3, #50	@ 0x32
 80027b6:	4a08      	ldr	r2, [pc, #32]	@ (80027d8 <UART_SetConfig+0x4e4>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	f003 020f 	and.w	r2, r3, #15
 80027c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4422      	add	r2, r4
 80027ca:	609a      	str	r2, [r3, #8]
}
 80027cc:	bf00      	nop
 80027ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027d2:	46bd      	mov	sp, r7
 80027d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d8:	51eb851f 	.word	0x51eb851f

080027dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80027ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ee:	2b84      	cmp	r3, #132	@ 0x84
 80027f0:	d005      	beq.n	80027fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80027f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	3303      	adds	r3, #3
 80027fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002810:	f000 ff64 	bl	80036dc <vTaskStartScheduler>
  
  return osOK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	bd80      	pop	{r7, pc}

0800281a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800281a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281c:	b089      	sub	sp, #36	@ 0x24
 800281e:	af04      	add	r7, sp, #16
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <osThreadCreate+0x54>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01c      	beq.n	800286e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685c      	ldr	r4, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691e      	ldr	r6, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ffc8 	bl	80027dc <makeFreeRtosPriority>
 800284c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002856:	9202      	str	r2, [sp, #8]
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	9100      	str	r1, [sp, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4632      	mov	r2, r6
 8002860:	4629      	mov	r1, r5
 8002862:	4620      	mov	r0, r4
 8002864:	f000 fcc5 	bl	80031f2 <xTaskCreateStatic>
 8002868:	4603      	mov	r3, r0
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e01c      	b.n	80028a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685c      	ldr	r4, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800287a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ffaa 	bl	80027dc <makeFreeRtosPriority>
 8002888:	4602      	mov	r2, r0
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	9200      	str	r2, [sp, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	4632      	mov	r2, r6
 8002896:	4629      	mov	r1, r5
 8002898:	4620      	mov	r0, r4
 800289a:	f000 fd0a 	bl	80032b2 <xTaskCreate>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d001      	beq.n	80028a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <osDelay+0x16>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	e000      	b.n	80028ca <osDelay+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fed0 	bl	8003670 <vTaskDelay>
  
  return osOK;
 80028d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f103 0208 	add.w	r2, r3, #8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f103 0208 	add.w	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f103 0208 	add.w	r2, r3, #8
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	601a      	str	r2, [r3, #0]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002992:	d103      	bne.n	800299c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e00c      	b.n	80029b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3308      	adds	r3, #8
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e002      	b.n	80029aa <vListInsert+0x2e>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d2f6      	bcs.n	80029a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	601a      	str	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6892      	ldr	r2, [r2, #8]
 8002a04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6852      	ldr	r2, [r2, #4]
 8002a0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d103      	bne.n	8002a22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a70:	f001 fc92 	bl	8004398 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7c:	68f9      	ldr	r1, [r7, #12]
 8002a7e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	441a      	add	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	68f9      	ldr	r1, [r7, #12]
 8002aa4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	441a      	add	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	22ff      	movs	r2, #255	@ 0xff
 8002ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	22ff      	movs	r2, #255	@ 0xff
 8002abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d114      	bne.n	8002af0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01a      	beq.n	8002b04 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 f85c 	bl	8003b90 <xTaskRemoveFromEventList>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d012      	beq.n	8002b04 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ade:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <xQueueGenericReset+0xd0>)
 8002ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	e009      	b.n	8002b04 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3310      	adds	r3, #16
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fef0 	bl	80028da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3324      	adds	r3, #36	@ 0x24
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff feeb 	bl	80028da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b04:	f001 fc7a 	bl	80043fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b08:	2301      	movs	r3, #1
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000ed04 	.word	0xe000ed04

08002b18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	@ 0x28
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	4613      	mov	r3, r2
 8002b24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	613b      	str	r3, [r7, #16]
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	fb02 f303 	mul.w	r3, r2, r3
 8002b4c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3348      	adds	r3, #72	@ 0x48
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 fd00 	bl	8004558 <pvPortMalloc>
 8002b58:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d011      	beq.n	8002b84 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	3348      	adds	r3, #72	@ 0x48
 8002b68:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b72:	79fa      	ldrb	r2, [r7, #7]
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f805 	bl	8002b8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b84:	69bb      	ldr	r3, [r7, #24]
	}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e002      	b.n	8002bb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	69b8      	ldr	r0, [r7, #24]
 8002bc0:	f7ff ff40 	bl	8002a44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08e      	sub	sp, #56	@ 0x38
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <xQueueGenericSend+0x34>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <xQueueGenericSend+0x42>
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <xQueueGenericSend+0x46>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <xQueueGenericSend+0x48>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <xQueueGenericSend+0x64>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d103      	bne.n	8002c3e <xQueueGenericSend+0x72>
 8002c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <xQueueGenericSend+0x76>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <xQueueGenericSend+0x78>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <xQueueGenericSend+0x94>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	623b      	str	r3, [r7, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c60:	f001 f95c 	bl	8003f1c <xTaskGetSchedulerState>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d102      	bne.n	8002c70 <xQueueGenericSend+0xa4>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <xQueueGenericSend+0xa8>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <xQueueGenericSend+0xaa>
 8002c74:	2300      	movs	r3, #0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10b      	bne.n	8002c92 <xQueueGenericSend+0xc6>
	__asm volatile
 8002c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	61fb      	str	r3, [r7, #28]
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	e7fd      	b.n	8002c8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c92:	f001 fb81 	bl	8004398 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <xQueueGenericSend+0xdc>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d129      	bne.n	8002cfc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cae:	f000 f990 	bl	8002fd2 <prvCopyDataToQueue>
 8002cb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d010      	beq.n	8002cde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbe:	3324      	adds	r3, #36	@ 0x24
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 ff65 	bl	8003b90 <xTaskRemoveFromEventList>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d013      	beq.n	8002cf4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8002dcc <xQueueGenericSend+0x200>)
 8002cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	e00a      	b.n	8002cf4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ce4:	4b39      	ldr	r3, [pc, #228]	@ (8002dcc <xQueueGenericSend+0x200>)
 8002ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002cf4:	f001 fb82 	bl	80043fc <vPortExitCritical>
				return pdPASS;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e063      	b.n	8002dc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d02:	f001 fb7b 	bl	80043fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e05c      	b.n	8002dc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 ff9f 	bl	8003c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d1e:	f001 fb6d 	bl	80043fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d22:	f000 fd45 	bl	80037b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d26:	f001 fb37 	bl	8004398 <vPortEnterCritical>
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d30:	b25b      	sxtb	r3, r3
 8002d32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d36:	d103      	bne.n	8002d40 <xQueueGenericSend+0x174>
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d4c:	d103      	bne.n	8002d56 <xQueueGenericSend+0x18a>
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d56:	f001 fb51 	bl	80043fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d5a:	1d3a      	adds	r2, r7, #4
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 ff8e 	bl	8003c84 <xTaskCheckForTimeOut>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d124      	bne.n	8002db8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d70:	f000 fa27 	bl	80031c2 <prvIsQueueFull>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d018      	beq.n	8002dac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	3310      	adds	r3, #16
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fede 	bl	8003b44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d8a:	f000 f9b2 	bl	80030f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d8e:	f000 fd1d 	bl	80037cc <xTaskResumeAll>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f47f af7c 	bne.w	8002c92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <xQueueGenericSend+0x200>)
 8002d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	e772      	b.n	8002c92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dae:	f000 f9a0 	bl	80030f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002db2:	f000 fd0b 	bl	80037cc <xTaskResumeAll>
 8002db6:	e76c      	b.n	8002c92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dba:	f000 f99a 	bl	80030f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dbe:	f000 fd05 	bl	80037cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002dc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3738      	adds	r7, #56	@ 0x38
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	e000ed04 	.word	0xe000ed04

08002dd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08c      	sub	sp, #48	@ 0x30
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10b      	bne.n	8002e02 <xQueueReceive+0x32>
	__asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	623b      	str	r3, [r7, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	e7fd      	b.n	8002dfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d103      	bne.n	8002e10 <xQueueReceive+0x40>
 8002e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <xQueueReceive+0x44>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <xQueueReceive+0x46>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <xQueueReceive+0x62>
	__asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	61fb      	str	r3, [r7, #28]
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	e7fd      	b.n	8002e2e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e32:	f001 f873 	bl	8003f1c <xTaskGetSchedulerState>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <xQueueReceive+0x72>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <xQueueReceive+0x76>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <xQueueReceive+0x78>
 8002e46:	2300      	movs	r3, #0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10b      	bne.n	8002e64 <xQueueReceive+0x94>
	__asm volatile
 8002e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	61bb      	str	r3, [r7, #24]
}
 8002e5e:	bf00      	nop
 8002e60:	bf00      	nop
 8002e62:	e7fd      	b.n	8002e60 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e64:	f001 fa98 	bl	8004398 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01f      	beq.n	8002eb4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e78:	f000 f915 	bl	80030a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	1e5a      	subs	r2, r3, #1
 8002e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e82:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00f      	beq.n	8002eac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8e:	3310      	adds	r3, #16
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fe7d 	bl	8003b90 <xTaskRemoveFromEventList>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f90 <xQueueReceive+0x1c0>)
 8002e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002eac:	f001 faa6 	bl	80043fc <vPortExitCritical>
				return pdPASS;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e069      	b.n	8002f88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eba:	f001 fa9f 	bl	80043fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e062      	b.n	8002f88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ec8:	f107 0310 	add.w	r3, r7, #16
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fec3 	bl	8003c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ed6:	f001 fa91 	bl	80043fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002eda:	f000 fc69 	bl	80037b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ede:	f001 fa5b 	bl	8004398 <vPortEnterCritical>
 8002ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ee8:	b25b      	sxtb	r3, r3
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eee:	d103      	bne.n	8002ef8 <xQueueReceive+0x128>
 8002ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f04:	d103      	bne.n	8002f0e <xQueueReceive+0x13e>
 8002f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f0e:	f001 fa75 	bl	80043fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f12:	1d3a      	adds	r2, r7, #4
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 feb2 	bl	8003c84 <xTaskCheckForTimeOut>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d123      	bne.n	8002f6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f28:	f000 f935 	bl	8003196 <prvIsQueueEmpty>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f34:	3324      	adds	r3, #36	@ 0x24
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fe02 	bl	8003b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f42:	f000 f8d6 	bl	80030f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f46:	f000 fc41 	bl	80037cc <xTaskResumeAll>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d189      	bne.n	8002e64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002f50:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <xQueueReceive+0x1c0>)
 8002f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	e780      	b.n	8002e64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f64:	f000 f8c5 	bl	80030f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f68:	f000 fc30 	bl	80037cc <xTaskResumeAll>
 8002f6c:	e77a      	b.n	8002e64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f70:	f000 f8bf 	bl	80030f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f74:	f000 fc2a 	bl	80037cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f7a:	f000 f90c 	bl	8003196 <prvIsQueueEmpty>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f43f af6f 	beq.w	8002e64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3730      	adds	r7, #48	@ 0x30
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	e000ed04 	.word	0xe000ed04

08002f94 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	60bb      	str	r3, [r7, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	e7fd      	b.n	8002fb6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8002fba:	f001 f9ed 	bl	8004398 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8002fc4:	f001 fa1a 	bl	80043fc <vPortExitCritical>

	return uxReturn;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10d      	bne.n	800300c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d14d      	bne.n	8003094 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 ffab 	bl	8003f58 <xTaskPriorityDisinherit>
 8003002:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	e043      	b.n	8003094 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d119      	bne.n	8003046 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6858      	ldr	r0, [r3, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	461a      	mov	r2, r3
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	f001 fd33 	bl	8004a88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	441a      	add	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	d32b      	bcc.n	8003094 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	e026      	b.n	8003094 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	68d8      	ldr	r0, [r3, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	461a      	mov	r2, r3
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	f001 fd19 	bl	8004a88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	425b      	negs	r3, r3
 8003060:	441a      	add	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d207      	bcs.n	8003082 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	425b      	negs	r3, r3
 800307c:	441a      	add	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d105      	bne.n	8003094 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	3b01      	subs	r3, #1
 8003092:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800309c:	697b      	ldr	r3, [r7, #20]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d018      	beq.n	80030ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	441a      	add	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d303      	bcc.n	80030da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68d9      	ldr	r1, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	461a      	mov	r2, r3
 80030e4:	6838      	ldr	r0, [r7, #0]
 80030e6:	f001 fccf 	bl	8004a88 <memcpy>
	}
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030fa:	f001 f94d 	bl	8004398 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003104:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003106:	e011      	b.n	800312c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3324      	adds	r3, #36	@ 0x24
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fd3b 	bl	8003b90 <xTaskRemoveFromEventList>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003120:	f000 fe14 	bl	8003d4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	3b01      	subs	r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800312c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003130:	2b00      	cmp	r3, #0
 8003132:	dce9      	bgt.n	8003108 <prvUnlockQueue+0x16>
 8003134:	e000      	b.n	8003138 <prvUnlockQueue+0x46>
					break;
 8003136:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	22ff      	movs	r2, #255	@ 0xff
 800313c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003140:	f001 f95c 	bl	80043fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003144:	f001 f928 	bl	8004398 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800314e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003150:	e011      	b.n	8003176 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d012      	beq.n	8003180 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3310      	adds	r3, #16
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fd16 	bl	8003b90 <xTaskRemoveFromEventList>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800316a:	f000 fdef 	bl	8003d4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800316e:	7bbb      	ldrb	r3, [r7, #14]
 8003170:	3b01      	subs	r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003176:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800317a:	2b00      	cmp	r3, #0
 800317c:	dce9      	bgt.n	8003152 <prvUnlockQueue+0x60>
 800317e:	e000      	b.n	8003182 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003180:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	22ff      	movs	r2, #255	@ 0xff
 8003186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800318a:	f001 f937 	bl	80043fc <vPortExitCritical>
}
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800319e:	f001 f8fb 	bl	8004398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031aa:	2301      	movs	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	e001      	b.n	80031b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031b4:	f001 f922 	bl	80043fc <vPortExitCritical>

	return xReturn;
 80031b8:	68fb      	ldr	r3, [r7, #12]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031ca:	f001 f8e5 	bl	8004398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d102      	bne.n	80031e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031da:	2301      	movs	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e001      	b.n	80031e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031e4:	f001 f90a 	bl	80043fc <vPortExitCritical>

	return xReturn;
 80031e8:	68fb      	ldr	r3, [r7, #12]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b08e      	sub	sp, #56	@ 0x38
 80031f6:	af04      	add	r7, sp, #16
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <xTaskCreateStatic+0x2c>
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	623b      	str	r3, [r7, #32]
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	e7fd      	b.n	800321a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <xTaskCreateStatic+0x4a>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	61fb      	str	r3, [r7, #28]
}
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800323c:	23a0      	movs	r3, #160	@ 0xa0
 800323e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2ba0      	cmp	r3, #160	@ 0xa0
 8003244:	d00b      	beq.n	800325e <xTaskCreateStatic+0x6c>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	61bb      	str	r3, [r7, #24]
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	e7fd      	b.n	800325a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800325e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01e      	beq.n	80032a4 <xTaskCreateStatic+0xb2>
 8003266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800326c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003274:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	2202      	movs	r2, #2
 800327a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800327e:	2300      	movs	r3, #0
 8003280:	9303      	str	r3, [sp, #12]
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	9302      	str	r3, [sp, #8]
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f850 	bl	800333c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800329c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800329e:	f000 f8ed 	bl	800347c <prvAddNewTaskToReadyList>
 80032a2:	e001      	b.n	80032a8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032a8:	697b      	ldr	r3, [r7, #20]
	}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3728      	adds	r7, #40	@ 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b08c      	sub	sp, #48	@ 0x30
 80032b6:	af04      	add	r7, sp, #16
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 f946 	bl	8004558 <pvPortMalloc>
 80032cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00e      	beq.n	80032f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032d4:	20a0      	movs	r0, #160	@ 0xa0
 80032d6:	f001 f93f 	bl	8004558 <pvPortMalloc>
 80032da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80032e8:	e005      	b.n	80032f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032ea:	6978      	ldr	r0, [r7, #20]
 80032ec:	f001 fa02 	bl	80046f4 <vPortFree>
 80032f0:	e001      	b.n	80032f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d017      	beq.n	800332c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003304:	88fa      	ldrh	r2, [r7, #6]
 8003306:	2300      	movs	r3, #0
 8003308:	9303      	str	r3, [sp, #12]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	9302      	str	r3, [sp, #8]
 800330e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f80e 	bl	800333c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003320:	69f8      	ldr	r0, [r7, #28]
 8003322:	f000 f8ab 	bl	800347c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003326:	2301      	movs	r3, #1
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e002      	b.n	8003332 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003330:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003332:	69bb      	ldr	r3, [r7, #24]
	}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800334a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003354:	3b01      	subs	r3, #1
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	f023 0307 	bic.w	r3, r3, #7
 8003362:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	617b      	str	r3, [r7, #20]
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	e7fd      	b.n	8003382 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01f      	beq.n	80033cc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800338c:	2300      	movs	r3, #0
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	e012      	b.n	80033b8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	7819      	ldrb	r1, [r3, #0]
 800339a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	3334      	adds	r3, #52	@ 0x34
 80033a2:	460a      	mov	r2, r1
 80033a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	4413      	add	r3, r2
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	d9e9      	bls.n	8003392 <prvInitialiseNewTask+0x56>
 80033be:	e000      	b.n	80033c2 <prvInitialiseNewTask+0x86>
			{
				break;
 80033c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033ca:	e003      	b.n	80033d4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d901      	bls.n	80033de <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033da:	2306      	movs	r3, #6
 80033dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	2200      	movs	r2, #0
 80033ee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fa90 	bl	800291a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fc:	3318      	adds	r3, #24
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fa8b 	bl	800291a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003408:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340c:	f1c3 0207 	rsb	r2, r3, #7
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003418:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	2200      	movs	r2, #0
 800341e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	2200      	movs	r2, #0
 8003426:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	334c      	adds	r3, #76	@ 0x4c
 800342e:	224c      	movs	r2, #76	@ 0x4c
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f001 fa9e 	bl	8004974 <memset>
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	4a0d      	ldr	r2, [pc, #52]	@ (8003470 <prvInitialiseNewTask+0x134>)
 800343c:	651a      	str	r2, [r3, #80]	@ 0x50
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	4a0c      	ldr	r2, [pc, #48]	@ (8003474 <prvInitialiseNewTask+0x138>)
 8003442:	655a      	str	r2, [r3, #84]	@ 0x54
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	4a0c      	ldr	r2, [pc, #48]	@ (8003478 <prvInitialiseNewTask+0x13c>)
 8003448:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	68f9      	ldr	r1, [r7, #12]
 800344e:	69b8      	ldr	r0, [r7, #24]
 8003450:	f000 fe70 	bl	8004134 <pxPortInitialiseStack>
 8003454:	4602      	mov	r2, r0
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800345a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003466:	bf00      	nop
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	2000410c 	.word	0x2000410c
 8003474:	20004174 	.word	0x20004174
 8003478:	200041dc 	.word	0x200041dc

0800347c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003484:	f000 ff88 	bl	8004398 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003488:	4b2a      	ldr	r3, [pc, #168]	@ (8003534 <prvAddNewTaskToReadyList+0xb8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	4a29      	ldr	r2, [pc, #164]	@ (8003534 <prvAddNewTaskToReadyList+0xb8>)
 8003490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003492:	4b29      	ldr	r3, [pc, #164]	@ (8003538 <prvAddNewTaskToReadyList+0xbc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800349a:	4a27      	ldr	r2, [pc, #156]	@ (8003538 <prvAddNewTaskToReadyList+0xbc>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034a0:	4b24      	ldr	r3, [pc, #144]	@ (8003534 <prvAddNewTaskToReadyList+0xb8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d110      	bne.n	80034ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034a8:	f000 fc74 	bl	8003d94 <prvInitialiseTaskLists>
 80034ac:	e00d      	b.n	80034ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034ae:	4b23      	ldr	r3, [pc, #140]	@ (800353c <prvAddNewTaskToReadyList+0xc0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034b6:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <prvAddNewTaskToReadyList+0xbc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d802      	bhi.n	80034ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003538 <prvAddNewTaskToReadyList+0xbc>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <prvAddNewTaskToReadyList+0xc4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003540 <prvAddNewTaskToReadyList+0xc4>)
 80034d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	4b19      	ldr	r3, [pc, #100]	@ (8003544 <prvAddNewTaskToReadyList+0xc8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	4a18      	ldr	r2, [pc, #96]	@ (8003544 <prvAddNewTaskToReadyList+0xc8>)
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4a15      	ldr	r2, [pc, #84]	@ (8003548 <prvAddNewTaskToReadyList+0xcc>)
 80034f4:	441a      	add	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3304      	adds	r3, #4
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f7ff fa19 	bl	8002934 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003502:	f000 ff7b 	bl	80043fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003506:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <prvAddNewTaskToReadyList+0xc0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00e      	beq.n	800352c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800350e:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <prvAddNewTaskToReadyList+0xbc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	429a      	cmp	r2, r3
 800351a:	d207      	bcs.n	800352c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <prvAddNewTaskToReadyList+0xd0>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	200004b8 	.word	0x200004b8
 8003538:	200003b8 	.word	0x200003b8
 800353c:	200004c4 	.word	0x200004c4
 8003540:	200004d4 	.word	0x200004d4
 8003544:	200004c0 	.word	0x200004c0
 8003548:	200003bc 	.word	0x200003bc
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003558:	f000 ff1e 	bl	8004398 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <vTaskDelete+0x18>
 8003562:	4b39      	ldr	r3, [pc, #228]	@ (8003648 <vTaskDelete+0xf8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	e000      	b.n	800356a <vTaskDelete+0x1a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3304      	adds	r3, #4
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fa3c 	bl	80029ee <uxListRemove>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d115      	bne.n	80035a8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003580:	4932      	ldr	r1, [pc, #200]	@ (800364c <vTaskDelete+0xfc>)
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <vTaskDelete+0x58>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003596:	2201      	movs	r2, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43da      	mvns	r2, r3
 800359e:	4b2c      	ldr	r3, [pc, #176]	@ (8003650 <vTaskDelete+0x100>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4013      	ands	r3, r2
 80035a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003650 <vTaskDelete+0x100>)
 80035a6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3318      	adds	r3, #24
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff fa1a 	bl	80029ee <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80035ba:	4b26      	ldr	r3, [pc, #152]	@ (8003654 <vTaskDelete+0x104>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	4a24      	ldr	r2, [pc, #144]	@ (8003654 <vTaskDelete+0x104>)
 80035c2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80035c4:	4b20      	ldr	r3, [pc, #128]	@ (8003648 <vTaskDelete+0xf8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d10b      	bne.n	80035e6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4820      	ldr	r0, [pc, #128]	@ (8003658 <vTaskDelete+0x108>)
 80035d6:	f7ff f9ad 	bl	8002934 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80035da:	4b20      	ldr	r3, [pc, #128]	@ (800365c <vTaskDelete+0x10c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	4a1e      	ldr	r2, [pc, #120]	@ (800365c <vTaskDelete+0x10c>)
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	e009      	b.n	80035fa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80035e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003660 <vTaskDelete+0x110>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003660 <vTaskDelete+0x110>)
 80035ee:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fc3d 	bl	8003e70 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80035f6:	f000 fc71 	bl	8003edc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80035fa:	f000 feff 	bl	80043fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80035fe:	4b19      	ldr	r3, [pc, #100]	@ (8003664 <vTaskDelete+0x114>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01c      	beq.n	8003640 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <vTaskDelete+0xf8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	429a      	cmp	r2, r3
 800360e:	d117      	bne.n	8003640 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003610:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <vTaskDelete+0x118>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <vTaskDelete+0xe0>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	60bb      	str	r3, [r7, #8]
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003630:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <vTaskDelete+0x11c>)
 8003632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200003b8 	.word	0x200003b8
 800364c:	200003bc 	.word	0x200003bc
 8003650:	200004c0 	.word	0x200004c0
 8003654:	200004d4 	.word	0x200004d4
 8003658:	2000048c 	.word	0x2000048c
 800365c:	200004a0 	.word	0x200004a0
 8003660:	200004b8 	.word	0x200004b8
 8003664:	200004c4 	.word	0x200004c4
 8003668:	200004e0 	.word	0x200004e0
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d018      	beq.n	80036b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003682:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <vTaskDelay+0x64>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <vTaskDelay+0x32>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	60bb      	str	r3, [r7, #8]
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036a2:	f000 f885 	bl	80037b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036a6:	2100      	movs	r1, #0
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fcdd 	bl	8004068 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036ae:	f000 f88d 	bl	80037cc <xTaskResumeAll>
 80036b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d107      	bne.n	80036ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80036ba:	4b07      	ldr	r3, [pc, #28]	@ (80036d8 <vTaskDelay+0x68>)
 80036bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200004e0 	.word	0x200004e0
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	@ 0x28
 80036e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036ea:	463a      	mov	r2, r7
 80036ec:	1d39      	adds	r1, r7, #4
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc ff3c 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	9202      	str	r2, [sp, #8]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2300      	movs	r3, #0
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2300      	movs	r3, #0
 8003708:	460a      	mov	r2, r1
 800370a:	4921      	ldr	r1, [pc, #132]	@ (8003790 <vTaskStartScheduler+0xb4>)
 800370c:	4821      	ldr	r0, [pc, #132]	@ (8003794 <vTaskStartScheduler+0xb8>)
 800370e:	f7ff fd70 	bl	80031f2 <xTaskCreateStatic>
 8003712:	4603      	mov	r3, r0
 8003714:	4a20      	ldr	r2, [pc, #128]	@ (8003798 <vTaskStartScheduler+0xbc>)
 8003716:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003718:	4b1f      	ldr	r3, [pc, #124]	@ (8003798 <vTaskStartScheduler+0xbc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003720:	2301      	movs	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e001      	b.n	800372a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d11b      	bne.n	8003768 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	613b      	str	r3, [r7, #16]
}
 8003742:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003744:	4b15      	ldr	r3, [pc, #84]	@ (800379c <vTaskStartScheduler+0xc0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	334c      	adds	r3, #76	@ 0x4c
 800374a:	4a15      	ldr	r2, [pc, #84]	@ (80037a0 <vTaskStartScheduler+0xc4>)
 800374c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800374e:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <vTaskStartScheduler+0xc8>)
 8003750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003754:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003756:	4b14      	ldr	r3, [pc, #80]	@ (80037a8 <vTaskStartScheduler+0xcc>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800375c:	4b13      	ldr	r3, [pc, #76]	@ (80037ac <vTaskStartScheduler+0xd0>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003762:	f000 fd75 	bl	8004250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003766:	e00f      	b.n	8003788 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800376e:	d10b      	bne.n	8003788 <vTaskStartScheduler+0xac>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	60fb      	str	r3, [r7, #12]
}
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <vTaskStartScheduler+0xa8>
}
 8003788:	bf00      	nop
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	08005394 	.word	0x08005394
 8003794:	08003d65 	.word	0x08003d65
 8003798:	200004dc 	.word	0x200004dc
 800379c:	200003b8 	.word	0x200003b8
 80037a0:	20000010 	.word	0x20000010
 80037a4:	200004d8 	.word	0x200004d8
 80037a8:	200004c4 	.word	0x200004c4
 80037ac:	200004bc 	.word	0x200004bc

080037b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037b4:	4b04      	ldr	r3, [pc, #16]	@ (80037c8 <vTaskSuspendAll+0x18>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	4a03      	ldr	r2, [pc, #12]	@ (80037c8 <vTaskSuspendAll+0x18>)
 80037bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037be:	bf00      	nop
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	200004e0 	.word	0x200004e0

080037cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037da:	4b42      	ldr	r3, [pc, #264]	@ (80038e4 <xTaskResumeAll+0x118>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <xTaskResumeAll+0x2e>
	__asm volatile
 80037e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	603b      	str	r3, [r7, #0]
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	e7fd      	b.n	80037f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037fa:	f000 fdcd 	bl	8004398 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037fe:	4b39      	ldr	r3, [pc, #228]	@ (80038e4 <xTaskResumeAll+0x118>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3b01      	subs	r3, #1
 8003804:	4a37      	ldr	r2, [pc, #220]	@ (80038e4 <xTaskResumeAll+0x118>)
 8003806:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003808:	4b36      	ldr	r3, [pc, #216]	@ (80038e4 <xTaskResumeAll+0x118>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d161      	bne.n	80038d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003810:	4b35      	ldr	r3, [pc, #212]	@ (80038e8 <xTaskResumeAll+0x11c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d05d      	beq.n	80038d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003818:	e02e      	b.n	8003878 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800381a:	4b34      	ldr	r3, [pc, #208]	@ (80038ec <xTaskResumeAll+0x120>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3318      	adds	r3, #24
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff f8e1 	bl	80029ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3304      	adds	r3, #4
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff f8dc 	bl	80029ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	2201      	movs	r2, #1
 800383c:	409a      	lsls	r2, r3
 800383e:	4b2c      	ldr	r3, [pc, #176]	@ (80038f0 <xTaskResumeAll+0x124>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	4a2a      	ldr	r2, [pc, #168]	@ (80038f0 <xTaskResumeAll+0x124>)
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4a27      	ldr	r2, [pc, #156]	@ (80038f4 <xTaskResumeAll+0x128>)
 8003856:	441a      	add	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f7ff f868 	bl	8002934 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003868:	4b23      	ldr	r3, [pc, #140]	@ (80038f8 <xTaskResumeAll+0x12c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003872:	4b22      	ldr	r3, [pc, #136]	@ (80038fc <xTaskResumeAll+0x130>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003878:	4b1c      	ldr	r3, [pc, #112]	@ (80038ec <xTaskResumeAll+0x120>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1cc      	bne.n	800381a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003886:	f000 fb29 	bl	8003edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800388a:	4b1d      	ldr	r3, [pc, #116]	@ (8003900 <xTaskResumeAll+0x134>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003896:	f000 f837 	bl	8003908 <xTaskIncrementTick>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80038a0:	4b16      	ldr	r3, [pc, #88]	@ (80038fc <xTaskResumeAll+0x130>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f1      	bne.n	8003896 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80038b2:	4b13      	ldr	r3, [pc, #76]	@ (8003900 <xTaskResumeAll+0x134>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038b8:	4b10      	ldr	r3, [pc, #64]	@ (80038fc <xTaskResumeAll+0x130>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003904 <xTaskResumeAll+0x138>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038d4:	f000 fd92 	bl	80043fc <vPortExitCritical>

	return xAlreadyYielded;
 80038d8:	68bb      	ldr	r3, [r7, #8]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200004e0 	.word	0x200004e0
 80038e8:	200004b8 	.word	0x200004b8
 80038ec:	20000478 	.word	0x20000478
 80038f0:	200004c0 	.word	0x200004c0
 80038f4:	200003bc 	.word	0x200003bc
 80038f8:	200003b8 	.word	0x200003b8
 80038fc:	200004cc 	.word	0x200004cc
 8003900:	200004c8 	.word	0x200004c8
 8003904:	e000ed04 	.word	0xe000ed04

08003908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003912:	4b4f      	ldr	r3, [pc, #316]	@ (8003a50 <xTaskIncrementTick+0x148>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 808f 	bne.w	8003a3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800391c:	4b4d      	ldr	r3, [pc, #308]	@ (8003a54 <xTaskIncrementTick+0x14c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003924:	4a4b      	ldr	r2, [pc, #300]	@ (8003a54 <xTaskIncrementTick+0x14c>)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d121      	bne.n	8003974 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003930:	4b49      	ldr	r3, [pc, #292]	@ (8003a58 <xTaskIncrementTick+0x150>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <xTaskIncrementTick+0x4a>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	603b      	str	r3, [r7, #0]
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	e7fd      	b.n	800394e <xTaskIncrementTick+0x46>
 8003952:	4b41      	ldr	r3, [pc, #260]	@ (8003a58 <xTaskIncrementTick+0x150>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	4b40      	ldr	r3, [pc, #256]	@ (8003a5c <xTaskIncrementTick+0x154>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a58 <xTaskIncrementTick+0x150>)
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4a3e      	ldr	r2, [pc, #248]	@ (8003a5c <xTaskIncrementTick+0x154>)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4b3e      	ldr	r3, [pc, #248]	@ (8003a60 <xTaskIncrementTick+0x158>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3301      	adds	r3, #1
 800396c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a60 <xTaskIncrementTick+0x158>)
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	f000 fab4 	bl	8003edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003974:	4b3b      	ldr	r3, [pc, #236]	@ (8003a64 <xTaskIncrementTick+0x15c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	429a      	cmp	r2, r3
 800397c:	d348      	bcc.n	8003a10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800397e:	4b36      	ldr	r3, [pc, #216]	@ (8003a58 <xTaskIncrementTick+0x150>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d104      	bne.n	8003992 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003988:	4b36      	ldr	r3, [pc, #216]	@ (8003a64 <xTaskIncrementTick+0x15c>)
 800398a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800398e:	601a      	str	r2, [r3, #0]
					break;
 8003990:	e03e      	b.n	8003a10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003992:	4b31      	ldr	r3, [pc, #196]	@ (8003a58 <xTaskIncrementTick+0x150>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d203      	bcs.n	80039b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003a64 <xTaskIncrementTick+0x15c>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039b0:	e02e      	b.n	8003a10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	3304      	adds	r3, #4
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff f819 	bl	80029ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	3318      	adds	r3, #24
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f810 	bl	80029ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d2:	2201      	movs	r2, #1
 80039d4:	409a      	lsls	r2, r3
 80039d6:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <xTaskIncrementTick+0x160>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	4a22      	ldr	r2, [pc, #136]	@ (8003a68 <xTaskIncrementTick+0x160>)
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4a1f      	ldr	r2, [pc, #124]	@ (8003a6c <xTaskIncrementTick+0x164>)
 80039ee:	441a      	add	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f7fe ff9c 	bl	8002934 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a00:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <xTaskIncrementTick+0x168>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3b9      	bcc.n	800397e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a0e:	e7b6      	b.n	800397e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a10:	4b17      	ldr	r3, [pc, #92]	@ (8003a70 <xTaskIncrementTick+0x168>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a16:	4915      	ldr	r1, [pc, #84]	@ (8003a6c <xTaskIncrementTick+0x164>)
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d901      	bls.n	8003a2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a2c:	4b11      	ldr	r3, [pc, #68]	@ (8003a74 <xTaskIncrementTick+0x16c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a34:	2301      	movs	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e004      	b.n	8003a44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <xTaskIncrementTick+0x170>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	4a0d      	ldr	r2, [pc, #52]	@ (8003a78 <xTaskIncrementTick+0x170>)
 8003a42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a44:	697b      	ldr	r3, [r7, #20]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200004e0 	.word	0x200004e0
 8003a54:	200004bc 	.word	0x200004bc
 8003a58:	20000470 	.word	0x20000470
 8003a5c:	20000474 	.word	0x20000474
 8003a60:	200004d0 	.word	0x200004d0
 8003a64:	200004d8 	.word	0x200004d8
 8003a68:	200004c0 	.word	0x200004c0
 8003a6c:	200003bc 	.word	0x200003bc
 8003a70:	200003b8 	.word	0x200003b8
 8003a74:	200004cc 	.word	0x200004cc
 8003a78:	200004c8 	.word	0x200004c8

08003a7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a82:	4b2a      	ldr	r3, [pc, #168]	@ (8003b2c <vTaskSwitchContext+0xb0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a8a:	4b29      	ldr	r3, [pc, #164]	@ (8003b30 <vTaskSwitchContext+0xb4>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a90:	e045      	b.n	8003b1e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003a92:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <vTaskSwitchContext+0xb4>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a98:	4b26      	ldr	r3, [pc, #152]	@ (8003b34 <vTaskSwitchContext+0xb8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003aa6:	7afb      	ldrb	r3, [r7, #11]
 8003aa8:	f1c3 031f 	rsb	r3, r3, #31
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	4922      	ldr	r1, [pc, #136]	@ (8003b38 <vTaskSwitchContext+0xbc>)
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <vTaskSwitchContext+0x5e>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	607b      	str	r3, [r7, #4]
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	e7fd      	b.n	8003ad6 <vTaskSwitchContext+0x5a>
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4a14      	ldr	r2, [pc, #80]	@ (8003b38 <vTaskSwitchContext+0xbc>)
 8003ae6:	4413      	add	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	3308      	adds	r3, #8
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d104      	bne.n	8003b0a <vTaskSwitchContext+0x8e>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a0a      	ldr	r2, [pc, #40]	@ (8003b3c <vTaskSwitchContext+0xc0>)
 8003b12:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b14:	4b09      	ldr	r3, [pc, #36]	@ (8003b3c <vTaskSwitchContext+0xc0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	334c      	adds	r3, #76	@ 0x4c
 8003b1a:	4a09      	ldr	r2, [pc, #36]	@ (8003b40 <vTaskSwitchContext+0xc4>)
 8003b1c:	6013      	str	r3, [r2, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	200004e0 	.word	0x200004e0
 8003b30:	200004cc 	.word	0x200004cc
 8003b34:	200004c0 	.word	0x200004c0
 8003b38:	200003bc 	.word	0x200003bc
 8003b3c:	200003b8 	.word	0x200003b8
 8003b40:	20000010 	.word	0x20000010

08003b44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	60fb      	str	r3, [r7, #12]
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	e7fd      	b.n	8003b68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <vTaskPlaceOnEventList+0x48>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3318      	adds	r3, #24
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fe ff01 	bl	800297c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	6838      	ldr	r0, [r7, #0]
 8003b7e:	f000 fa73 	bl	8004068 <prvAddCurrentTaskToDelayedList>
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200003b8 	.word	0x200003b8

08003b90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	60fb      	str	r3, [r7, #12]
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	e7fd      	b.n	8003bba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	3318      	adds	r3, #24
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe ff13 	bl	80029ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c40 <xTaskRemoveFromEventList+0xb0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d11c      	bne.n	8003c0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fe ff0a 	bl	80029ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bde:	2201      	movs	r2, #1
 8003be0:	409a      	lsls	r2, r3
 8003be2:	4b18      	ldr	r3, [pc, #96]	@ (8003c44 <xTaskRemoveFromEventList+0xb4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	4a16      	ldr	r2, [pc, #88]	@ (8003c44 <xTaskRemoveFromEventList+0xb4>)
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4a13      	ldr	r2, [pc, #76]	@ (8003c48 <xTaskRemoveFromEventList+0xb8>)
 8003bfa:	441a      	add	r2, r3
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f7fe fe96 	bl	8002934 <vListInsertEnd>
 8003c08:	e005      	b.n	8003c16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	3318      	adds	r3, #24
 8003c0e:	4619      	mov	r1, r3
 8003c10:	480e      	ldr	r0, [pc, #56]	@ (8003c4c <xTaskRemoveFromEventList+0xbc>)
 8003c12:	f7fe fe8f 	bl	8002934 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <xTaskRemoveFromEventList+0xc0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d905      	bls.n	8003c30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c28:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <xTaskRemoveFromEventList+0xc4>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e001      	b.n	8003c34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c34:	697b      	ldr	r3, [r7, #20]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200004e0 	.word	0x200004e0
 8003c44:	200004c0 	.word	0x200004c0
 8003c48:	200003bc 	.word	0x200003bc
 8003c4c:	20000478 	.word	0x20000478
 8003c50:	200003b8 	.word	0x200003b8
 8003c54:	200004cc 	.word	0x200004cc

08003c58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c60:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <vTaskInternalSetTimeOutState+0x24>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <vTaskInternalSetTimeOutState+0x28>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	605a      	str	r2, [r3, #4]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	200004d0 	.word	0x200004d0
 8003c80:	200004bc 	.word	0x200004bc

08003c84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	613b      	str	r3, [r7, #16]
}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	60fb      	str	r3, [r7, #12]
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	e7fd      	b.n	8003cc6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003cca:	f000 fb65 	bl	8004398 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cce:	4b1d      	ldr	r3, [pc, #116]	@ (8003d44 <xTaskCheckForTimeOut+0xc0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ce6:	d102      	bne.n	8003cee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	e023      	b.n	8003d36 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b15      	ldr	r3, [pc, #84]	@ (8003d48 <xTaskCheckForTimeOut+0xc4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d007      	beq.n	8003d0a <xTaskCheckForTimeOut+0x86>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d302      	bcc.n	8003d0a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e015      	b.n	8003d36 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d20b      	bcs.n	8003d2c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	1ad2      	subs	r2, r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff99 	bl	8003c58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	e004      	b.n	8003d36 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d32:	2301      	movs	r3, #1
 8003d34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d36:	f000 fb61 	bl	80043fc <vPortExitCritical>

	return xReturn;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	200004bc 	.word	0x200004bc
 8003d48:	200004d0 	.word	0x200004d0

08003d4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d50:	4b03      	ldr	r3, [pc, #12]	@ (8003d60 <vTaskMissedYield+0x14>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
}
 8003d56:	bf00      	nop
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	200004cc 	.word	0x200004cc

08003d64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d6c:	f000 f852 	bl	8003e14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d70:	4b06      	ldr	r3, [pc, #24]	@ (8003d8c <prvIdleTask+0x28>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d9f9      	bls.n	8003d6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d78:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <prvIdleTask+0x2c>)
 8003d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d88:	e7f0      	b.n	8003d6c <prvIdleTask+0x8>
 8003d8a:	bf00      	nop
 8003d8c:	200003bc 	.word	0x200003bc
 8003d90:	e000ed04 	.word	0xe000ed04

08003d94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	e00c      	b.n	8003dba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4a12      	ldr	r2, [pc, #72]	@ (8003df4 <prvInitialiseTaskLists+0x60>)
 8003dac:	4413      	add	r3, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fd93 	bl	80028da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3301      	adds	r3, #1
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	d9ef      	bls.n	8003da0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dc0:	480d      	ldr	r0, [pc, #52]	@ (8003df8 <prvInitialiseTaskLists+0x64>)
 8003dc2:	f7fe fd8a 	bl	80028da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dc6:	480d      	ldr	r0, [pc, #52]	@ (8003dfc <prvInitialiseTaskLists+0x68>)
 8003dc8:	f7fe fd87 	bl	80028da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dcc:	480c      	ldr	r0, [pc, #48]	@ (8003e00 <prvInitialiseTaskLists+0x6c>)
 8003dce:	f7fe fd84 	bl	80028da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dd2:	480c      	ldr	r0, [pc, #48]	@ (8003e04 <prvInitialiseTaskLists+0x70>)
 8003dd4:	f7fe fd81 	bl	80028da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003dd8:	480b      	ldr	r0, [pc, #44]	@ (8003e08 <prvInitialiseTaskLists+0x74>)
 8003dda:	f7fe fd7e 	bl	80028da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <prvInitialiseTaskLists+0x78>)
 8003de0:	4a05      	ldr	r2, [pc, #20]	@ (8003df8 <prvInitialiseTaskLists+0x64>)
 8003de2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <prvInitialiseTaskLists+0x7c>)
 8003de6:	4a05      	ldr	r2, [pc, #20]	@ (8003dfc <prvInitialiseTaskLists+0x68>)
 8003de8:	601a      	str	r2, [r3, #0]
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200003bc 	.word	0x200003bc
 8003df8:	20000448 	.word	0x20000448
 8003dfc:	2000045c 	.word	0x2000045c
 8003e00:	20000478 	.word	0x20000478
 8003e04:	2000048c 	.word	0x2000048c
 8003e08:	200004a4 	.word	0x200004a4
 8003e0c:	20000470 	.word	0x20000470
 8003e10:	20000474 	.word	0x20000474

08003e14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e1a:	e019      	b.n	8003e50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e1c:	f000 fabc 	bl	8004398 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <prvCheckTasksWaitingTermination+0x50>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fdde 	bl	80029ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <prvCheckTasksWaitingTermination+0x54>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	4a0b      	ldr	r2, [pc, #44]	@ (8003e68 <prvCheckTasksWaitingTermination+0x54>)
 8003e3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <prvCheckTasksWaitingTermination+0x58>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4a0a      	ldr	r2, [pc, #40]	@ (8003e6c <prvCheckTasksWaitingTermination+0x58>)
 8003e44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e46:	f000 fad9 	bl	80043fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f810 	bl	8003e70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e50:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <prvCheckTasksWaitingTermination+0x58>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e1      	bne.n	8003e1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	2000048c 	.word	0x2000048c
 8003e68:	200004b8 	.word	0x200004b8
 8003e6c:	200004a0 	.word	0x200004a0

08003e70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	334c      	adds	r3, #76	@ 0x4c
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fd81 	bl	8004984 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d108      	bne.n	8003e9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fc2f 	bl	80046f4 <vPortFree>
				vPortFree( pxTCB );
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fc2c 	bl	80046f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e9c:	e019      	b.n	8003ed2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d103      	bne.n	8003eb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fc23 	bl	80046f4 <vPortFree>
	}
 8003eae:	e010      	b.n	8003ed2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d00b      	beq.n	8003ed2 <prvDeleteTCB+0x62>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	60fb      	str	r3, [r7, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	e7fd      	b.n	8003ece <prvDeleteTCB+0x5e>
	}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f14 <prvResetNextTaskUnblockTime+0x38>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003eec:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <prvResetNextTaskUnblockTime+0x3c>)
 8003eee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ef4:	e008      	b.n	8003f08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef6:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <prvResetNextTaskUnblockTime+0x38>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4a04      	ldr	r2, [pc, #16]	@ (8003f18 <prvResetNextTaskUnblockTime+0x3c>)
 8003f06:	6013      	str	r3, [r2, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	20000470 	.word	0x20000470
 8003f18:	200004d8 	.word	0x200004d8

08003f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f22:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <xTaskGetSchedulerState+0x34>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	607b      	str	r3, [r7, #4]
 8003f2e:	e008      	b.n	8003f42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f30:	4b08      	ldr	r3, [pc, #32]	@ (8003f54 <xTaskGetSchedulerState+0x38>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	e001      	b.n	8003f42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f42:	687b      	ldr	r3, [r7, #4]
	}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	200004c4 	.word	0x200004c4
 8003f54:	200004e0 	.word	0x200004e0

08003f58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d070      	beq.n	8004050 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800405c <xTaskPriorityDisinherit+0x104>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d00b      	beq.n	8003f90 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	60fb      	str	r3, [r7, #12]
}
 8003f8a:	bf00      	nop
 8003f8c:	bf00      	nop
 8003f8e:	e7fd      	b.n	8003f8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	60bb      	str	r3, [r7, #8]
}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	e7fd      	b.n	8003fac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb4:	1e5a      	subs	r2, r3, #1
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d044      	beq.n	8004050 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d140      	bne.n	8004050 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fd0b 	bl	80029ee <uxListRemove>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d115      	bne.n	800400a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe2:	491f      	ldr	r1, [pc, #124]	@ (8004060 <xTaskPriorityDisinherit+0x108>)
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <xTaskPriorityDisinherit+0xb2>
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43da      	mvns	r2, r3
 8004000:	4b18      	ldr	r3, [pc, #96]	@ (8004064 <xTaskPriorityDisinherit+0x10c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4013      	ands	r3, r2
 8004006:	4a17      	ldr	r2, [pc, #92]	@ (8004064 <xTaskPriorityDisinherit+0x10c>)
 8004008:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004016:	f1c3 0207 	rsb	r2, r3, #7
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	2201      	movs	r2, #1
 8004024:	409a      	lsls	r2, r3
 8004026:	4b0f      	ldr	r3, [pc, #60]	@ (8004064 <xTaskPriorityDisinherit+0x10c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	4a0d      	ldr	r2, [pc, #52]	@ (8004064 <xTaskPriorityDisinherit+0x10c>)
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4a08      	ldr	r2, [pc, #32]	@ (8004060 <xTaskPriorityDisinherit+0x108>)
 800403e:	441a      	add	r2, r3
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f7fe fc74 	bl	8002934 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800404c:	2301      	movs	r3, #1
 800404e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004050:	697b      	ldr	r3, [r7, #20]
	}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200003b8 	.word	0x200003b8
 8004060:	200003bc 	.word	0x200003bc
 8004064:	200004c0 	.word	0x200004c0

08004068 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004072:	4b29      	ldr	r3, [pc, #164]	@ (8004118 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004078:	4b28      	ldr	r3, [pc, #160]	@ (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3304      	adds	r3, #4
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fcb5 	bl	80029ee <uxListRemove>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800408a:	4b24      	ldr	r3, [pc, #144]	@ (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	2201      	movs	r2, #1
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43da      	mvns	r2, r3
 8004098:	4b21      	ldr	r3, [pc, #132]	@ (8004120 <prvAddCurrentTaskToDelayedList+0xb8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4013      	ands	r3, r2
 800409e:	4a20      	ldr	r2, [pc, #128]	@ (8004120 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040a8:	d10a      	bne.n	80040c0 <prvAddCurrentTaskToDelayedList+0x58>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040b0:	4b1a      	ldr	r3, [pc, #104]	@ (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3304      	adds	r3, #4
 80040b6:	4619      	mov	r1, r3
 80040b8:	481a      	ldr	r0, [pc, #104]	@ (8004124 <prvAddCurrentTaskToDelayedList+0xbc>)
 80040ba:	f7fe fc3b 	bl	8002934 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040be:	e026      	b.n	800410e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040c8:	4b14      	ldr	r3, [pc, #80]	@ (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d209      	bcs.n	80040ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040d8:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <prvAddCurrentTaskToDelayedList+0xc0>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b0f      	ldr	r3, [pc, #60]	@ (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f7fe fc49 	bl	800297c <vListInsert>
}
 80040ea:	e010      	b.n	800410e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ec:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <prvAddCurrentTaskToDelayedList+0xc4>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3304      	adds	r3, #4
 80040f6:	4619      	mov	r1, r3
 80040f8:	4610      	mov	r0, r2
 80040fa:	f7fe fc3f 	bl	800297c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	429a      	cmp	r2, r3
 8004106:	d202      	bcs.n	800410e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004108:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xc8>)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6013      	str	r3, [r2, #0]
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	200004bc 	.word	0x200004bc
 800411c:	200003b8 	.word	0x200003b8
 8004120:	200004c0 	.word	0x200004c0
 8004124:	200004a4 	.word	0x200004a4
 8004128:	20000474 	.word	0x20000474
 800412c:	20000470 	.word	0x20000470
 8004130:	200004d8 	.word	0x200004d8

08004134 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3b04      	subs	r3, #4
 8004144:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800414c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b04      	subs	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f023 0201 	bic.w	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3b04      	subs	r3, #4
 8004162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004164:	4a0c      	ldr	r2, [pc, #48]	@ (8004198 <pxPortInitialiseStack+0x64>)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b14      	subs	r3, #20
 800416e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3b04      	subs	r3, #4
 800417a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f06f 0202 	mvn.w	r2, #2
 8004182:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3b20      	subs	r3, #32
 8004188:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	0800419d 	.word	0x0800419d

0800419c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041a6:	4b13      	ldr	r3, [pc, #76]	@ (80041f4 <prvTaskExitError+0x58>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041ae:	d00b      	beq.n	80041c8 <prvTaskExitError+0x2c>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60fb      	str	r3, [r7, #12]
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	e7fd      	b.n	80041c4 <prvTaskExitError+0x28>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	60bb      	str	r3, [r7, #8]
}
 80041da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041dc:	bf00      	nop
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0fc      	beq.n	80041de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	2000000c 	.word	0x2000000c
	...

08004200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004200:	4b07      	ldr	r3, [pc, #28]	@ (8004220 <pxCurrentTCBConst2>)
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	6808      	ldr	r0, [r1, #0]
 8004206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	f380 8809 	msr	PSP, r0
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8811 	msr	BASEPRI, r0
 800421a:	4770      	bx	lr
 800421c:	f3af 8000 	nop.w

08004220 <pxCurrentTCBConst2>:
 8004220:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop

08004228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004228:	4808      	ldr	r0, [pc, #32]	@ (800424c <prvPortStartFirstTask+0x24>)
 800422a:	6800      	ldr	r0, [r0, #0]
 800422c:	6800      	ldr	r0, [r0, #0]
 800422e:	f380 8808 	msr	MSP, r0
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8814 	msr	CONTROL, r0
 800423a:	b662      	cpsie	i
 800423c:	b661      	cpsie	f
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	df00      	svc	0
 8004248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800424a:	bf00      	nop
 800424c:	e000ed08 	.word	0xe000ed08

08004250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004256:	4b47      	ldr	r3, [pc, #284]	@ (8004374 <xPortStartScheduler+0x124>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a47      	ldr	r2, [pc, #284]	@ (8004378 <xPortStartScheduler+0x128>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10b      	bne.n	8004278 <xPortStartScheduler+0x28>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	613b      	str	r3, [r7, #16]
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004278:	4b3e      	ldr	r3, [pc, #248]	@ (8004374 <xPortStartScheduler+0x124>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a3f      	ldr	r2, [pc, #252]	@ (800437c <xPortStartScheduler+0x12c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10b      	bne.n	800429a <xPortStartScheduler+0x4a>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	60fb      	str	r3, [r7, #12]
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	e7fd      	b.n	8004296 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800429a:	4b39      	ldr	r3, [pc, #228]	@ (8004380 <xPortStartScheduler+0x130>)
 800429c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	22ff      	movs	r2, #255	@ 0xff
 80042aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	4b31      	ldr	r3, [pc, #196]	@ (8004384 <xPortStartScheduler+0x134>)
 80042c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042c2:	4b31      	ldr	r3, [pc, #196]	@ (8004388 <xPortStartScheduler+0x138>)
 80042c4:	2207      	movs	r2, #7
 80042c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042c8:	e009      	b.n	80042de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80042ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004388 <xPortStartScheduler+0x138>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004388 <xPortStartScheduler+0x138>)
 80042d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e6:	2b80      	cmp	r3, #128	@ 0x80
 80042e8:	d0ef      	beq.n	80042ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042ea:	4b27      	ldr	r3, [pc, #156]	@ (8004388 <xPortStartScheduler+0x138>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1c3 0307 	rsb	r3, r3, #7
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d00b      	beq.n	800430e <xPortStartScheduler+0xbe>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60bb      	str	r3, [r7, #8]
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800430e:	4b1e      	ldr	r3, [pc, #120]	@ (8004388 <xPortStartScheduler+0x138>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4a1c      	ldr	r2, [pc, #112]	@ (8004388 <xPortStartScheduler+0x138>)
 8004316:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004318:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <xPortStartScheduler+0x138>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004320:	4a19      	ldr	r2, [pc, #100]	@ (8004388 <xPortStartScheduler+0x138>)
 8004322:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	b2da      	uxtb	r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800432c:	4b17      	ldr	r3, [pc, #92]	@ (800438c <xPortStartScheduler+0x13c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a16      	ldr	r2, [pc, #88]	@ (800438c <xPortStartScheduler+0x13c>)
 8004332:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004336:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004338:	4b14      	ldr	r3, [pc, #80]	@ (800438c <xPortStartScheduler+0x13c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a13      	ldr	r2, [pc, #76]	@ (800438c <xPortStartScheduler+0x13c>)
 800433e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004342:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004344:	f000 f8da 	bl	80044fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004348:	4b11      	ldr	r3, [pc, #68]	@ (8004390 <xPortStartScheduler+0x140>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800434e:	f000 f8f9 	bl	8004544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004352:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <xPortStartScheduler+0x144>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a0f      	ldr	r2, [pc, #60]	@ (8004394 <xPortStartScheduler+0x144>)
 8004358:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800435c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800435e:	f7ff ff63 	bl	8004228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004362:	f7ff fb8b 	bl	8003a7c <vTaskSwitchContext>
	prvTaskExitError();
 8004366:	f7ff ff19 	bl	800419c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	e000ed00 	.word	0xe000ed00
 8004378:	410fc271 	.word	0x410fc271
 800437c:	410fc270 	.word	0x410fc270
 8004380:	e000e400 	.word	0xe000e400
 8004384:	200004e4 	.word	0x200004e4
 8004388:	200004e8 	.word	0x200004e8
 800438c:	e000ed20 	.word	0xe000ed20
 8004390:	2000000c 	.word	0x2000000c
 8004394:	e000ef34 	.word	0xe000ef34

08004398 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	607b      	str	r3, [r7, #4]
}
 80043b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043b2:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <vPortEnterCritical+0x5c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3301      	adds	r3, #1
 80043b8:	4a0e      	ldr	r2, [pc, #56]	@ (80043f4 <vPortEnterCritical+0x5c>)
 80043ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043bc:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <vPortEnterCritical+0x5c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d110      	bne.n	80043e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043c4:	4b0c      	ldr	r3, [pc, #48]	@ (80043f8 <vPortEnterCritical+0x60>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	603b      	str	r3, [r7, #0]
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	e7fd      	b.n	80043e2 <vPortEnterCritical+0x4a>
	}
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	2000000c 	.word	0x2000000c
 80043f8:	e000ed04 	.word	0xe000ed04

080043fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004402:	4b12      	ldr	r3, [pc, #72]	@ (800444c <vPortExitCritical+0x50>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10b      	bne.n	8004422 <vPortExitCritical+0x26>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	607b      	str	r3, [r7, #4]
}
 800441c:	bf00      	nop
 800441e:	bf00      	nop
 8004420:	e7fd      	b.n	800441e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004422:	4b0a      	ldr	r3, [pc, #40]	@ (800444c <vPortExitCritical+0x50>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3b01      	subs	r3, #1
 8004428:	4a08      	ldr	r2, [pc, #32]	@ (800444c <vPortExitCritical+0x50>)
 800442a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800442c:	4b07      	ldr	r3, [pc, #28]	@ (800444c <vPortExitCritical+0x50>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d105      	bne.n	8004440 <vPortExitCritical+0x44>
 8004434:	2300      	movs	r3, #0
 8004436:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800443e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	2000000c 	.word	0x2000000c

08004450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004450:	f3ef 8009 	mrs	r0, PSP
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4b15      	ldr	r3, [pc, #84]	@ (80044b0 <pxCurrentTCBConst>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	f01e 0f10 	tst.w	lr, #16
 8004460:	bf08      	it	eq
 8004462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446a:	6010      	str	r0, [r2, #0]
 800446c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004474:	f380 8811 	msr	BASEPRI, r0
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f7ff fafc 	bl	8003a7c <vTaskSwitchContext>
 8004484:	f04f 0000 	mov.w	r0, #0
 8004488:	f380 8811 	msr	BASEPRI, r0
 800448c:	bc09      	pop	{r0, r3}
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	6808      	ldr	r0, [r1, #0]
 8004492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004496:	f01e 0f10 	tst.w	lr, #16
 800449a:	bf08      	it	eq
 800449c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044a0:	f380 8809 	msr	PSP, r0
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	f3af 8000 	nop.w

080044b0 <pxCurrentTCBConst>:
 80044b0:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop

080044b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	607b      	str	r3, [r7, #4]
}
 80044d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044d2:	f7ff fa19 	bl	8003908 <xTaskIncrementTick>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044dc:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <SysTick_Handler+0x40>)
 80044de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	2300      	movs	r3, #0
 80044e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f383 8811 	msr	BASEPRI, r3
}
 80044ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004500:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <vPortSetupTimerInterrupt+0x38>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800450c:	4b0a      	ldr	r3, [pc, #40]	@ (8004538 <vPortSetupTimerInterrupt+0x3c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0a      	ldr	r2, [pc, #40]	@ (800453c <vPortSetupTimerInterrupt+0x40>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <vPortSetupTimerInterrupt+0x44>)
 800451a:	3b01      	subs	r3, #1
 800451c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800451e:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010
 8004534:	e000e018 	.word	0xe000e018
 8004538:	20000000 	.word	0x20000000
 800453c:	10624dd3 	.word	0x10624dd3
 8004540:	e000e014 	.word	0xe000e014

08004544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004554 <vPortEnableVFP+0x10>
 8004548:	6801      	ldr	r1, [r0, #0]
 800454a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800454e:	6001      	str	r1, [r0, #0]
 8004550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004552:	bf00      	nop
 8004554:	e000ed88 	.word	0xe000ed88

08004558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	@ 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004564:	f7ff f924 	bl	80037b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004568:	4b5c      	ldr	r3, [pc, #368]	@ (80046dc <pvPortMalloc+0x184>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004570:	f000 f924 	bl	80047bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004574:	4b5a      	ldr	r3, [pc, #360]	@ (80046e0 <pvPortMalloc+0x188>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 8095 	bne.w	80046ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01e      	beq.n	80045c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004588:	2208      	movs	r2, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	2b00      	cmp	r3, #0
 8004598:	d015      	beq.n	80045c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f023 0307 	bic.w	r3, r3, #7
 80045a0:	3308      	adds	r3, #8
 80045a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <pvPortMalloc+0x6e>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	617b      	str	r3, [r7, #20]
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d06f      	beq.n	80046ac <pvPortMalloc+0x154>
 80045cc:	4b45      	ldr	r3, [pc, #276]	@ (80046e4 <pvPortMalloc+0x18c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d86a      	bhi.n	80046ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045d6:	4b44      	ldr	r3, [pc, #272]	@ (80046e8 <pvPortMalloc+0x190>)
 80045d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045da:	4b43      	ldr	r3, [pc, #268]	@ (80046e8 <pvPortMalloc+0x190>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045e0:	e004      	b.n	80045ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d903      	bls.n	80045fe <pvPortMalloc+0xa6>
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f1      	bne.n	80045e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045fe:	4b37      	ldr	r3, [pc, #220]	@ (80046dc <pvPortMalloc+0x184>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004604:	429a      	cmp	r2, r3
 8004606:	d051      	beq.n	80046ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2208      	movs	r2, #8
 800460e:	4413      	add	r3, r2
 8004610:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	1ad2      	subs	r2, r2, r3
 8004622:	2308      	movs	r3, #8
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	429a      	cmp	r2, r3
 8004628:	d920      	bls.n	800466c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800462a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00b      	beq.n	8004654 <pvPortMalloc+0xfc>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	613b      	str	r3, [r7, #16]
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	e7fd      	b.n	8004650 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	1ad2      	subs	r2, r2, r3
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004666:	69b8      	ldr	r0, [r7, #24]
 8004668:	f000 f90a 	bl	8004880 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800466c:	4b1d      	ldr	r3, [pc, #116]	@ (80046e4 <pvPortMalloc+0x18c>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	4a1b      	ldr	r2, [pc, #108]	@ (80046e4 <pvPortMalloc+0x18c>)
 8004678:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800467a:	4b1a      	ldr	r3, [pc, #104]	@ (80046e4 <pvPortMalloc+0x18c>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <pvPortMalloc+0x194>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d203      	bcs.n	800468e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004686:	4b17      	ldr	r3, [pc, #92]	@ (80046e4 <pvPortMalloc+0x18c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <pvPortMalloc+0x194>)
 800468c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	4b13      	ldr	r3, [pc, #76]	@ (80046e0 <pvPortMalloc+0x188>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	431a      	orrs	r2, r3
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046a2:	4b13      	ldr	r3, [pc, #76]	@ (80046f0 <pvPortMalloc+0x198>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3301      	adds	r3, #1
 80046a8:	4a11      	ldr	r2, [pc, #68]	@ (80046f0 <pvPortMalloc+0x198>)
 80046aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046ac:	f7ff f88e 	bl	80037cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <pvPortMalloc+0x17a>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	60fb      	str	r3, [r7, #12]
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	e7fd      	b.n	80046ce <pvPortMalloc+0x176>
	return pvReturn;
 80046d2:	69fb      	ldr	r3, [r7, #28]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3728      	adds	r7, #40	@ 0x28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	200040f4 	.word	0x200040f4
 80046e0:	20004108 	.word	0x20004108
 80046e4:	200040f8 	.word	0x200040f8
 80046e8:	200040ec 	.word	0x200040ec
 80046ec:	200040fc 	.word	0x200040fc
 80046f0:	20004100 	.word	0x20004100

080046f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d04f      	beq.n	80047a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004706:	2308      	movs	r3, #8
 8004708:	425b      	negs	r3, r3
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4413      	add	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	4b25      	ldr	r3, [pc, #148]	@ (80047b0 <vPortFree+0xbc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4013      	ands	r3, r2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <vPortFree+0x46>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60fb      	str	r3, [r7, #12]
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <vPortFree+0x66>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60bb      	str	r3, [r7, #8]
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	e7fd      	b.n	8004756 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <vPortFree+0xbc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01e      	beq.n	80047a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d11a      	bne.n	80047a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <vPortFree+0xbc>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	43db      	mvns	r3, r3
 800477a:	401a      	ands	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004780:	f7ff f816 	bl	80037b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <vPortFree+0xc0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4413      	add	r3, r2
 800478e:	4a09      	ldr	r2, [pc, #36]	@ (80047b4 <vPortFree+0xc0>)
 8004790:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004792:	6938      	ldr	r0, [r7, #16]
 8004794:	f000 f874 	bl	8004880 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004798:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <vPortFree+0xc4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	4a06      	ldr	r2, [pc, #24]	@ (80047b8 <vPortFree+0xc4>)
 80047a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047a2:	f7ff f813 	bl	80037cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20004108 	.word	0x20004108
 80047b4:	200040f8 	.word	0x200040f8
 80047b8:	20004104 	.word	0x20004104

080047bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80047c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047c8:	4b27      	ldr	r3, [pc, #156]	@ (8004868 <prvHeapInit+0xac>)
 80047ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00c      	beq.n	80047f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3307      	adds	r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0307 	bic.w	r3, r3, #7
 80047e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004868 <prvHeapInit+0xac>)
 80047ec:	4413      	add	r3, r2
 80047ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047f4:	4a1d      	ldr	r2, [pc, #116]	@ (800486c <prvHeapInit+0xb0>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047fa:	4b1c      	ldr	r3, [pc, #112]	@ (800486c <prvHeapInit+0xb0>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4413      	add	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004808:	2208      	movs	r2, #8
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0307 	bic.w	r3, r3, #7
 8004816:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a15      	ldr	r2, [pc, #84]	@ (8004870 <prvHeapInit+0xb4>)
 800481c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800481e:	4b14      	ldr	r3, [pc, #80]	@ (8004870 <prvHeapInit+0xb4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004826:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <prvHeapInit+0xb4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	1ad2      	subs	r2, r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800483c:	4b0c      	ldr	r3, [pc, #48]	@ (8004870 <prvHeapInit+0xb4>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a0a      	ldr	r2, [pc, #40]	@ (8004874 <prvHeapInit+0xb8>)
 800484a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a09      	ldr	r2, [pc, #36]	@ (8004878 <prvHeapInit+0xbc>)
 8004852:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004854:	4b09      	ldr	r3, [pc, #36]	@ (800487c <prvHeapInit+0xc0>)
 8004856:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800485a:	601a      	str	r2, [r3, #0]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	200004ec 	.word	0x200004ec
 800486c:	200040ec 	.word	0x200040ec
 8004870:	200040f4 	.word	0x200040f4
 8004874:	200040fc 	.word	0x200040fc
 8004878:	200040f8 	.word	0x200040f8
 800487c:	20004108 	.word	0x20004108

08004880 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004888:	4b28      	ldr	r3, [pc, #160]	@ (800492c <prvInsertBlockIntoFreeList+0xac>)
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e002      	b.n	8004894 <prvInsertBlockIntoFreeList+0x14>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	429a      	cmp	r2, r3
 800489c:	d8f7      	bhi.n	800488e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	4413      	add	r3, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d108      	bne.n	80048c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	441a      	add	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	441a      	add	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d118      	bne.n	8004908 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b15      	ldr	r3, [pc, #84]	@ (8004930 <prvInsertBlockIntoFreeList+0xb0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d00d      	beq.n	80048fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	441a      	add	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e008      	b.n	8004910 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <prvInsertBlockIntoFreeList+0xb0>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e003      	b.n	8004910 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	d002      	beq.n	800491e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	200040ec 	.word	0x200040ec
 8004930:	200040f4 	.word	0x200040f4

08004934 <siprintf>:
 8004934:	b40e      	push	{r1, r2, r3}
 8004936:	b500      	push	{lr}
 8004938:	b09c      	sub	sp, #112	@ 0x70
 800493a:	ab1d      	add	r3, sp, #116	@ 0x74
 800493c:	9002      	str	r0, [sp, #8]
 800493e:	9006      	str	r0, [sp, #24]
 8004940:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004944:	4809      	ldr	r0, [pc, #36]	@ (800496c <siprintf+0x38>)
 8004946:	9107      	str	r1, [sp, #28]
 8004948:	9104      	str	r1, [sp, #16]
 800494a:	4909      	ldr	r1, [pc, #36]	@ (8004970 <siprintf+0x3c>)
 800494c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004950:	9105      	str	r1, [sp, #20]
 8004952:	6800      	ldr	r0, [r0, #0]
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	a902      	add	r1, sp, #8
 8004958:	f000 f9f8 	bl	8004d4c <_svfiprintf_r>
 800495c:	9b02      	ldr	r3, [sp, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	b01c      	add	sp, #112	@ 0x70
 8004964:	f85d eb04 	ldr.w	lr, [sp], #4
 8004968:	b003      	add	sp, #12
 800496a:	4770      	bx	lr
 800496c:	20000010 	.word	0x20000010
 8004970:	ffff0208 	.word	0xffff0208

08004974 <memset>:
 8004974:	4402      	add	r2, r0
 8004976:	4603      	mov	r3, r0
 8004978:	4293      	cmp	r3, r2
 800497a:	d100      	bne.n	800497e <memset+0xa>
 800497c:	4770      	bx	lr
 800497e:	f803 1b01 	strb.w	r1, [r3], #1
 8004982:	e7f9      	b.n	8004978 <memset+0x4>

08004984 <_reclaim_reent>:
 8004984:	4b29      	ldr	r3, [pc, #164]	@ (8004a2c <_reclaim_reent+0xa8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4283      	cmp	r3, r0
 800498a:	b570      	push	{r4, r5, r6, lr}
 800498c:	4604      	mov	r4, r0
 800498e:	d04b      	beq.n	8004a28 <_reclaim_reent+0xa4>
 8004990:	69c3      	ldr	r3, [r0, #28]
 8004992:	b1ab      	cbz	r3, 80049c0 <_reclaim_reent+0x3c>
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	b16b      	cbz	r3, 80049b4 <_reclaim_reent+0x30>
 8004998:	2500      	movs	r5, #0
 800499a:	69e3      	ldr	r3, [r4, #28]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	5959      	ldr	r1, [r3, r5]
 80049a0:	2900      	cmp	r1, #0
 80049a2:	d13b      	bne.n	8004a1c <_reclaim_reent+0x98>
 80049a4:	3504      	adds	r5, #4
 80049a6:	2d80      	cmp	r5, #128	@ 0x80
 80049a8:	d1f7      	bne.n	800499a <_reclaim_reent+0x16>
 80049aa:	69e3      	ldr	r3, [r4, #28]
 80049ac:	4620      	mov	r0, r4
 80049ae:	68d9      	ldr	r1, [r3, #12]
 80049b0:	f000 f878 	bl	8004aa4 <_free_r>
 80049b4:	69e3      	ldr	r3, [r4, #28]
 80049b6:	6819      	ldr	r1, [r3, #0]
 80049b8:	b111      	cbz	r1, 80049c0 <_reclaim_reent+0x3c>
 80049ba:	4620      	mov	r0, r4
 80049bc:	f000 f872 	bl	8004aa4 <_free_r>
 80049c0:	6961      	ldr	r1, [r4, #20]
 80049c2:	b111      	cbz	r1, 80049ca <_reclaim_reent+0x46>
 80049c4:	4620      	mov	r0, r4
 80049c6:	f000 f86d 	bl	8004aa4 <_free_r>
 80049ca:	69e1      	ldr	r1, [r4, #28]
 80049cc:	b111      	cbz	r1, 80049d4 <_reclaim_reent+0x50>
 80049ce:	4620      	mov	r0, r4
 80049d0:	f000 f868 	bl	8004aa4 <_free_r>
 80049d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80049d6:	b111      	cbz	r1, 80049de <_reclaim_reent+0x5a>
 80049d8:	4620      	mov	r0, r4
 80049da:	f000 f863 	bl	8004aa4 <_free_r>
 80049de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049e0:	b111      	cbz	r1, 80049e8 <_reclaim_reent+0x64>
 80049e2:	4620      	mov	r0, r4
 80049e4:	f000 f85e 	bl	8004aa4 <_free_r>
 80049e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80049ea:	b111      	cbz	r1, 80049f2 <_reclaim_reent+0x6e>
 80049ec:	4620      	mov	r0, r4
 80049ee:	f000 f859 	bl	8004aa4 <_free_r>
 80049f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80049f4:	b111      	cbz	r1, 80049fc <_reclaim_reent+0x78>
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 f854 	bl	8004aa4 <_free_r>
 80049fc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80049fe:	b111      	cbz	r1, 8004a06 <_reclaim_reent+0x82>
 8004a00:	4620      	mov	r0, r4
 8004a02:	f000 f84f 	bl	8004aa4 <_free_r>
 8004a06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004a08:	b111      	cbz	r1, 8004a10 <_reclaim_reent+0x8c>
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f000 f84a 	bl	8004aa4 <_free_r>
 8004a10:	6a23      	ldr	r3, [r4, #32]
 8004a12:	b14b      	cbz	r3, 8004a28 <_reclaim_reent+0xa4>
 8004a14:	4620      	mov	r0, r4
 8004a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a1a:	4718      	bx	r3
 8004a1c:	680e      	ldr	r6, [r1, #0]
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 f840 	bl	8004aa4 <_free_r>
 8004a24:	4631      	mov	r1, r6
 8004a26:	e7bb      	b.n	80049a0 <_reclaim_reent+0x1c>
 8004a28:	bd70      	pop	{r4, r5, r6, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000010 	.word	0x20000010

08004a30 <__errno>:
 8004a30:	4b01      	ldr	r3, [pc, #4]	@ (8004a38 <__errno+0x8>)
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000010 	.word	0x20000010

08004a3c <__libc_init_array>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8004a74 <__libc_init_array+0x38>)
 8004a40:	4c0d      	ldr	r4, [pc, #52]	@ (8004a78 <__libc_init_array+0x3c>)
 8004a42:	1b64      	subs	r4, r4, r5
 8004a44:	10a4      	asrs	r4, r4, #2
 8004a46:	2600      	movs	r6, #0
 8004a48:	42a6      	cmp	r6, r4
 8004a4a:	d109      	bne.n	8004a60 <__libc_init_array+0x24>
 8004a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a7c <__libc_init_array+0x40>)
 8004a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8004a80 <__libc_init_array+0x44>)
 8004a50:	f000 fc66 	bl	8005320 <_init>
 8004a54:	1b64      	subs	r4, r4, r5
 8004a56:	10a4      	asrs	r4, r4, #2
 8004a58:	2600      	movs	r6, #0
 8004a5a:	42a6      	cmp	r6, r4
 8004a5c:	d105      	bne.n	8004a6a <__libc_init_array+0x2e>
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
 8004a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a64:	4798      	blx	r3
 8004a66:	3601      	adds	r6, #1
 8004a68:	e7ee      	b.n	8004a48 <__libc_init_array+0xc>
 8004a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6e:	4798      	blx	r3
 8004a70:	3601      	adds	r6, #1
 8004a72:	e7f2      	b.n	8004a5a <__libc_init_array+0x1e>
 8004a74:	080053f0 	.word	0x080053f0
 8004a78:	080053f0 	.word	0x080053f0
 8004a7c:	080053f0 	.word	0x080053f0
 8004a80:	080053f4 	.word	0x080053f4

08004a84 <__retarget_lock_acquire_recursive>:
 8004a84:	4770      	bx	lr

08004a86 <__retarget_lock_release_recursive>:
 8004a86:	4770      	bx	lr

08004a88 <memcpy>:
 8004a88:	440a      	add	r2, r1
 8004a8a:	4291      	cmp	r1, r2
 8004a8c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004a90:	d100      	bne.n	8004a94 <memcpy+0xc>
 8004a92:	4770      	bx	lr
 8004a94:	b510      	push	{r4, lr}
 8004a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a9e:	4291      	cmp	r1, r2
 8004aa0:	d1f9      	bne.n	8004a96 <memcpy+0xe>
 8004aa2:	bd10      	pop	{r4, pc}

08004aa4 <_free_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	4605      	mov	r5, r0
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	d041      	beq.n	8004b30 <_free_r+0x8c>
 8004aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ab0:	1f0c      	subs	r4, r1, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	bfb8      	it	lt
 8004ab6:	18e4      	addlt	r4, r4, r3
 8004ab8:	f000 f8e0 	bl	8004c7c <__malloc_lock>
 8004abc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b34 <_free_r+0x90>)
 8004abe:	6813      	ldr	r3, [r2, #0]
 8004ac0:	b933      	cbnz	r3, 8004ad0 <_free_r+0x2c>
 8004ac2:	6063      	str	r3, [r4, #4]
 8004ac4:	6014      	str	r4, [r2, #0]
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004acc:	f000 b8dc 	b.w	8004c88 <__malloc_unlock>
 8004ad0:	42a3      	cmp	r3, r4
 8004ad2:	d908      	bls.n	8004ae6 <_free_r+0x42>
 8004ad4:	6820      	ldr	r0, [r4, #0]
 8004ad6:	1821      	adds	r1, r4, r0
 8004ad8:	428b      	cmp	r3, r1
 8004ada:	bf01      	itttt	eq
 8004adc:	6819      	ldreq	r1, [r3, #0]
 8004ade:	685b      	ldreq	r3, [r3, #4]
 8004ae0:	1809      	addeq	r1, r1, r0
 8004ae2:	6021      	streq	r1, [r4, #0]
 8004ae4:	e7ed      	b.n	8004ac2 <_free_r+0x1e>
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	b10b      	cbz	r3, 8004af0 <_free_r+0x4c>
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	d9fa      	bls.n	8004ae6 <_free_r+0x42>
 8004af0:	6811      	ldr	r1, [r2, #0]
 8004af2:	1850      	adds	r0, r2, r1
 8004af4:	42a0      	cmp	r0, r4
 8004af6:	d10b      	bne.n	8004b10 <_free_r+0x6c>
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	4401      	add	r1, r0
 8004afc:	1850      	adds	r0, r2, r1
 8004afe:	4283      	cmp	r3, r0
 8004b00:	6011      	str	r1, [r2, #0]
 8004b02:	d1e0      	bne.n	8004ac6 <_free_r+0x22>
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	6053      	str	r3, [r2, #4]
 8004b0a:	4408      	add	r0, r1
 8004b0c:	6010      	str	r0, [r2, #0]
 8004b0e:	e7da      	b.n	8004ac6 <_free_r+0x22>
 8004b10:	d902      	bls.n	8004b18 <_free_r+0x74>
 8004b12:	230c      	movs	r3, #12
 8004b14:	602b      	str	r3, [r5, #0]
 8004b16:	e7d6      	b.n	8004ac6 <_free_r+0x22>
 8004b18:	6820      	ldr	r0, [r4, #0]
 8004b1a:	1821      	adds	r1, r4, r0
 8004b1c:	428b      	cmp	r3, r1
 8004b1e:	bf04      	itt	eq
 8004b20:	6819      	ldreq	r1, [r3, #0]
 8004b22:	685b      	ldreq	r3, [r3, #4]
 8004b24:	6063      	str	r3, [r4, #4]
 8004b26:	bf04      	itt	eq
 8004b28:	1809      	addeq	r1, r1, r0
 8004b2a:	6021      	streq	r1, [r4, #0]
 8004b2c:	6054      	str	r4, [r2, #4]
 8004b2e:	e7ca      	b.n	8004ac6 <_free_r+0x22>
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	20004250 	.word	0x20004250

08004b38 <sbrk_aligned>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004b78 <sbrk_aligned+0x40>)
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	6831      	ldr	r1, [r6, #0]
 8004b40:	4605      	mov	r5, r0
 8004b42:	b911      	cbnz	r1, 8004b4a <sbrk_aligned+0x12>
 8004b44:	f000 fba6 	bl	8005294 <_sbrk_r>
 8004b48:	6030      	str	r0, [r6, #0]
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 fba1 	bl	8005294 <_sbrk_r>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	d103      	bne.n	8004b5e <sbrk_aligned+0x26>
 8004b56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
 8004b5e:	1cc4      	adds	r4, r0, #3
 8004b60:	f024 0403 	bic.w	r4, r4, #3
 8004b64:	42a0      	cmp	r0, r4
 8004b66:	d0f8      	beq.n	8004b5a <sbrk_aligned+0x22>
 8004b68:	1a21      	subs	r1, r4, r0
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 fb92 	bl	8005294 <_sbrk_r>
 8004b70:	3001      	adds	r0, #1
 8004b72:	d1f2      	bne.n	8004b5a <sbrk_aligned+0x22>
 8004b74:	e7ef      	b.n	8004b56 <sbrk_aligned+0x1e>
 8004b76:	bf00      	nop
 8004b78:	2000424c 	.word	0x2000424c

08004b7c <_malloc_r>:
 8004b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b80:	1ccd      	adds	r5, r1, #3
 8004b82:	f025 0503 	bic.w	r5, r5, #3
 8004b86:	3508      	adds	r5, #8
 8004b88:	2d0c      	cmp	r5, #12
 8004b8a:	bf38      	it	cc
 8004b8c:	250c      	movcc	r5, #12
 8004b8e:	2d00      	cmp	r5, #0
 8004b90:	4606      	mov	r6, r0
 8004b92:	db01      	blt.n	8004b98 <_malloc_r+0x1c>
 8004b94:	42a9      	cmp	r1, r5
 8004b96:	d904      	bls.n	8004ba2 <_malloc_r+0x26>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	6033      	str	r3, [r6, #0]
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c78 <_malloc_r+0xfc>
 8004ba6:	f000 f869 	bl	8004c7c <__malloc_lock>
 8004baa:	f8d8 3000 	ldr.w	r3, [r8]
 8004bae:	461c      	mov	r4, r3
 8004bb0:	bb44      	cbnz	r4, 8004c04 <_malloc_r+0x88>
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	f7ff ffbf 	bl	8004b38 <sbrk_aligned>
 8004bba:	1c43      	adds	r3, r0, #1
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	d158      	bne.n	8004c72 <_malloc_r+0xf6>
 8004bc0:	f8d8 4000 	ldr.w	r4, [r8]
 8004bc4:	4627      	mov	r7, r4
 8004bc6:	2f00      	cmp	r7, #0
 8004bc8:	d143      	bne.n	8004c52 <_malloc_r+0xd6>
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d04b      	beq.n	8004c66 <_malloc_r+0xea>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	eb04 0903 	add.w	r9, r4, r3
 8004bd8:	f000 fb5c 	bl	8005294 <_sbrk_r>
 8004bdc:	4581      	cmp	r9, r0
 8004bde:	d142      	bne.n	8004c66 <_malloc_r+0xea>
 8004be0:	6821      	ldr	r1, [r4, #0]
 8004be2:	1a6d      	subs	r5, r5, r1
 8004be4:	4629      	mov	r1, r5
 8004be6:	4630      	mov	r0, r6
 8004be8:	f7ff ffa6 	bl	8004b38 <sbrk_aligned>
 8004bec:	3001      	adds	r0, #1
 8004bee:	d03a      	beq.n	8004c66 <_malloc_r+0xea>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	442b      	add	r3, r5
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	bb62      	cbnz	r2, 8004c58 <_malloc_r+0xdc>
 8004bfe:	f8c8 7000 	str.w	r7, [r8]
 8004c02:	e00f      	b.n	8004c24 <_malloc_r+0xa8>
 8004c04:	6822      	ldr	r2, [r4, #0]
 8004c06:	1b52      	subs	r2, r2, r5
 8004c08:	d420      	bmi.n	8004c4c <_malloc_r+0xd0>
 8004c0a:	2a0b      	cmp	r2, #11
 8004c0c:	d917      	bls.n	8004c3e <_malloc_r+0xc2>
 8004c0e:	1961      	adds	r1, r4, r5
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	6025      	str	r5, [r4, #0]
 8004c14:	bf18      	it	ne
 8004c16:	6059      	strne	r1, [r3, #4]
 8004c18:	6863      	ldr	r3, [r4, #4]
 8004c1a:	bf08      	it	eq
 8004c1c:	f8c8 1000 	streq.w	r1, [r8]
 8004c20:	5162      	str	r2, [r4, r5]
 8004c22:	604b      	str	r3, [r1, #4]
 8004c24:	4630      	mov	r0, r6
 8004c26:	f000 f82f 	bl	8004c88 <__malloc_unlock>
 8004c2a:	f104 000b 	add.w	r0, r4, #11
 8004c2e:	1d23      	adds	r3, r4, #4
 8004c30:	f020 0007 	bic.w	r0, r0, #7
 8004c34:	1ac2      	subs	r2, r0, r3
 8004c36:	bf1c      	itt	ne
 8004c38:	1a1b      	subne	r3, r3, r0
 8004c3a:	50a3      	strne	r3, [r4, r2]
 8004c3c:	e7af      	b.n	8004b9e <_malloc_r+0x22>
 8004c3e:	6862      	ldr	r2, [r4, #4]
 8004c40:	42a3      	cmp	r3, r4
 8004c42:	bf0c      	ite	eq
 8004c44:	f8c8 2000 	streq.w	r2, [r8]
 8004c48:	605a      	strne	r2, [r3, #4]
 8004c4a:	e7eb      	b.n	8004c24 <_malloc_r+0xa8>
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	6864      	ldr	r4, [r4, #4]
 8004c50:	e7ae      	b.n	8004bb0 <_malloc_r+0x34>
 8004c52:	463c      	mov	r4, r7
 8004c54:	687f      	ldr	r7, [r7, #4]
 8004c56:	e7b6      	b.n	8004bc6 <_malloc_r+0x4a>
 8004c58:	461a      	mov	r2, r3
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	d1fb      	bne.n	8004c58 <_malloc_r+0xdc>
 8004c60:	2300      	movs	r3, #0
 8004c62:	6053      	str	r3, [r2, #4]
 8004c64:	e7de      	b.n	8004c24 <_malloc_r+0xa8>
 8004c66:	230c      	movs	r3, #12
 8004c68:	6033      	str	r3, [r6, #0]
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f000 f80c 	bl	8004c88 <__malloc_unlock>
 8004c70:	e794      	b.n	8004b9c <_malloc_r+0x20>
 8004c72:	6005      	str	r5, [r0, #0]
 8004c74:	e7d6      	b.n	8004c24 <_malloc_r+0xa8>
 8004c76:	bf00      	nop
 8004c78:	20004250 	.word	0x20004250

08004c7c <__malloc_lock>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	@ (8004c84 <__malloc_lock+0x8>)
 8004c7e:	f7ff bf01 	b.w	8004a84 <__retarget_lock_acquire_recursive>
 8004c82:	bf00      	nop
 8004c84:	20004248 	.word	0x20004248

08004c88 <__malloc_unlock>:
 8004c88:	4801      	ldr	r0, [pc, #4]	@ (8004c90 <__malloc_unlock+0x8>)
 8004c8a:	f7ff befc 	b.w	8004a86 <__retarget_lock_release_recursive>
 8004c8e:	bf00      	nop
 8004c90:	20004248 	.word	0x20004248

08004c94 <__ssputs_r>:
 8004c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c98:	688e      	ldr	r6, [r1, #8]
 8004c9a:	461f      	mov	r7, r3
 8004c9c:	42be      	cmp	r6, r7
 8004c9e:	680b      	ldr	r3, [r1, #0]
 8004ca0:	4682      	mov	sl, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	4690      	mov	r8, r2
 8004ca6:	d82d      	bhi.n	8004d04 <__ssputs_r+0x70>
 8004ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cb0:	d026      	beq.n	8004d00 <__ssputs_r+0x6c>
 8004cb2:	6965      	ldr	r5, [r4, #20]
 8004cb4:	6909      	ldr	r1, [r1, #16]
 8004cb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cba:	eba3 0901 	sub.w	r9, r3, r1
 8004cbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cc2:	1c7b      	adds	r3, r7, #1
 8004cc4:	444b      	add	r3, r9
 8004cc6:	106d      	asrs	r5, r5, #1
 8004cc8:	429d      	cmp	r5, r3
 8004cca:	bf38      	it	cc
 8004ccc:	461d      	movcc	r5, r3
 8004cce:	0553      	lsls	r3, r2, #21
 8004cd0:	d527      	bpl.n	8004d22 <__ssputs_r+0x8e>
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	f7ff ff52 	bl	8004b7c <_malloc_r>
 8004cd8:	4606      	mov	r6, r0
 8004cda:	b360      	cbz	r0, 8004d36 <__ssputs_r+0xa2>
 8004cdc:	6921      	ldr	r1, [r4, #16]
 8004cde:	464a      	mov	r2, r9
 8004ce0:	f7ff fed2 	bl	8004a88 <memcpy>
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cee:	81a3      	strh	r3, [r4, #12]
 8004cf0:	6126      	str	r6, [r4, #16]
 8004cf2:	6165      	str	r5, [r4, #20]
 8004cf4:	444e      	add	r6, r9
 8004cf6:	eba5 0509 	sub.w	r5, r5, r9
 8004cfa:	6026      	str	r6, [r4, #0]
 8004cfc:	60a5      	str	r5, [r4, #8]
 8004cfe:	463e      	mov	r6, r7
 8004d00:	42be      	cmp	r6, r7
 8004d02:	d900      	bls.n	8004d06 <__ssputs_r+0x72>
 8004d04:	463e      	mov	r6, r7
 8004d06:	6820      	ldr	r0, [r4, #0]
 8004d08:	4632      	mov	r2, r6
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	f000 faa8 	bl	8005260 <memmove>
 8004d10:	68a3      	ldr	r3, [r4, #8]
 8004d12:	1b9b      	subs	r3, r3, r6
 8004d14:	60a3      	str	r3, [r4, #8]
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	4433      	add	r3, r6
 8004d1a:	6023      	str	r3, [r4, #0]
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d22:	462a      	mov	r2, r5
 8004d24:	f000 fac6 	bl	80052b4 <_realloc_r>
 8004d28:	4606      	mov	r6, r0
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d1e0      	bne.n	8004cf0 <__ssputs_r+0x5c>
 8004d2e:	6921      	ldr	r1, [r4, #16]
 8004d30:	4650      	mov	r0, sl
 8004d32:	f7ff feb7 	bl	8004aa4 <_free_r>
 8004d36:	230c      	movs	r3, #12
 8004d38:	f8ca 3000 	str.w	r3, [sl]
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d42:	81a3      	strh	r3, [r4, #12]
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d48:	e7e9      	b.n	8004d1e <__ssputs_r+0x8a>
	...

08004d4c <_svfiprintf_r>:
 8004d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d50:	4698      	mov	r8, r3
 8004d52:	898b      	ldrh	r3, [r1, #12]
 8004d54:	061b      	lsls	r3, r3, #24
 8004d56:	b09d      	sub	sp, #116	@ 0x74
 8004d58:	4607      	mov	r7, r0
 8004d5a:	460d      	mov	r5, r1
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	d510      	bpl.n	8004d82 <_svfiprintf_r+0x36>
 8004d60:	690b      	ldr	r3, [r1, #16]
 8004d62:	b973      	cbnz	r3, 8004d82 <_svfiprintf_r+0x36>
 8004d64:	2140      	movs	r1, #64	@ 0x40
 8004d66:	f7ff ff09 	bl	8004b7c <_malloc_r>
 8004d6a:	6028      	str	r0, [r5, #0]
 8004d6c:	6128      	str	r0, [r5, #16]
 8004d6e:	b930      	cbnz	r0, 8004d7e <_svfiprintf_r+0x32>
 8004d70:	230c      	movs	r3, #12
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d78:	b01d      	add	sp, #116	@ 0x74
 8004d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7e:	2340      	movs	r3, #64	@ 0x40
 8004d80:	616b      	str	r3, [r5, #20]
 8004d82:	2300      	movs	r3, #0
 8004d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d86:	2320      	movs	r3, #32
 8004d88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d90:	2330      	movs	r3, #48	@ 0x30
 8004d92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f30 <_svfiprintf_r+0x1e4>
 8004d96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d9a:	f04f 0901 	mov.w	r9, #1
 8004d9e:	4623      	mov	r3, r4
 8004da0:	469a      	mov	sl, r3
 8004da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004da6:	b10a      	cbz	r2, 8004dac <_svfiprintf_r+0x60>
 8004da8:	2a25      	cmp	r2, #37	@ 0x25
 8004daa:	d1f9      	bne.n	8004da0 <_svfiprintf_r+0x54>
 8004dac:	ebba 0b04 	subs.w	fp, sl, r4
 8004db0:	d00b      	beq.n	8004dca <_svfiprintf_r+0x7e>
 8004db2:	465b      	mov	r3, fp
 8004db4:	4622      	mov	r2, r4
 8004db6:	4629      	mov	r1, r5
 8004db8:	4638      	mov	r0, r7
 8004dba:	f7ff ff6b 	bl	8004c94 <__ssputs_r>
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f000 80a7 	beq.w	8004f12 <_svfiprintf_r+0x1c6>
 8004dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dc6:	445a      	add	r2, fp
 8004dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dca:	f89a 3000 	ldrb.w	r3, [sl]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 809f 	beq.w	8004f12 <_svfiprintf_r+0x1c6>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dde:	f10a 0a01 	add.w	sl, sl, #1
 8004de2:	9304      	str	r3, [sp, #16]
 8004de4:	9307      	str	r3, [sp, #28]
 8004de6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dea:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dec:	4654      	mov	r4, sl
 8004dee:	2205      	movs	r2, #5
 8004df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df4:	484e      	ldr	r0, [pc, #312]	@ (8004f30 <_svfiprintf_r+0x1e4>)
 8004df6:	f7fb f9f3 	bl	80001e0 <memchr>
 8004dfa:	9a04      	ldr	r2, [sp, #16]
 8004dfc:	b9d8      	cbnz	r0, 8004e36 <_svfiprintf_r+0xea>
 8004dfe:	06d0      	lsls	r0, r2, #27
 8004e00:	bf44      	itt	mi
 8004e02:	2320      	movmi	r3, #32
 8004e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e08:	0711      	lsls	r1, r2, #28
 8004e0a:	bf44      	itt	mi
 8004e0c:	232b      	movmi	r3, #43	@ 0x2b
 8004e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e12:	f89a 3000 	ldrb.w	r3, [sl]
 8004e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e18:	d015      	beq.n	8004e46 <_svfiprintf_r+0xfa>
 8004e1a:	9a07      	ldr	r2, [sp, #28]
 8004e1c:	4654      	mov	r4, sl
 8004e1e:	2000      	movs	r0, #0
 8004e20:	f04f 0c0a 	mov.w	ip, #10
 8004e24:	4621      	mov	r1, r4
 8004e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e2a:	3b30      	subs	r3, #48	@ 0x30
 8004e2c:	2b09      	cmp	r3, #9
 8004e2e:	d94b      	bls.n	8004ec8 <_svfiprintf_r+0x17c>
 8004e30:	b1b0      	cbz	r0, 8004e60 <_svfiprintf_r+0x114>
 8004e32:	9207      	str	r2, [sp, #28]
 8004e34:	e014      	b.n	8004e60 <_svfiprintf_r+0x114>
 8004e36:	eba0 0308 	sub.w	r3, r0, r8
 8004e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	9304      	str	r3, [sp, #16]
 8004e42:	46a2      	mov	sl, r4
 8004e44:	e7d2      	b.n	8004dec <_svfiprintf_r+0xa0>
 8004e46:	9b03      	ldr	r3, [sp, #12]
 8004e48:	1d19      	adds	r1, r3, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	9103      	str	r1, [sp, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bfbb      	ittet	lt
 8004e52:	425b      	neglt	r3, r3
 8004e54:	f042 0202 	orrlt.w	r2, r2, #2
 8004e58:	9307      	strge	r3, [sp, #28]
 8004e5a:	9307      	strlt	r3, [sp, #28]
 8004e5c:	bfb8      	it	lt
 8004e5e:	9204      	strlt	r2, [sp, #16]
 8004e60:	7823      	ldrb	r3, [r4, #0]
 8004e62:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e64:	d10a      	bne.n	8004e7c <_svfiprintf_r+0x130>
 8004e66:	7863      	ldrb	r3, [r4, #1]
 8004e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e6a:	d132      	bne.n	8004ed2 <_svfiprintf_r+0x186>
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	1d1a      	adds	r2, r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	9203      	str	r2, [sp, #12]
 8004e74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e78:	3402      	adds	r4, #2
 8004e7a:	9305      	str	r3, [sp, #20]
 8004e7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f40 <_svfiprintf_r+0x1f4>
 8004e80:	7821      	ldrb	r1, [r4, #0]
 8004e82:	2203      	movs	r2, #3
 8004e84:	4650      	mov	r0, sl
 8004e86:	f7fb f9ab 	bl	80001e0 <memchr>
 8004e8a:	b138      	cbz	r0, 8004e9c <_svfiprintf_r+0x150>
 8004e8c:	9b04      	ldr	r3, [sp, #16]
 8004e8e:	eba0 000a 	sub.w	r0, r0, sl
 8004e92:	2240      	movs	r2, #64	@ 0x40
 8004e94:	4082      	lsls	r2, r0
 8004e96:	4313      	orrs	r3, r2
 8004e98:	3401      	adds	r4, #1
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea0:	4824      	ldr	r0, [pc, #144]	@ (8004f34 <_svfiprintf_r+0x1e8>)
 8004ea2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ea6:	2206      	movs	r2, #6
 8004ea8:	f7fb f99a 	bl	80001e0 <memchr>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d036      	beq.n	8004f1e <_svfiprintf_r+0x1d2>
 8004eb0:	4b21      	ldr	r3, [pc, #132]	@ (8004f38 <_svfiprintf_r+0x1ec>)
 8004eb2:	bb1b      	cbnz	r3, 8004efc <_svfiprintf_r+0x1b0>
 8004eb4:	9b03      	ldr	r3, [sp, #12]
 8004eb6:	3307      	adds	r3, #7
 8004eb8:	f023 0307 	bic.w	r3, r3, #7
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	9303      	str	r3, [sp, #12]
 8004ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec2:	4433      	add	r3, r6
 8004ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ec6:	e76a      	b.n	8004d9e <_svfiprintf_r+0x52>
 8004ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ecc:	460c      	mov	r4, r1
 8004ece:	2001      	movs	r0, #1
 8004ed0:	e7a8      	b.n	8004e24 <_svfiprintf_r+0xd8>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	3401      	adds	r4, #1
 8004ed6:	9305      	str	r3, [sp, #20]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f04f 0c0a 	mov.w	ip, #10
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ee4:	3a30      	subs	r2, #48	@ 0x30
 8004ee6:	2a09      	cmp	r2, #9
 8004ee8:	d903      	bls.n	8004ef2 <_svfiprintf_r+0x1a6>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0c6      	beq.n	8004e7c <_svfiprintf_r+0x130>
 8004eee:	9105      	str	r1, [sp, #20]
 8004ef0:	e7c4      	b.n	8004e7c <_svfiprintf_r+0x130>
 8004ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e7f0      	b.n	8004ede <_svfiprintf_r+0x192>
 8004efc:	ab03      	add	r3, sp, #12
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	462a      	mov	r2, r5
 8004f02:	4b0e      	ldr	r3, [pc, #56]	@ (8004f3c <_svfiprintf_r+0x1f0>)
 8004f04:	a904      	add	r1, sp, #16
 8004f06:	4638      	mov	r0, r7
 8004f08:	f3af 8000 	nop.w
 8004f0c:	1c42      	adds	r2, r0, #1
 8004f0e:	4606      	mov	r6, r0
 8004f10:	d1d6      	bne.n	8004ec0 <_svfiprintf_r+0x174>
 8004f12:	89ab      	ldrh	r3, [r5, #12]
 8004f14:	065b      	lsls	r3, r3, #25
 8004f16:	f53f af2d 	bmi.w	8004d74 <_svfiprintf_r+0x28>
 8004f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f1c:	e72c      	b.n	8004d78 <_svfiprintf_r+0x2c>
 8004f1e:	ab03      	add	r3, sp, #12
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	462a      	mov	r2, r5
 8004f24:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <_svfiprintf_r+0x1f0>)
 8004f26:	a904      	add	r1, sp, #16
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f000 f879 	bl	8005020 <_printf_i>
 8004f2e:	e7ed      	b.n	8004f0c <_svfiprintf_r+0x1c0>
 8004f30:	080053b4 	.word	0x080053b4
 8004f34:	080053be 	.word	0x080053be
 8004f38:	00000000 	.word	0x00000000
 8004f3c:	08004c95 	.word	0x08004c95
 8004f40:	080053ba 	.word	0x080053ba

08004f44 <_printf_common>:
 8004f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	4616      	mov	r6, r2
 8004f4a:	4698      	mov	r8, r3
 8004f4c:	688a      	ldr	r2, [r1, #8]
 8004f4e:	690b      	ldr	r3, [r1, #16]
 8004f50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f54:	4293      	cmp	r3, r2
 8004f56:	bfb8      	it	lt
 8004f58:	4613      	movlt	r3, r2
 8004f5a:	6033      	str	r3, [r6, #0]
 8004f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f60:	4607      	mov	r7, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	b10a      	cbz	r2, 8004f6a <_printf_common+0x26>
 8004f66:	3301      	adds	r3, #1
 8004f68:	6033      	str	r3, [r6, #0]
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	0699      	lsls	r1, r3, #26
 8004f6e:	bf42      	ittt	mi
 8004f70:	6833      	ldrmi	r3, [r6, #0]
 8004f72:	3302      	addmi	r3, #2
 8004f74:	6033      	strmi	r3, [r6, #0]
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	f015 0506 	ands.w	r5, r5, #6
 8004f7c:	d106      	bne.n	8004f8c <_printf_common+0x48>
 8004f7e:	f104 0a19 	add.w	sl, r4, #25
 8004f82:	68e3      	ldr	r3, [r4, #12]
 8004f84:	6832      	ldr	r2, [r6, #0]
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	42ab      	cmp	r3, r5
 8004f8a:	dc26      	bgt.n	8004fda <_printf_common+0x96>
 8004f8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f90:	6822      	ldr	r2, [r4, #0]
 8004f92:	3b00      	subs	r3, #0
 8004f94:	bf18      	it	ne
 8004f96:	2301      	movne	r3, #1
 8004f98:	0692      	lsls	r2, r2, #26
 8004f9a:	d42b      	bmi.n	8004ff4 <_printf_common+0xb0>
 8004f9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	47c8      	blx	r9
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d01e      	beq.n	8004fe8 <_printf_common+0xa4>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	6922      	ldr	r2, [r4, #16]
 8004fae:	f003 0306 	and.w	r3, r3, #6
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	bf02      	ittt	eq
 8004fb6:	68e5      	ldreq	r5, [r4, #12]
 8004fb8:	6833      	ldreq	r3, [r6, #0]
 8004fba:	1aed      	subeq	r5, r5, r3
 8004fbc:	68a3      	ldr	r3, [r4, #8]
 8004fbe:	bf0c      	ite	eq
 8004fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fc4:	2500      	movne	r5, #0
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	bfc4      	itt	gt
 8004fca:	1a9b      	subgt	r3, r3, r2
 8004fcc:	18ed      	addgt	r5, r5, r3
 8004fce:	2600      	movs	r6, #0
 8004fd0:	341a      	adds	r4, #26
 8004fd2:	42b5      	cmp	r5, r6
 8004fd4:	d11a      	bne.n	800500c <_printf_common+0xc8>
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e008      	b.n	8004fec <_printf_common+0xa8>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4652      	mov	r2, sl
 8004fde:	4641      	mov	r1, r8
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	47c8      	blx	r9
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d103      	bne.n	8004ff0 <_printf_common+0xac>
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff0:	3501      	adds	r5, #1
 8004ff2:	e7c6      	b.n	8004f82 <_printf_common+0x3e>
 8004ff4:	18e1      	adds	r1, r4, r3
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	2030      	movs	r0, #48	@ 0x30
 8004ffa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ffe:	4422      	add	r2, r4
 8005000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005004:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005008:	3302      	adds	r3, #2
 800500a:	e7c7      	b.n	8004f9c <_printf_common+0x58>
 800500c:	2301      	movs	r3, #1
 800500e:	4622      	mov	r2, r4
 8005010:	4641      	mov	r1, r8
 8005012:	4638      	mov	r0, r7
 8005014:	47c8      	blx	r9
 8005016:	3001      	adds	r0, #1
 8005018:	d0e6      	beq.n	8004fe8 <_printf_common+0xa4>
 800501a:	3601      	adds	r6, #1
 800501c:	e7d9      	b.n	8004fd2 <_printf_common+0x8e>
	...

08005020 <_printf_i>:
 8005020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	7e0f      	ldrb	r7, [r1, #24]
 8005026:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005028:	2f78      	cmp	r7, #120	@ 0x78
 800502a:	4691      	mov	r9, r2
 800502c:	4680      	mov	r8, r0
 800502e:	460c      	mov	r4, r1
 8005030:	469a      	mov	sl, r3
 8005032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005036:	d807      	bhi.n	8005048 <_printf_i+0x28>
 8005038:	2f62      	cmp	r7, #98	@ 0x62
 800503a:	d80a      	bhi.n	8005052 <_printf_i+0x32>
 800503c:	2f00      	cmp	r7, #0
 800503e:	f000 80d2 	beq.w	80051e6 <_printf_i+0x1c6>
 8005042:	2f58      	cmp	r7, #88	@ 0x58
 8005044:	f000 80b9 	beq.w	80051ba <_printf_i+0x19a>
 8005048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800504c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005050:	e03a      	b.n	80050c8 <_printf_i+0xa8>
 8005052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005056:	2b15      	cmp	r3, #21
 8005058:	d8f6      	bhi.n	8005048 <_printf_i+0x28>
 800505a:	a101      	add	r1, pc, #4	@ (adr r1, 8005060 <_printf_i+0x40>)
 800505c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005060:	080050b9 	.word	0x080050b9
 8005064:	080050cd 	.word	0x080050cd
 8005068:	08005049 	.word	0x08005049
 800506c:	08005049 	.word	0x08005049
 8005070:	08005049 	.word	0x08005049
 8005074:	08005049 	.word	0x08005049
 8005078:	080050cd 	.word	0x080050cd
 800507c:	08005049 	.word	0x08005049
 8005080:	08005049 	.word	0x08005049
 8005084:	08005049 	.word	0x08005049
 8005088:	08005049 	.word	0x08005049
 800508c:	080051cd 	.word	0x080051cd
 8005090:	080050f7 	.word	0x080050f7
 8005094:	08005187 	.word	0x08005187
 8005098:	08005049 	.word	0x08005049
 800509c:	08005049 	.word	0x08005049
 80050a0:	080051ef 	.word	0x080051ef
 80050a4:	08005049 	.word	0x08005049
 80050a8:	080050f7 	.word	0x080050f7
 80050ac:	08005049 	.word	0x08005049
 80050b0:	08005049 	.word	0x08005049
 80050b4:	0800518f 	.word	0x0800518f
 80050b8:	6833      	ldr	r3, [r6, #0]
 80050ba:	1d1a      	adds	r2, r3, #4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6032      	str	r2, [r6, #0]
 80050c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050c8:	2301      	movs	r3, #1
 80050ca:	e09d      	b.n	8005208 <_printf_i+0x1e8>
 80050cc:	6833      	ldr	r3, [r6, #0]
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	1d19      	adds	r1, r3, #4
 80050d2:	6031      	str	r1, [r6, #0]
 80050d4:	0606      	lsls	r6, r0, #24
 80050d6:	d501      	bpl.n	80050dc <_printf_i+0xbc>
 80050d8:	681d      	ldr	r5, [r3, #0]
 80050da:	e003      	b.n	80050e4 <_printf_i+0xc4>
 80050dc:	0645      	lsls	r5, r0, #25
 80050de:	d5fb      	bpl.n	80050d8 <_printf_i+0xb8>
 80050e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050e4:	2d00      	cmp	r5, #0
 80050e6:	da03      	bge.n	80050f0 <_printf_i+0xd0>
 80050e8:	232d      	movs	r3, #45	@ 0x2d
 80050ea:	426d      	negs	r5, r5
 80050ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050f0:	4859      	ldr	r0, [pc, #356]	@ (8005258 <_printf_i+0x238>)
 80050f2:	230a      	movs	r3, #10
 80050f4:	e011      	b.n	800511a <_printf_i+0xfa>
 80050f6:	6821      	ldr	r1, [r4, #0]
 80050f8:	6833      	ldr	r3, [r6, #0]
 80050fa:	0608      	lsls	r0, r1, #24
 80050fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005100:	d402      	bmi.n	8005108 <_printf_i+0xe8>
 8005102:	0649      	lsls	r1, r1, #25
 8005104:	bf48      	it	mi
 8005106:	b2ad      	uxthmi	r5, r5
 8005108:	2f6f      	cmp	r7, #111	@ 0x6f
 800510a:	4853      	ldr	r0, [pc, #332]	@ (8005258 <_printf_i+0x238>)
 800510c:	6033      	str	r3, [r6, #0]
 800510e:	bf14      	ite	ne
 8005110:	230a      	movne	r3, #10
 8005112:	2308      	moveq	r3, #8
 8005114:	2100      	movs	r1, #0
 8005116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800511a:	6866      	ldr	r6, [r4, #4]
 800511c:	60a6      	str	r6, [r4, #8]
 800511e:	2e00      	cmp	r6, #0
 8005120:	bfa2      	ittt	ge
 8005122:	6821      	ldrge	r1, [r4, #0]
 8005124:	f021 0104 	bicge.w	r1, r1, #4
 8005128:	6021      	strge	r1, [r4, #0]
 800512a:	b90d      	cbnz	r5, 8005130 <_printf_i+0x110>
 800512c:	2e00      	cmp	r6, #0
 800512e:	d04b      	beq.n	80051c8 <_printf_i+0x1a8>
 8005130:	4616      	mov	r6, r2
 8005132:	fbb5 f1f3 	udiv	r1, r5, r3
 8005136:	fb03 5711 	mls	r7, r3, r1, r5
 800513a:	5dc7      	ldrb	r7, [r0, r7]
 800513c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005140:	462f      	mov	r7, r5
 8005142:	42bb      	cmp	r3, r7
 8005144:	460d      	mov	r5, r1
 8005146:	d9f4      	bls.n	8005132 <_printf_i+0x112>
 8005148:	2b08      	cmp	r3, #8
 800514a:	d10b      	bne.n	8005164 <_printf_i+0x144>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	07df      	lsls	r7, r3, #31
 8005150:	d508      	bpl.n	8005164 <_printf_i+0x144>
 8005152:	6923      	ldr	r3, [r4, #16]
 8005154:	6861      	ldr	r1, [r4, #4]
 8005156:	4299      	cmp	r1, r3
 8005158:	bfde      	ittt	le
 800515a:	2330      	movle	r3, #48	@ 0x30
 800515c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005160:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005164:	1b92      	subs	r2, r2, r6
 8005166:	6122      	str	r2, [r4, #16]
 8005168:	f8cd a000 	str.w	sl, [sp]
 800516c:	464b      	mov	r3, r9
 800516e:	aa03      	add	r2, sp, #12
 8005170:	4621      	mov	r1, r4
 8005172:	4640      	mov	r0, r8
 8005174:	f7ff fee6 	bl	8004f44 <_printf_common>
 8005178:	3001      	adds	r0, #1
 800517a:	d14a      	bne.n	8005212 <_printf_i+0x1f2>
 800517c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005180:	b004      	add	sp, #16
 8005182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	f043 0320 	orr.w	r3, r3, #32
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	4833      	ldr	r0, [pc, #204]	@ (800525c <_printf_i+0x23c>)
 8005190:	2778      	movs	r7, #120	@ 0x78
 8005192:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	6831      	ldr	r1, [r6, #0]
 800519a:	061f      	lsls	r7, r3, #24
 800519c:	f851 5b04 	ldr.w	r5, [r1], #4
 80051a0:	d402      	bmi.n	80051a8 <_printf_i+0x188>
 80051a2:	065f      	lsls	r7, r3, #25
 80051a4:	bf48      	it	mi
 80051a6:	b2ad      	uxthmi	r5, r5
 80051a8:	6031      	str	r1, [r6, #0]
 80051aa:	07d9      	lsls	r1, r3, #31
 80051ac:	bf44      	itt	mi
 80051ae:	f043 0320 	orrmi.w	r3, r3, #32
 80051b2:	6023      	strmi	r3, [r4, #0]
 80051b4:	b11d      	cbz	r5, 80051be <_printf_i+0x19e>
 80051b6:	2310      	movs	r3, #16
 80051b8:	e7ac      	b.n	8005114 <_printf_i+0xf4>
 80051ba:	4827      	ldr	r0, [pc, #156]	@ (8005258 <_printf_i+0x238>)
 80051bc:	e7e9      	b.n	8005192 <_printf_i+0x172>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	f023 0320 	bic.w	r3, r3, #32
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	e7f6      	b.n	80051b6 <_printf_i+0x196>
 80051c8:	4616      	mov	r6, r2
 80051ca:	e7bd      	b.n	8005148 <_printf_i+0x128>
 80051cc:	6833      	ldr	r3, [r6, #0]
 80051ce:	6825      	ldr	r5, [r4, #0]
 80051d0:	6961      	ldr	r1, [r4, #20]
 80051d2:	1d18      	adds	r0, r3, #4
 80051d4:	6030      	str	r0, [r6, #0]
 80051d6:	062e      	lsls	r6, r5, #24
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	d501      	bpl.n	80051e0 <_printf_i+0x1c0>
 80051dc:	6019      	str	r1, [r3, #0]
 80051de:	e002      	b.n	80051e6 <_printf_i+0x1c6>
 80051e0:	0668      	lsls	r0, r5, #25
 80051e2:	d5fb      	bpl.n	80051dc <_printf_i+0x1bc>
 80051e4:	8019      	strh	r1, [r3, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	6123      	str	r3, [r4, #16]
 80051ea:	4616      	mov	r6, r2
 80051ec:	e7bc      	b.n	8005168 <_printf_i+0x148>
 80051ee:	6833      	ldr	r3, [r6, #0]
 80051f0:	1d1a      	adds	r2, r3, #4
 80051f2:	6032      	str	r2, [r6, #0]
 80051f4:	681e      	ldr	r6, [r3, #0]
 80051f6:	6862      	ldr	r2, [r4, #4]
 80051f8:	2100      	movs	r1, #0
 80051fa:	4630      	mov	r0, r6
 80051fc:	f7fa fff0 	bl	80001e0 <memchr>
 8005200:	b108      	cbz	r0, 8005206 <_printf_i+0x1e6>
 8005202:	1b80      	subs	r0, r0, r6
 8005204:	6060      	str	r0, [r4, #4]
 8005206:	6863      	ldr	r3, [r4, #4]
 8005208:	6123      	str	r3, [r4, #16]
 800520a:	2300      	movs	r3, #0
 800520c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005210:	e7aa      	b.n	8005168 <_printf_i+0x148>
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	4632      	mov	r2, r6
 8005216:	4649      	mov	r1, r9
 8005218:	4640      	mov	r0, r8
 800521a:	47d0      	blx	sl
 800521c:	3001      	adds	r0, #1
 800521e:	d0ad      	beq.n	800517c <_printf_i+0x15c>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	079b      	lsls	r3, r3, #30
 8005224:	d413      	bmi.n	800524e <_printf_i+0x22e>
 8005226:	68e0      	ldr	r0, [r4, #12]
 8005228:	9b03      	ldr	r3, [sp, #12]
 800522a:	4298      	cmp	r0, r3
 800522c:	bfb8      	it	lt
 800522e:	4618      	movlt	r0, r3
 8005230:	e7a6      	b.n	8005180 <_printf_i+0x160>
 8005232:	2301      	movs	r3, #1
 8005234:	4632      	mov	r2, r6
 8005236:	4649      	mov	r1, r9
 8005238:	4640      	mov	r0, r8
 800523a:	47d0      	blx	sl
 800523c:	3001      	adds	r0, #1
 800523e:	d09d      	beq.n	800517c <_printf_i+0x15c>
 8005240:	3501      	adds	r5, #1
 8005242:	68e3      	ldr	r3, [r4, #12]
 8005244:	9903      	ldr	r1, [sp, #12]
 8005246:	1a5b      	subs	r3, r3, r1
 8005248:	42ab      	cmp	r3, r5
 800524a:	dcf2      	bgt.n	8005232 <_printf_i+0x212>
 800524c:	e7eb      	b.n	8005226 <_printf_i+0x206>
 800524e:	2500      	movs	r5, #0
 8005250:	f104 0619 	add.w	r6, r4, #25
 8005254:	e7f5      	b.n	8005242 <_printf_i+0x222>
 8005256:	bf00      	nop
 8005258:	080053c5 	.word	0x080053c5
 800525c:	080053d6 	.word	0x080053d6

08005260 <memmove>:
 8005260:	4288      	cmp	r0, r1
 8005262:	b510      	push	{r4, lr}
 8005264:	eb01 0402 	add.w	r4, r1, r2
 8005268:	d902      	bls.n	8005270 <memmove+0x10>
 800526a:	4284      	cmp	r4, r0
 800526c:	4623      	mov	r3, r4
 800526e:	d807      	bhi.n	8005280 <memmove+0x20>
 8005270:	1e43      	subs	r3, r0, #1
 8005272:	42a1      	cmp	r1, r4
 8005274:	d008      	beq.n	8005288 <memmove+0x28>
 8005276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800527a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800527e:	e7f8      	b.n	8005272 <memmove+0x12>
 8005280:	4402      	add	r2, r0
 8005282:	4601      	mov	r1, r0
 8005284:	428a      	cmp	r2, r1
 8005286:	d100      	bne.n	800528a <memmove+0x2a>
 8005288:	bd10      	pop	{r4, pc}
 800528a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800528e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005292:	e7f7      	b.n	8005284 <memmove+0x24>

08005294 <_sbrk_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4d06      	ldr	r5, [pc, #24]	@ (80052b0 <_sbrk_r+0x1c>)
 8005298:	2300      	movs	r3, #0
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	602b      	str	r3, [r5, #0]
 80052a0:	f7fb fc30 	bl	8000b04 <_sbrk>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_sbrk_r+0x1a>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_sbrk_r+0x1a>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	20004244 	.word	0x20004244

080052b4 <_realloc_r>:
 80052b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b8:	4680      	mov	r8, r0
 80052ba:	4615      	mov	r5, r2
 80052bc:	460c      	mov	r4, r1
 80052be:	b921      	cbnz	r1, 80052ca <_realloc_r+0x16>
 80052c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052c4:	4611      	mov	r1, r2
 80052c6:	f7ff bc59 	b.w	8004b7c <_malloc_r>
 80052ca:	b92a      	cbnz	r2, 80052d8 <_realloc_r+0x24>
 80052cc:	f7ff fbea 	bl	8004aa4 <_free_r>
 80052d0:	2400      	movs	r4, #0
 80052d2:	4620      	mov	r0, r4
 80052d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d8:	f000 f81a 	bl	8005310 <_malloc_usable_size_r>
 80052dc:	4285      	cmp	r5, r0
 80052de:	4606      	mov	r6, r0
 80052e0:	d802      	bhi.n	80052e8 <_realloc_r+0x34>
 80052e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052e6:	d8f4      	bhi.n	80052d2 <_realloc_r+0x1e>
 80052e8:	4629      	mov	r1, r5
 80052ea:	4640      	mov	r0, r8
 80052ec:	f7ff fc46 	bl	8004b7c <_malloc_r>
 80052f0:	4607      	mov	r7, r0
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d0ec      	beq.n	80052d0 <_realloc_r+0x1c>
 80052f6:	42b5      	cmp	r5, r6
 80052f8:	462a      	mov	r2, r5
 80052fa:	4621      	mov	r1, r4
 80052fc:	bf28      	it	cs
 80052fe:	4632      	movcs	r2, r6
 8005300:	f7ff fbc2 	bl	8004a88 <memcpy>
 8005304:	4621      	mov	r1, r4
 8005306:	4640      	mov	r0, r8
 8005308:	f7ff fbcc 	bl	8004aa4 <_free_r>
 800530c:	463c      	mov	r4, r7
 800530e:	e7e0      	b.n	80052d2 <_realloc_r+0x1e>

08005310 <_malloc_usable_size_r>:
 8005310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005314:	1f18      	subs	r0, r3, #4
 8005316:	2b00      	cmp	r3, #0
 8005318:	bfbc      	itt	lt
 800531a:	580b      	ldrlt	r3, [r1, r0]
 800531c:	18c0      	addlt	r0, r0, r3
 800531e:	4770      	bx	lr

08005320 <_init>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr

0800532c <_fini>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr
