
LABEXAM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000430c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800449c  0800449c  0000549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800451c  0800451c  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  0800451c  0800451c  0000551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004524  08004524  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004524  08004524  00005524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004528  08004528  00005528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800452c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          000041a4  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004204  20004204  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e15  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a62  00000000  00000000  00016ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00019908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcb  00000000  00000000  0001a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002264d  00000000  00000000  0001b42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000106c4  00000000  00000000  0003da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1907  00000000  00000000  0004e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011fa43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004240  00000000  00000000  0011fa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00123cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004484 	.word	0x08004484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004484 	.word	0x08004484

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <vledblinkTask1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vledblinkTask1(void *pvParam)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    uint32_t pin = (uint32_t)pvParam;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	60fb      	str	r3, [r7, #12]
    portTickType xLastWakeupTime = xTaskGetTickCount();
 8000500:	f002 feb2 	bl	8003268 <xTaskGetTickCount>
 8000504:	4603      	mov	r3, r0
 8000506:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        HAL_GPIO_TogglePin(GPIOD, pin);
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	b29b      	uxth	r3, r3
 800050c:	4619      	mov	r1, r3
 800050e:	4806      	ldr	r0, [pc, #24]	@ (8000528 <vledblinkTask1+0x34>)
 8000510:	f000 fe3f 	bl	8001192 <HAL_GPIO_TogglePin>
        vTaskDelayUntil(&xLastWakeupTime, 2000 / portTICK_RATE_MS);
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800051c:	4618      	mov	r0, r3
 800051e:	f002 fcd7 	bl	8002ed0 <vTaskDelayUntil>
        HAL_GPIO_TogglePin(GPIOD, pin);
 8000522:	bf00      	nop
 8000524:	e7f0      	b.n	8000508 <vledblinkTask1+0x14>
 8000526:	bf00      	nop
 8000528:	40020c00 	.word	0x40020c00

0800052c <varrayinptTask2>:
    }
}

void varrayinptTask2(void *pvParam)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b08a      	sub	sp, #40	@ 0x28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    int msg[6] = {6, 2, 3, 4, 5, 6};
 8000534:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <varrayinptTask2+0x54>)
 8000536:	f107 040c 	add.w	r4, r7, #12
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000544:	e884 0003 	stmia.w	r4, {r0, r1}
    for(int i = 0; i < 6; i++)
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	@ 0x24
 800054c:	e00e      	b.n	800056c <varrayinptTask2+0x40>
    {
        xQueueSendToBack(xQueue, &msg[i], portMAX_DELAY);
 800054e:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <varrayinptTask2+0x58>)
 8000550:	6818      	ldr	r0, [r3, #0]
 8000552:	f107 020c 	add.w	r2, r7, #12
 8000556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	18d1      	adds	r1, r2, r3
 800055c:	2300      	movs	r3, #0
 800055e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000562:	f001 ff81 	bl	8002468 <xQueueGenericSend>
    for(int i = 0; i < 6; i++)
 8000566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000568:	3301      	adds	r3, #1
 800056a:	627b      	str	r3, [r7, #36]	@ 0x24
 800056c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056e:	2b05      	cmp	r3, #5
 8000570:	dded      	ble.n	800054e <varrayinptTask2+0x22>
    }
    vTaskDelete(NULL);
 8000572:	2000      	movs	r0, #0
 8000574:	f002 fc1c 	bl	8002db0 <vTaskDelete>
}
 8000578:	bf00      	nop
 800057a:	3728      	adds	r7, #40	@ 0x28
 800057c:	46bd      	mov	sp, r7
 800057e:	bdb0      	pop	{r4, r5, r7, pc}
 8000580:	0800449c 	.word	0x0800449c
 8000584:	20000320 	.word	0x20000320

08000588 <varrayreciveTask3>:

void varrayreciveTask3(void *pvParam)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	@ 0x30
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    int a;
    int arr[6];
    int r = 1;
 8000590:	2301      	movs	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
    if(xQueueReceive(xQueue, &a, portMAX_DELAY) == pdPASS)
 8000594:	4b21      	ldr	r3, [pc, #132]	@ (800061c <varrayreciveTask3+0x94>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800059c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 f863 	bl	800266c <xQueueReceive>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d127      	bne.n	80005fc <varrayreciveTask3+0x74>
    {
    arr[0] = a;
 80005ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ae:	613b      	str	r3, [r7, #16]
    for(int i = 1; i < 6; i++)
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005b4:	e01d      	b.n	80005f2 <varrayreciveTask3+0x6a>
        {
            if(xQueueReceive(xQueue, &arr[i], portMAX_DELAY) != pdPASS)
 80005b6:	4b19      	ldr	r3, [pc, #100]	@ (800061c <varrayreciveTask3+0x94>)
 80005b8:	6818      	ldr	r0, [r3, #0]
 80005ba:	f107 0210 	add.w	r2, r7, #16
 80005be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005c8:	4619      	mov	r1, r3
 80005ca:	f002 f84f 	bl	800266c <xQueueReceive>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d112      	bne.n	80005fa <varrayreciveTask3+0x72>
                break;
            if(arr[i] <= a)
 80005d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	3330      	adds	r3, #48	@ 0x30
 80005da:	443b      	add	r3, r7
 80005dc:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80005e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005e2:	429a      	cmp	r2, r3
 80005e4:	dc02      	bgt.n	80005ec <varrayreciveTask3+0x64>
                r++;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	3301      	adds	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
    for(int i = 1; i < 6; i++)
 80005ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ee:	3301      	adds	r3, #1
 80005f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	ddde      	ble.n	80005b6 <varrayreciveTask3+0x2e>
 80005f8:	e000      	b.n	80005fc <varrayreciveTask3+0x74>
                break;
 80005fa:	bf00      	nop
        }
    }
    xQueueSendToBack(xQueue, &r, portMAX_DELAY);
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <varrayreciveTask3+0x94>)
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	f107 010c 	add.w	r1, r7, #12
 8000604:	2300      	movs	r3, #0
 8000606:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800060a:	f001 ff2d 	bl	8002468 <xQueueGenericSend>
    vTaskDelete(NULL);
 800060e:	2000      	movs	r0, #0
 8000610:	f002 fbce 	bl	8002db0 <vTaskDelete>
}
 8000614:	bf00      	nop
 8000616:	3730      	adds	r7, #48	@ 0x30
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000320 	.word	0x20000320

08000620 <vrankTask4>:

void vrankTask4(void *pvParam)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    int rank;
    if(xQueueReceive(xQueue, &rank, portMAX_DELAY) == pdPASS)
 8000628:	4b4b      	ldr	r3, [pc, #300]	@ (8000758 <vrankTask4+0x138>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f107 010c 	add.w	r1, r7, #12
 8000630:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000634:	4618      	mov	r0, r3
 8000636:	f002 f819 	bl	800266c <xQueueReceive>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	f040 8083 	bne.w	8000748 <vrankTask4+0x128>
    {
    	if (rank == 1)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d112      	bne.n	800066e <vrankTask4+0x4e>
    	{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800064e:	4843      	ldr	r0, [pc, #268]	@ (800075c <vrankTask4+0x13c>)
 8000650:	f000 fd86 	bl	8001160 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065a:	4840      	ldr	r0, [pc, #256]	@ (800075c <vrankTask4+0x13c>)
 800065c:	f000 fd80 	bl	8001160 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000666:	483d      	ldr	r0, [pc, #244]	@ (800075c <vrankTask4+0x13c>)
 8000668:	f000 fd7a 	bl	8001160 <HAL_GPIO_WritePin>
 800066c:	e06c      	b.n	8000748 <vrankTask4+0x128>

    	}else if(rank == 2)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d112      	bne.n	800069a <vrankTask4+0x7a>
		{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800067a:	4838      	ldr	r0, [pc, #224]	@ (800075c <vrankTask4+0x13c>)
 800067c:	f000 fd70 	bl	8001160 <HAL_GPIO_WritePin>
    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000686:	4835      	ldr	r0, [pc, #212]	@ (800075c <vrankTask4+0x13c>)
 8000688:	f000 fd6a 	bl	8001160 <HAL_GPIO_WritePin>
    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000692:	4832      	ldr	r0, [pc, #200]	@ (800075c <vrankTask4+0x13c>)
 8000694:	f000 fd64 	bl	8001160 <HAL_GPIO_WritePin>
 8000698:	e056      	b.n	8000748 <vrankTask4+0x128>
		}else if(rank == 3)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d112      	bne.n	80006c6 <vrankTask4+0xa6>
    	{
    	    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a6:	482d      	ldr	r0, [pc, #180]	@ (800075c <vrankTask4+0x13c>)
 80006a8:	f000 fd5a 	bl	8001160 <HAL_GPIO_WritePin>
    	    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b2:	482a      	ldr	r0, [pc, #168]	@ (800075c <vrankTask4+0x13c>)
 80006b4:	f000 fd54 	bl	8001160 <HAL_GPIO_WritePin>
    	    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006be:	4827      	ldr	r0, [pc, #156]	@ (800075c <vrankTask4+0x13c>)
 80006c0:	f000 fd4e 	bl	8001160 <HAL_GPIO_WritePin>
 80006c4:	e040      	b.n	8000748 <vrankTask4+0x128>
    	}
		else if(rank == 4)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d112      	bne.n	80006f2 <vrankTask4+0xd2>
		    	{
		    	    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006d2:	4822      	ldr	r0, [pc, #136]	@ (800075c <vrankTask4+0x13c>)
 80006d4:	f000 fd44 	bl	8001160 <HAL_GPIO_WritePin>
		    	    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006de:	481f      	ldr	r0, [pc, #124]	@ (800075c <vrankTask4+0x13c>)
 80006e0:	f000 fd3e 	bl	8001160 <HAL_GPIO_WritePin>
		    	    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ea:	481c      	ldr	r0, [pc, #112]	@ (800075c <vrankTask4+0x13c>)
 80006ec:	f000 fd38 	bl	8001160 <HAL_GPIO_WritePin>
 80006f0:	e02a      	b.n	8000748 <vrankTask4+0x128>
		    	}
		else if(rank == 5)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b05      	cmp	r3, #5
 80006f6:	d112      	bne.n	800071e <vrankTask4+0xfe>
		    	{
		    	    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006fe:	4817      	ldr	r0, [pc, #92]	@ (800075c <vrankTask4+0x13c>)
 8000700:	f000 fd2e 	bl	8001160 <HAL_GPIO_WritePin>
		    	    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070a:	4814      	ldr	r0, [pc, #80]	@ (800075c <vrankTask4+0x13c>)
 800070c:	f000 fd28 	bl	8001160 <HAL_GPIO_WritePin>
		    	    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000716:	4811      	ldr	r0, [pc, #68]	@ (800075c <vrankTask4+0x13c>)
 8000718:	f000 fd22 	bl	8001160 <HAL_GPIO_WritePin>
 800071c:	e014      	b.n	8000748 <vrankTask4+0x128>
		    	}
		else if(rank == 6)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2b06      	cmp	r3, #6
 8000722:	d111      	bne.n	8000748 <vrankTask4+0x128>
		    	{
		    	    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072a:	480c      	ldr	r0, [pc, #48]	@ (800075c <vrankTask4+0x13c>)
 800072c:	f000 fd18 	bl	8001160 <HAL_GPIO_WritePin>
		    	    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000736:	4809      	ldr	r0, [pc, #36]	@ (800075c <vrankTask4+0x13c>)
 8000738:	f000 fd12 	bl	8001160 <HAL_GPIO_WritePin>
		    	    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000742:	4806      	ldr	r0, [pc, #24]	@ (800075c <vrankTask4+0x13c>)
 8000744:	f000 fd0c 	bl	8001160 <HAL_GPIO_WritePin>
		    	}

    }
    vTaskDelete(NULL);
 8000748:	2000      	movs	r0, #0
 800074a:	f002 fb31 	bl	8002db0 <vTaskDelete>
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000320 	.word	0x20000320
 800075c:	40020c00 	.word	0x40020c00

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fa3b 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f879 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 f8e1 	bl	8000934 <MX_GPIO_Init>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  xQueue = xQueueCreate(10, 4);
 8000772:	2200      	movs	r2, #0
 8000774:	2104      	movs	r1, #4
 8000776:	200a      	movs	r0, #10
 8000778:	f001 fe1c 	bl	80023b4 <xQueueGenericCreate>
 800077c:	4603      	mov	r3, r0
 800077e:	4a2d      	ldr	r2, [pc, #180]	@ (8000834 <main+0xd4>)
 8000780:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000782:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <main+0xd8>)
 8000784:	463c      	mov	r4, r7
 8000786:	461d      	mov	r5, r3
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000794:	463b      	mov	r3, r7
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fc8c 	bl	80020b6 <osThreadCreate>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a26      	ldr	r2, [pc, #152]	@ (800083c <main+0xdc>)
 80007a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xRet = xTaskCreate(vledblinkTask1, "Task1", 128, (void *)GPIO_PIN_15, 2, NULL);
 80007a4:	2300      	movs	r3, #0
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	2302      	movs	r3, #2
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007b0:	2280      	movs	r2, #128	@ 0x80
 80007b2:	4923      	ldr	r1, [pc, #140]	@ (8000840 <main+0xe0>)
 80007b4:	4823      	ldr	r0, [pc, #140]	@ (8000844 <main+0xe4>)
 80007b6:	f002 f9ab 	bl	8002b10 <xTaskCreate>
 80007ba:	61f8      	str	r0, [r7, #28]
    if(xRet != pdTRUE)
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d001      	beq.n	80007c6 <main+0x66>
      Error_Handler();
 80007c2:	f000 f905 	bl	80009d0 <Error_Handler>

    xRet = xTaskCreate(varrayinptTask2, "Task2", 128, NULL, 3, NULL);
 80007c6:	2300      	movs	r3, #0
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	2303      	movs	r3, #3
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2300      	movs	r3, #0
 80007d0:	2280      	movs	r2, #128	@ 0x80
 80007d2:	491d      	ldr	r1, [pc, #116]	@ (8000848 <main+0xe8>)
 80007d4:	481d      	ldr	r0, [pc, #116]	@ (800084c <main+0xec>)
 80007d6:	f002 f99b 	bl	8002b10 <xTaskCreate>
 80007da:	61f8      	str	r0, [r7, #28]
    if(xRet != pdTRUE)
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d001      	beq.n	80007e6 <main+0x86>
      Error_Handler();
 80007e2:	f000 f8f5 	bl	80009d0 <Error_Handler>

    xRet = xTaskCreate(varrayreciveTask3, "Task3", 128, NULL, 3, NULL);
 80007e6:	2300      	movs	r3, #0
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	2303      	movs	r3, #3
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2300      	movs	r3, #0
 80007f0:	2280      	movs	r2, #128	@ 0x80
 80007f2:	4917      	ldr	r1, [pc, #92]	@ (8000850 <main+0xf0>)
 80007f4:	4817      	ldr	r0, [pc, #92]	@ (8000854 <main+0xf4>)
 80007f6:	f002 f98b 	bl	8002b10 <xTaskCreate>
 80007fa:	61f8      	str	r0, [r7, #28]
    if(xRet != pdTRUE)
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d001      	beq.n	8000806 <main+0xa6>
      Error_Handler();
 8000802:	f000 f8e5 	bl	80009d0 <Error_Handler>

    xRet = xTaskCreate(vrankTask4, "Task4", 128, NULL, 3, NULL);
 8000806:	2300      	movs	r3, #0
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	2303      	movs	r3, #3
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2300      	movs	r3, #0
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	4911      	ldr	r1, [pc, #68]	@ (8000858 <main+0xf8>)
 8000814:	4811      	ldr	r0, [pc, #68]	@ (800085c <main+0xfc>)
 8000816:	f002 f97b 	bl	8002b10 <xTaskCreate>
 800081a:	61f8      	str	r0, [r7, #28]
    if(xRet != pdTRUE)
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d001      	beq.n	8000826 <main+0xc6>
      Error_Handler();
 8000822:	f000 f8d5 	bl	80009d0 <Error_Handler>


    vTaskStartScheduler();
 8000826:	f002 fc09 	bl	800303c <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800082a:	f001 fc3d 	bl	80020a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082e:	bf00      	nop
 8000830:	e7fd      	b.n	800082e <main+0xce>
 8000832:	bf00      	nop
 8000834:	20000320 	.word	0x20000320
 8000838:	080044e0 	.word	0x080044e0
 800083c:	2000031c 	.word	0x2000031c
 8000840:	080044b4 	.word	0x080044b4
 8000844:	080004f5 	.word	0x080004f5
 8000848:	080044bc 	.word	0x080044bc
 800084c:	0800052d 	.word	0x0800052d
 8000850:	080044c4 	.word	0x080044c4
 8000854:	08000589 	.word	0x08000589
 8000858:	080044cc 	.word	0x080044cc
 800085c:	08000621 	.word	0x08000621

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	@ 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2230      	movs	r2, #48	@ 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fd20 	bl	80042b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <SystemClock_Config+0xcc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	4a27      	ldr	r2, [pc, #156]	@ (800092c <SystemClock_Config+0xcc>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	@ 0x40
 8000894:	4b25      	ldr	r3, [pc, #148]	@ (800092c <SystemClock_Config+0xcc>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <SystemClock_Config+0xd0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a21      	ldr	r2, [pc, #132]	@ (8000930 <SystemClock_Config+0xd0>)
 80008aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <SystemClock_Config+0xd0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c0:	2301      	movs	r3, #1
 80008c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c4:	2310      	movs	r3, #16
 80008c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	2302      	movs	r3, #2
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008d0:	2308      	movs	r3, #8
 80008d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80008d4:	2332      	movs	r3, #50	@ 0x32
 80008d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008d8:	2304      	movs	r3, #4
 80008da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008dc:	2307      	movs	r3, #7
 80008de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fc6f 	bl	80011c8 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f0:	f000 f86e 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2302      	movs	r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000900:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000906:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800090a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fed0 	bl	80016b8 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800091e:	f000 f857 	bl	80009d0 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3750      	adds	r7, #80	@ 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_GPIO_Init+0x60>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000950:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <MX_GPIO_Init+0x60>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6313      	str	r3, [r2, #48]	@ 0x30
 8000958:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_GPIO_Init+0x60>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800096a:	480b      	ldr	r0, [pc, #44]	@ (8000998 <MX_GPIO_Init+0x64>)
 800096c:	f000 fbf8 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000970:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000974:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4804      	ldr	r0, [pc, #16]	@ (8000998 <MX_GPIO_Init+0x64>)
 8000988:	f000 fa4e 	bl	8000e28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40020c00 	.word	0x40020c00

0800099c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f001 fbd2 	bl	800214e <osDelay>
 80009aa:	e7fb      	b.n	80009a4 <StartDefaultTask+0x8>

080009ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009be:	f000 f931 	bl	8000c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010000 	.word	0x40010000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <Error_Handler+0x8>

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_MspInit+0x54>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	4a11      	ldr	r2, [pc, #68]	@ (8000a30 <HAL_MspInit+0x54>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_MspInit+0x54>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <HAL_MspInit+0x54>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <HAL_MspInit+0x54>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <HAL_MspInit+0x54>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	210f      	movs	r1, #15
 8000a1e:	f06f 0001 	mvn.w	r0, #1
 8000a22:	f000 f9d7 	bl	8000dd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	@ 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	4b2f      	ldr	r3, [pc, #188]	@ (8000b08 <HAL_InitTick+0xd4>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b08 <HAL_InitTick+0xd4>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a54:	4b2c      	ldr	r3, [pc, #176]	@ (8000b08 <HAL_InitTick+0xd4>)
 8000a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a60:	f107 020c 	add.w	r2, r7, #12
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f830 	bl	8001ad0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a70:	f001 f81a 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8000a74:	4603      	mov	r3, r0
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a7c:	4a23      	ldr	r2, [pc, #140]	@ (8000b0c <HAL_InitTick+0xd8>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0c9b      	lsrs	r3, r3, #18
 8000a84:	3b01      	subs	r3, #1
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a88:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <HAL_InitTick+0xdc>)
 8000a8a:	4a22      	ldr	r2, [pc, #136]	@ (8000b14 <HAL_InitTick+0xe0>)
 8000a8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <HAL_InitTick+0xdc>)
 8000a90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a96:	4a1e      	ldr	r2, [pc, #120]	@ (8000b10 <HAL_InitTick+0xdc>)
 8000a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <HAL_InitTick+0xdc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <HAL_InitTick+0xdc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <HAL_InitTick+0xdc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000aae:	4818      	ldr	r0, [pc, #96]	@ (8000b10 <HAL_InitTick+0xdc>)
 8000ab0:	f001 f840 	bl	8001b34 <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d11b      	bne.n	8000afa <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ac2:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <HAL_InitTick+0xdc>)
 8000ac4:	f001 f890 	bl	8001be8 <HAL_TIM_Base_Start_IT>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ace:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d111      	bne.n	8000afa <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ad6:	2019      	movs	r0, #25
 8000ad8:	f000 f998 	bl	8000e0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	d808      	bhi.n	8000af4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	2019      	movs	r0, #25
 8000ae8:	f000 f974 	bl	8000dd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aec:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <HAL_InitTick+0xe4>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e002      	b.n	8000afa <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000afa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3730      	adds	r7, #48	@ 0x30
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	431bde83 	.word	0x431bde83
 8000b10:	20000324 	.word	0x20000324
 8000b14:	40010000 	.word	0x40010000
 8000b18:	20000004 	.word	0x20000004

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b5a:	f001 f8b5 	bl	8001cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000324 	.word	0x20000324

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f003 fbd9 	bl	8004370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fdcf 	bl	8000760 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bd0:	0800452c 	.word	0x0800452c
  ldr r2, =_sbss
 8000bd4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bd8:	20004204 	.word	0x20004204

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f8d8 	bl	8000dbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f7ff ff10 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fee2 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	2000036c 	.word	0x2000036c

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	2000036c 	.word	0x2000036c

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	@ (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	@ (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	@ (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	@ 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff4c 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de6:	f7ff ff61 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000dea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	6978      	ldr	r0, [r7, #20]
 8000df2:	f7ff ffb1 	bl	8000d58 <NVIC_EncodePriority>
 8000df6:	4602      	mov	r2, r0
 8000df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff80 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff54 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	e16b      	b.n	800111c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	f040 815a 	bne.w	8001116 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d005      	beq.n	8000e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d130      	bne.n	8000edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	f003 0201 	and.w	r2, r3, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d017      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d123      	bne.n	8000f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	69b9      	ldr	r1, [r7, #24]
 8000f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0203 	and.w	r2, r3, #3
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 80b4 	beq.w	8001116 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b60      	ldr	r3, [pc, #384]	@ (8001134 <HAL_GPIO_Init+0x30c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8001134 <HAL_GPIO_Init+0x30c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001134 <HAL_GPIO_Init+0x30c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fca:	4a5b      	ldr	r2, [pc, #364]	@ (8001138 <HAL_GPIO_Init+0x310>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a52      	ldr	r2, [pc, #328]	@ (800113c <HAL_GPIO_Init+0x314>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d02b      	beq.n	800104e <HAL_GPIO_Init+0x226>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a51      	ldr	r2, [pc, #324]	@ (8001140 <HAL_GPIO_Init+0x318>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x222>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a50      	ldr	r2, [pc, #320]	@ (8001144 <HAL_GPIO_Init+0x31c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x21e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4f      	ldr	r2, [pc, #316]	@ (8001148 <HAL_GPIO_Init+0x320>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x21a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4e      	ldr	r2, [pc, #312]	@ (800114c <HAL_GPIO_Init+0x324>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x216>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4d      	ldr	r2, [pc, #308]	@ (8001150 <HAL_GPIO_Init+0x328>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x212>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4c      	ldr	r2, [pc, #304]	@ (8001154 <HAL_GPIO_Init+0x32c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x20e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4b      	ldr	r2, [pc, #300]	@ (8001158 <HAL_GPIO_Init+0x330>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x20a>
 800102e:	2307      	movs	r3, #7
 8001030:	e00e      	b.n	8001050 <HAL_GPIO_Init+0x228>
 8001032:	2308      	movs	r3, #8
 8001034:	e00c      	b.n	8001050 <HAL_GPIO_Init+0x228>
 8001036:	2306      	movs	r3, #6
 8001038:	e00a      	b.n	8001050 <HAL_GPIO_Init+0x228>
 800103a:	2305      	movs	r3, #5
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x228>
 800103e:	2304      	movs	r3, #4
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x228>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x228>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x228>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x228>
 800104e:	2300      	movs	r3, #0
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001060:	4935      	ldr	r1, [pc, #212]	@ (8001138 <HAL_GPIO_Init+0x310>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106e:	4b3b      	ldr	r3, [pc, #236]	@ (800115c <HAL_GPIO_Init+0x334>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001092:	4a32      	ldr	r2, [pc, #200]	@ (800115c <HAL_GPIO_Init+0x334>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001098:	4b30      	ldr	r3, [pc, #192]	@ (800115c <HAL_GPIO_Init+0x334>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010bc:	4a27      	ldr	r2, [pc, #156]	@ (800115c <HAL_GPIO_Init+0x334>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <HAL_GPIO_Init+0x334>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e6:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <HAL_GPIO_Init+0x334>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_GPIO_Init+0x334>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001110:	4a12      	ldr	r2, [pc, #72]	@ (800115c <HAL_GPIO_Init+0x334>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	f67f ae90 	bls.w	8000e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40013800 	.word	0x40013800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40021400 	.word	0x40021400
 8001154:	40021800 	.word	0x40021800
 8001158:	40021c00 	.word	0x40021c00
 800115c:	40013c00 	.word	0x40013c00

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800117c:	e003      	b.n	8001186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	619a      	str	r2, [r3, #24]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	041a      	lsls	r2, r3, #16
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	400b      	ands	r3, r1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e267      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d075      	beq.n	80012d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e6:	4b88      	ldr	r3, [pc, #544]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d00c      	beq.n	800120c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f2:	4b85      	ldr	r3, [pc, #532]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d112      	bne.n	8001224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fe:	4b82      	ldr	r3, [pc, #520]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001206:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800120a:	d10b      	bne.n	8001224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	4b7e      	ldr	r3, [pc, #504]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d05b      	beq.n	80012d0 <HAL_RCC_OscConfig+0x108>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d157      	bne.n	80012d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e242      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800122c:	d106      	bne.n	800123c <HAL_RCC_OscConfig+0x74>
 800122e:	4b76      	ldr	r3, [pc, #472]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a75      	ldr	r2, [pc, #468]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e01d      	b.n	8001278 <HAL_RCC_OscConfig+0xb0>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x98>
 8001246:	4b70      	ldr	r3, [pc, #448]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a6f      	ldr	r2, [pc, #444]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b6d      	ldr	r3, [pc, #436]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a6c      	ldr	r2, [pc, #432]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e00b      	b.n	8001278 <HAL_RCC_OscConfig+0xb0>
 8001260:	4b69      	ldr	r3, [pc, #420]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a68      	ldr	r2, [pc, #416]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b66      	ldr	r3, [pc, #408]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a65      	ldr	r2, [pc, #404]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d013      	beq.n	80012a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fce4 	bl	8000c4c <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fce0 	bl	8000c4c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	@ 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e207      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b5b      	ldr	r3, [pc, #364]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0xc0>
 80012a6:	e014      	b.n	80012d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fcd0 	bl	8000c4c <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fccc 	bl	8000c4c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	@ 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1f3      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0xe8>
 80012ce:	e000      	b.n	80012d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d063      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012de:	4b4a      	ldr	r3, [pc, #296]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ea:	4b47      	ldr	r3, [pc, #284]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d11c      	bne.n	8001330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f6:	4b44      	ldr	r3, [pc, #272]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d116      	bne.n	8001330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	4b41      	ldr	r3, [pc, #260]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x152>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e1c7      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	4b3b      	ldr	r3, [pc, #236]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4937      	ldr	r1, [pc, #220]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	e03a      	b.n	80013a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d020      	beq.n	800137a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001338:	4b34      	ldr	r3, [pc, #208]	@ (800140c <HAL_RCC_OscConfig+0x244>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff fc85 	bl	8000c4c <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff fc81 	bl	8000c4c <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1a8      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4925      	ldr	r1, [pc, #148]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
 8001378:	e015      	b.n	80013a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137a:	4b24      	ldr	r3, [pc, #144]	@ (800140c <HAL_RCC_OscConfig+0x244>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fc64 	bl	8000c4c <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fc60 	bl	8000c4c <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e187      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d036      	beq.n	8001420 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d016      	beq.n	80013e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_RCC_OscConfig+0x248>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c0:	f7ff fc44 	bl	8000c4c <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc40 	bl	8000c4c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e167      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_RCC_OscConfig+0x240>)
 80013dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x200>
 80013e6:	e01b      	b.n	8001420 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_RCC_OscConfig+0x248>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fc2d 	bl	8000c4c <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	e00e      	b.n	8001414 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f6:	f7ff fc29 	bl	8000c4c <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d907      	bls.n	8001414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e150      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
 8001408:	40023800 	.word	0x40023800
 800140c:	42470000 	.word	0x42470000
 8001410:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001414:	4b88      	ldr	r3, [pc, #544]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1ea      	bne.n	80013f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 8097 	beq.w	800155c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001432:	4b81      	ldr	r3, [pc, #516]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10f      	bne.n	800145e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b7d      	ldr	r3, [pc, #500]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	4a7c      	ldr	r2, [pc, #496]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	@ 0x40
 800144e:	4b7a      	ldr	r3, [pc, #488]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145a:	2301      	movs	r3, #1
 800145c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145e:	4b77      	ldr	r3, [pc, #476]	@ (800163c <HAL_RCC_OscConfig+0x474>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d118      	bne.n	800149c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146a:	4b74      	ldr	r3, [pc, #464]	@ (800163c <HAL_RCC_OscConfig+0x474>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a73      	ldr	r2, [pc, #460]	@ (800163c <HAL_RCC_OscConfig+0x474>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001476:	f7ff fbe9 	bl	8000c4c <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147e:	f7ff fbe5 	bl	8000c4c <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e10c      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	4b6a      	ldr	r3, [pc, #424]	@ (800163c <HAL_RCC_OscConfig+0x474>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x2ea>
 80014a4:	4b64      	ldr	r3, [pc, #400]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a8:	4a63      	ldr	r2, [pc, #396]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b0:	e01c      	b.n	80014ec <HAL_RCC_OscConfig+0x324>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b05      	cmp	r3, #5
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x30c>
 80014ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014be:	4a5e      	ldr	r2, [pc, #376]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0x324>
 80014d4:	4b58      	ldr	r3, [pc, #352]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d8:	4a57      	ldr	r2, [pc, #348]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e0:	4b55      	ldr	r3, [pc, #340]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e4:	4a54      	ldr	r2, [pc, #336]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80014e6:	f023 0304 	bic.w	r3, r3, #4
 80014ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d015      	beq.n	8001520 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f4:	f7ff fbaa 	bl	8000c4c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fa:	e00a      	b.n	8001512 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fc:	f7ff fba6 	bl	8000c4c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e0cb      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001512:	4b49      	ldr	r3, [pc, #292]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0ee      	beq.n	80014fc <HAL_RCC_OscConfig+0x334>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001520:	f7ff fb94 	bl	8000c4c <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001526:	e00a      	b.n	800153e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff fb90 	bl	8000c4c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e0b5      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153e:	4b3e      	ldr	r3, [pc, #248]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1ee      	bne.n	8001528 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001550:	4b39      	ldr	r3, [pc, #228]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	4a38      	ldr	r2, [pc, #224]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800155a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80a1 	beq.w	80016a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001566:	4b34      	ldr	r3, [pc, #208]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b08      	cmp	r3, #8
 8001570:	d05c      	beq.n	800162c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d141      	bne.n	80015fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157a:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <HAL_RCC_OscConfig+0x478>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fb64 	bl	8000c4c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff fb60 	bl	8000c4c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e087      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69da      	ldr	r2, [r3, #28]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b4:	019b      	lsls	r3, r3, #6
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	3b01      	subs	r3, #1
 80015c0:	041b      	lsls	r3, r3, #16
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	491b      	ldr	r1, [pc, #108]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <HAL_RCC_OscConfig+0x478>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb39 	bl	8000c4c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff fb35 	bl	8000c4c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e05c      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x416>
 80015fc:	e054      	b.n	80016a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <HAL_RCC_OscConfig+0x478>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb22 	bl	8000c4c <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fb1e 	bl	8000c4c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e045      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_RCC_OscConfig+0x470>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x444>
 800162a:	e03d      	b.n	80016a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d107      	bne.n	8001644 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e038      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
 8001638:	40023800 	.word	0x40023800
 800163c:	40007000 	.word	0x40007000
 8001640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_RCC_OscConfig+0x4ec>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d028      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d121      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d11a      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001674:	4013      	ands	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800167a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800167c:	4293      	cmp	r3, r2
 800167e:	d111      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168a:	085b      	lsrs	r3, r3, #1
 800168c:	3b01      	subs	r3, #1
 800168e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d107      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0cc      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016cc:	4b68      	ldr	r3, [pc, #416]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d90c      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b65      	ldr	r3, [pc, #404]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b63      	ldr	r3, [pc, #396]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0b8      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800170c:	4b59      	ldr	r3, [pc, #356]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a58      	ldr	r2, [pc, #352]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001724:	4b53      	ldr	r3, [pc, #332]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a52      	ldr	r2, [pc, #328]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800172e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001730:	4b50      	ldr	r3, [pc, #320]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	494d      	ldr	r1, [pc, #308]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d044      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b47      	ldr	r3, [pc, #284]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d119      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e07f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d003      	beq.n	8001776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001772:	2b03      	cmp	r3, #3
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b3f      	ldr	r3, [pc, #252]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	4b3b      	ldr	r3, [pc, #236]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e067      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001796:	4b37      	ldr	r3, [pc, #220]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f023 0203 	bic.w	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4934      	ldr	r1, [pc, #208]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a8:	f7ff fa50 	bl	8000c4c <HAL_GetTick>
 80017ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7ff fa4c 	bl	8000c4c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e04f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 020c 	and.w	r2, r3, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1eb      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d8:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d20c      	bcs.n	8001800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e032      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4916      	ldr	r1, [pc, #88]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	490e      	ldr	r1, [pc, #56]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800183e:	f000 f821 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001842:	4602      	mov	r2, r0
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	490a      	ldr	r1, [pc, #40]	@ (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	5ccb      	ldrb	r3, [r1, r3]
 8001852:	fa22 f303 	lsr.w	r3, r2, r3
 8001856:	4a09      	ldr	r2, [pc, #36]	@ (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f8e8 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00
 8001874:	40023800 	.word	0x40023800
 8001878:	08004504 	.word	0x08004504
 800187c:	20000000 	.word	0x20000000
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001888:	b094      	sub	sp, #80	@ 0x50
 800188a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001890:	2300      	movs	r3, #0
 8001892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001894:	2300      	movs	r3, #0
 8001896:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800189c:	4b79      	ldr	r3, [pc, #484]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d00d      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x40>
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	f200 80e1 	bhi.w	8001a70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x34>
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d003      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x3a>
 80018b6:	e0db      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018b8:	4b73      	ldr	r3, [pc, #460]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x204>)
 80018ba:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80018bc:	e0db      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018be:	4b73      	ldr	r3, [pc, #460]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x208>)
 80018c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018c2:	e0d8      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018da:	4b6a      	ldr	r3, [pc, #424]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	2200      	movs	r2, #0
 80018e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80018f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018f6:	4622      	mov	r2, r4
 80018f8:	462b      	mov	r3, r5
 80018fa:	f04f 0000 	mov.w	r0, #0
 80018fe:	f04f 0100 	mov.w	r1, #0
 8001902:	0159      	lsls	r1, r3, #5
 8001904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001908:	0150      	lsls	r0, r2, #5
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4621      	mov	r1, r4
 8001910:	1a51      	subs	r1, r2, r1
 8001912:	6139      	str	r1, [r7, #16]
 8001914:	4629      	mov	r1, r5
 8001916:	eb63 0301 	sbc.w	r3, r3, r1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001928:	4659      	mov	r1, fp
 800192a:	018b      	lsls	r3, r1, #6
 800192c:	4651      	mov	r1, sl
 800192e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001932:	4651      	mov	r1, sl
 8001934:	018a      	lsls	r2, r1, #6
 8001936:	4651      	mov	r1, sl
 8001938:	ebb2 0801 	subs.w	r8, r2, r1
 800193c:	4659      	mov	r1, fp
 800193e:	eb63 0901 	sbc.w	r9, r3, r1
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800194e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001956:	4690      	mov	r8, r2
 8001958:	4699      	mov	r9, r3
 800195a:	4623      	mov	r3, r4
 800195c:	eb18 0303 	adds.w	r3, r8, r3
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	462b      	mov	r3, r5
 8001964:	eb49 0303 	adc.w	r3, r9, r3
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001976:	4629      	mov	r1, r5
 8001978:	024b      	lsls	r3, r1, #9
 800197a:	4621      	mov	r1, r4
 800197c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001980:	4621      	mov	r1, r4
 8001982:	024a      	lsls	r2, r1, #9
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800198a:	2200      	movs	r2, #0
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800198e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001994:	f7fe fc1c 	bl	80001d0 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019a0:	e058      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a2:	4b38      	ldr	r3, [pc, #224]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	2200      	movs	r2, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	4611      	mov	r1, r2
 80019ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019bc:	4642      	mov	r2, r8
 80019be:	464b      	mov	r3, r9
 80019c0:	f04f 0000 	mov.w	r0, #0
 80019c4:	f04f 0100 	mov.w	r1, #0
 80019c8:	0159      	lsls	r1, r3, #5
 80019ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ce:	0150      	lsls	r0, r2, #5
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4641      	mov	r1, r8
 80019d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019da:	4649      	mov	r1, r9
 80019dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019f4:	ebb2 040a 	subs.w	r4, r2, sl
 80019f8:	eb63 050b 	sbc.w	r5, r3, fp
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	00eb      	lsls	r3, r5, #3
 8001a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a0a:	00e2      	lsls	r2, r4, #3
 8001a0c:	4614      	mov	r4, r2
 8001a0e:	461d      	mov	r5, r3
 8001a10:	4643      	mov	r3, r8
 8001a12:	18e3      	adds	r3, r4, r3
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	464b      	mov	r3, r9
 8001a18:	eb45 0303 	adc.w	r3, r5, r3
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	028b      	lsls	r3, r1, #10
 8001a2e:	4621      	mov	r1, r4
 8001a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a34:	4621      	mov	r1, r4
 8001a36:	028a      	lsls	r2, r1, #10
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	61fa      	str	r2, [r7, #28]
 8001a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a48:	f7fe fbc2 	bl	80001d0 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4613      	mov	r3, r2
 8001a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001a64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a6e:	e002      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3750      	adds	r7, #80	@ 0x50
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	00f42400 	.word	0x00f42400
 8001a8c:	007a1200 	.word	0x007a1200

08001a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a94:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000000 	.word	0x20000000

08001aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aac:	f7ff fff0 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	0b5b      	lsrs	r3, r3, #13
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4903      	ldr	r1, [pc, #12]	@ (8001acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08004514 	.word	0x08004514

08001ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	220f      	movs	r2, #15
 8001ade:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <HAL_RCC_GetClockConfig+0x60>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0207 	and.w	r2, r3, #7
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e041      	b.n	8001bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f839 	bl	8001bd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f000 f9c0 	bl	8001ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d001      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e04e      	b.n	8001c9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <HAL_TIM_Base_Start_IT+0xc4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c2a:	d01d      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d018      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cbc <HAL_TIM_Base_Start_IT+0xd4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a19      	ldr	r2, [pc, #100]	@ (8001cc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a18      	ldr	r2, [pc, #96]	@ (8001cc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d111      	bne.n	8001c8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d010      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8a:	e007      	b.n	8001c9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	40000c00 	.word	0x40000c00
 8001cbc:	40010400 	.word	0x40010400
 8001cc0:	40014000 	.word	0x40014000
 8001cc4:	40001800 	.word	0x40001800

08001cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d020      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01b      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0202 	mvn.w	r2, #2
 8001cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8d2 	bl	8001ebc <HAL_TIM_IC_CaptureCallback>
 8001d18:	e005      	b.n	8001d26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f8c4 	bl	8001ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f8d5 	bl	8001ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d020      	beq.n	8001d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01b      	beq.n	8001d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0204 	mvn.w	r2, #4
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8ac 	bl	8001ebc <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f89e 	bl	8001ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8af 	bl	8001ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d020      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01b      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0208 	mvn.w	r2, #8
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f886 	bl	8001ebc <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f878 	bl	8001ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f889 	bl	8001ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d020      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01b      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0210 	mvn.w	r2, #16
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2208      	movs	r2, #8
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f860 	bl	8001ebc <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f852 	bl	8001ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f863 	bl	8001ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0201 	mvn.w	r2, #1
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fdbc 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f906 	bl	8002064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f834 	bl	8001ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0220 	mvn.w	r2, #32
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8d8 	bl	8002050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a46      	ldr	r2, [pc, #280]	@ (8002024 <TIM_Base_SetConfig+0x12c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <TIM_Base_SetConfig+0x40>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f16:	d00f      	beq.n	8001f38 <TIM_Base_SetConfig+0x40>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a43      	ldr	r2, [pc, #268]	@ (8002028 <TIM_Base_SetConfig+0x130>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00b      	beq.n	8001f38 <TIM_Base_SetConfig+0x40>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a42      	ldr	r2, [pc, #264]	@ (800202c <TIM_Base_SetConfig+0x134>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d007      	beq.n	8001f38 <TIM_Base_SetConfig+0x40>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a41      	ldr	r2, [pc, #260]	@ (8002030 <TIM_Base_SetConfig+0x138>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <TIM_Base_SetConfig+0x40>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a40      	ldr	r2, [pc, #256]	@ (8002034 <TIM_Base_SetConfig+0x13c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a35      	ldr	r2, [pc, #212]	@ (8002024 <TIM_Base_SetConfig+0x12c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d02b      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f58:	d027      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a32      	ldr	r2, [pc, #200]	@ (8002028 <TIM_Base_SetConfig+0x130>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d023      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a31      	ldr	r2, [pc, #196]	@ (800202c <TIM_Base_SetConfig+0x134>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01f      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a30      	ldr	r2, [pc, #192]	@ (8002030 <TIM_Base_SetConfig+0x138>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01b      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2f      	ldr	r2, [pc, #188]	@ (8002034 <TIM_Base_SetConfig+0x13c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d017      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8002038 <TIM_Base_SetConfig+0x140>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a2d      	ldr	r2, [pc, #180]	@ (800203c <TIM_Base_SetConfig+0x144>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00f      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002040 <TIM_Base_SetConfig+0x148>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00b      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2b      	ldr	r2, [pc, #172]	@ (8002044 <TIM_Base_SetConfig+0x14c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002048 <TIM_Base_SetConfig+0x150>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d003      	beq.n	8001faa <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a29      	ldr	r2, [pc, #164]	@ (800204c <TIM_Base_SetConfig+0x154>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d108      	bne.n	8001fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	@ (8002024 <TIM_Base_SetConfig+0x12c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0xf8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <TIM_Base_SetConfig+0x13c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d103      	bne.n	8001ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f023 0201 	bic.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	611a      	str	r2, [r3, #16]
  }
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800
 8002030:	40000c00 	.word	0x40000c00
 8002034:	40010400 	.word	0x40010400
 8002038:	40014000 	.word	0x40014000
 800203c:	40014400 	.word	0x40014400
 8002040:	40014800 	.word	0x40014800
 8002044:	40001800 	.word	0x40001800
 8002048:	40001c00 	.word	0x40001c00
 800204c:	40002000 	.word	0x40002000

08002050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800208a:	2b84      	cmp	r3, #132	@ 0x84
 800208c:	d005      	beq.n	800209a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800208e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4413      	add	r3, r2
 8002096:	3303      	adds	r3, #3
 8002098:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80020ac:	f000 ffc6 	bl	800303c <vTaskStartScheduler>
  
  return osOK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b8:	b089      	sub	sp, #36	@ 0x24
 80020ba:	af04      	add	r7, sp, #16
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d020      	beq.n	800210a <osThreadCreate+0x54>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01c      	beq.n	800210a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685c      	ldr	r4, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691e      	ldr	r6, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ffc8 	bl	8002078 <makeFreeRtosPriority>
 80020e8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020f2:	9202      	str	r2, [sp, #8]
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	9100      	str	r1, [sp, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4632      	mov	r2, r6
 80020fc:	4629      	mov	r1, r5
 80020fe:	4620      	mov	r0, r4
 8002100:	f000 fca6 	bl	8002a50 <xTaskCreateStatic>
 8002104:	4603      	mov	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e01c      	b.n	8002144 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685c      	ldr	r4, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002116:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ffaa 	bl	8002078 <makeFreeRtosPriority>
 8002124:	4602      	mov	r2, r0
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	9200      	str	r2, [sp, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	4632      	mov	r2, r6
 8002132:	4629      	mov	r1, r5
 8002134:	4620      	mov	r0, r4
 8002136:	f000 fceb 	bl	8002b10 <xTaskCreate>
 800213a:	4603      	mov	r3, r0
 800213c:	2b01      	cmp	r3, #1
 800213e:	d001      	beq.n	8002144 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800214e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <osDelay+0x16>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	e000      	b.n	8002166 <osDelay+0x18>
 8002164:	2301      	movs	r3, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f000 ff32 	bl	8002fd0 <vTaskDelay>
  
  return osOK;
 800216c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f103 0208 	add.w	r2, r3, #8
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800218e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f103 0208 	add.w	r2, r3, #8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f103 0208 	add.w	r2, r3, #8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800222e:	d103      	bne.n	8002238 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	e00c      	b.n	8002252 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3308      	adds	r3, #8
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e002      	b.n	8002246 <vListInsert+0x2e>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	429a      	cmp	r2, r3
 8002250:	d2f6      	bcs.n	8002240 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6892      	ldr	r2, [r2, #8]
 80022a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6852      	ldr	r2, [r2, #4]
 80022aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d103      	bne.n	80022be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	1e5a      	subs	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800230c:	f001 fd04 	bl	8003d18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002318:	68f9      	ldr	r1, [r7, #12]
 800231a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	441a      	add	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233c:	3b01      	subs	r3, #1
 800233e:	68f9      	ldr	r1, [r7, #12]
 8002340:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	441a      	add	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	22ff      	movs	r2, #255	@ 0xff
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	22ff      	movs	r2, #255	@ 0xff
 8002358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d114      	bne.n	800238c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01a      	beq.n	80023a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3310      	adds	r3, #16
 800236e:	4618      	mov	r0, r3
 8002370:	f001 f8ce 	bl	8003510 <xTaskRemoveFromEventList>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d012      	beq.n	80023a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800237a:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <xQueueGenericReset+0xd0>)
 800237c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	e009      	b.n	80023a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3310      	adds	r3, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fef0 	bl	8002176 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3324      	adds	r3, #36	@ 0x24
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff feeb 	bl	8002176 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023a0:	f001 fcec 	bl	8003d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023a4:	2301      	movs	r3, #1
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <xQueueGenericCreate+0x2c>
	__asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	613b      	str	r3, [r7, #16]
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3348      	adds	r3, #72	@ 0x48
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 fd72 	bl	8003ed8 <pvPortMalloc>
 80023f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d011      	beq.n	8002420 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3348      	adds	r3, #72	@ 0x48
 8002404:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800240e:	79fa      	ldrb	r2, [r7, #7]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f805 	bl	800242a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002420:	69bb      	ldr	r3, [r7, #24]
	}
 8002422:	4618      	mov	r0, r3
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e002      	b.n	800244c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002458:	2101      	movs	r1, #1
 800245a:	69b8      	ldr	r0, [r7, #24]
 800245c:	f7ff ff40 	bl	80022e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08e      	sub	sp, #56	@ 0x38
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002476:	2300      	movs	r3, #0
 8002478:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10b      	bne.n	800249c <xQueueGenericSend+0x34>
	__asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d103      	bne.n	80024aa <xQueueGenericSend+0x42>
 80024a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <xQueueGenericSend+0x46>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <xQueueGenericSend+0x48>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <xQueueGenericSend+0x64>
	__asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d103      	bne.n	80024da <xQueueGenericSend+0x72>
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <xQueueGenericSend+0x76>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <xQueueGenericSend+0x78>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <xQueueGenericSend+0x94>
	__asm volatile
 80024e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	623b      	str	r3, [r7, #32]
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024fc:	f001 f9ce 	bl	800389c <xTaskGetSchedulerState>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <xQueueGenericSend+0xa4>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <xQueueGenericSend+0xa8>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <xQueueGenericSend+0xaa>
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <xQueueGenericSend+0xc6>
	__asm volatile
 8002516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	61fb      	str	r3, [r7, #28]
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	e7fd      	b.n	800252a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800252e:	f001 fbf3 	bl	8003d18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <xQueueGenericSend+0xdc>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d129      	bne.n	8002598 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800254a:	f000 f971 	bl	8002830 <prvCopyDataToQueue>
 800254e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255a:	3324      	adds	r3, #36	@ 0x24
 800255c:	4618      	mov	r0, r3
 800255e:	f000 ffd7 	bl	8003510 <xTaskRemoveFromEventList>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002568:	4b3f      	ldr	r3, [pc, #252]	@ (8002668 <xQueueGenericSend+0x200>)
 800256a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	e00a      	b.n	8002590 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800257a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002580:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <xQueueGenericSend+0x200>)
 8002582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002590:	f001 fbf4 	bl	8003d7c <vPortExitCritical>
				return pdPASS;
 8002594:	2301      	movs	r3, #1
 8002596:	e063      	b.n	8002660 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800259e:	f001 fbed 	bl	8003d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e05c      	b.n	8002660 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 f811 	bl	80035d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025ba:	f001 fbdf 	bl	8003d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025be:	f000 fda7 	bl	8003110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025c2:	f001 fba9 	bl	8003d18 <vPortEnterCritical>
 80025c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025d2:	d103      	bne.n	80025dc <xQueueGenericSend+0x174>
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025e8:	d103      	bne.n	80025f2 <xQueueGenericSend+0x18a>
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025f2:	f001 fbc3 	bl	8003d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f001 f800 	bl	8003604 <xTaskCheckForTimeOut>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d124      	bne.n	8002654 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800260a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800260c:	f000 fa08 	bl	8002a20 <prvIsQueueFull>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	3310      	adds	r3, #16
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 ff50 	bl	80034c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002626:	f000 f993 	bl	8002950 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800262a:	f000 fd7f 	bl	800312c <xTaskResumeAll>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f af7c 	bne.w	800252e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002636:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <xQueueGenericSend+0x200>)
 8002638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	e772      	b.n	800252e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800264a:	f000 f981 	bl	8002950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800264e:	f000 fd6d 	bl	800312c <xTaskResumeAll>
 8002652:	e76c      	b.n	800252e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002656:	f000 f97b 	bl	8002950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800265a:	f000 fd67 	bl	800312c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800265e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002660:	4618      	mov	r0, r3
 8002662:	3738      	adds	r7, #56	@ 0x38
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	e000ed04 	.word	0xe000ed04

0800266c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	@ 0x30
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10b      	bne.n	800269e <xQueueReceive+0x32>
	__asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	623b      	str	r3, [r7, #32]
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	e7fd      	b.n	800269a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <xQueueReceive+0x40>
 80026a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <xQueueReceive+0x44>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <xQueueReceive+0x46>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10b      	bne.n	80026ce <xQueueReceive+0x62>
	__asm volatile
 80026b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	61fb      	str	r3, [r7, #28]
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	e7fd      	b.n	80026ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026ce:	f001 f8e5 	bl	800389c <xTaskGetSchedulerState>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d102      	bne.n	80026de <xQueueReceive+0x72>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <xQueueReceive+0x76>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <xQueueReceive+0x78>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <xQueueReceive+0x94>
	__asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	61bb      	str	r3, [r7, #24]
}
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002700:	f001 fb0a 	bl	8003d18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01f      	beq.n	8002750 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002714:	f000 f8f6 	bl	8002904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	1e5a      	subs	r2, r3, #1
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00f      	beq.n	8002748 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272a:	3310      	adds	r3, #16
 800272c:	4618      	mov	r0, r3
 800272e:	f000 feef 	bl	8003510 <xTaskRemoveFromEventList>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002738:	4b3c      	ldr	r3, [pc, #240]	@ (800282c <xQueueReceive+0x1c0>)
 800273a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002748:	f001 fb18 	bl	8003d7c <vPortExitCritical>
				return pdPASS;
 800274c:	2301      	movs	r3, #1
 800274e:	e069      	b.n	8002824 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002756:	f001 fb11 	bl	8003d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800275a:	2300      	movs	r3, #0
 800275c:	e062      	b.n	8002824 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800275e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d106      	bne.n	8002772 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002764:	f107 0310 	add.w	r3, r7, #16
 8002768:	4618      	mov	r0, r3
 800276a:	f000 ff35 	bl	80035d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800276e:	2301      	movs	r3, #1
 8002770:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002772:	f001 fb03 	bl	8003d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002776:	f000 fccb 	bl	8003110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800277a:	f001 facd 	bl	8003d18 <vPortEnterCritical>
 800277e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002784:	b25b      	sxtb	r3, r3
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800278a:	d103      	bne.n	8002794 <xQueueReceive+0x128>
 800278c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002796:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800279a:	b25b      	sxtb	r3, r3
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027a0:	d103      	bne.n	80027aa <xQueueReceive+0x13e>
 80027a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027aa:	f001 fae7 	bl	8003d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027ae:	1d3a      	adds	r2, r7, #4
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 ff24 	bl	8003604 <xTaskCheckForTimeOut>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d123      	bne.n	800280a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027c4:	f000 f916 	bl	80029f4 <prvIsQueueEmpty>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d017      	beq.n	80027fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d0:	3324      	adds	r3, #36	@ 0x24
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fe74 	bl	80034c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027de:	f000 f8b7 	bl	8002950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027e2:	f000 fca3 	bl	800312c <xTaskResumeAll>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d189      	bne.n	8002700 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80027ec:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <xQueueReceive+0x1c0>)
 80027ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	e780      	b.n	8002700 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80027fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002800:	f000 f8a6 	bl	8002950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002804:	f000 fc92 	bl	800312c <xTaskResumeAll>
 8002808:	e77a      	b.n	8002700 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800280a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800280c:	f000 f8a0 	bl	8002950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002810:	f000 fc8c 	bl	800312c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002816:	f000 f8ed 	bl	80029f4 <prvIsQueueEmpty>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	f43f af6f 	beq.w	8002700 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002822:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002824:	4618      	mov	r0, r3
 8002826:	3730      	adds	r7, #48	@ 0x30
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	e000ed04 	.word	0xe000ed04

08002830 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d14d      	bne.n	80028f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f001 f83c 	bl	80038d8 <xTaskPriorityDisinherit>
 8002860:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	e043      	b.n	80028f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d119      	bne.n	80028a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6858      	ldr	r0, [r3, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	461a      	mov	r2, r3
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	f001 fd9e 	bl	80043bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	441a      	add	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d32b      	bcc.n	80028f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e026      	b.n	80028f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68d8      	ldr	r0, [r3, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	461a      	mov	r2, r3
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	f001 fd84 	bl	80043bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	425b      	negs	r3, r3
 80028be:	441a      	add	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d207      	bcs.n	80028e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	425b      	negs	r3, r3
 80028da:	441a      	add	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d105      	bne.n	80028f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80028fa:	697b      	ldr	r3, [r7, #20]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d018      	beq.n	8002948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	441a      	add	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	d303      	bcc.n	8002938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68d9      	ldr	r1, [r3, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	461a      	mov	r2, r3
 8002942:	6838      	ldr	r0, [r7, #0]
 8002944:	f001 fd3a 	bl	80043bc <memcpy>
	}
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002958:	f001 f9de 	bl	8003d18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002964:	e011      	b.n	800298a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	d012      	beq.n	8002994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3324      	adds	r3, #36	@ 0x24
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fdcc 	bl	8003510 <xTaskRemoveFromEventList>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800297e:	f000 fea5 	bl	80036cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	3b01      	subs	r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800298a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	dce9      	bgt.n	8002966 <prvUnlockQueue+0x16>
 8002992:	e000      	b.n	8002996 <prvUnlockQueue+0x46>
					break;
 8002994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	22ff      	movs	r2, #255	@ 0xff
 800299a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800299e:	f001 f9ed 	bl	8003d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029a2:	f001 f9b9 	bl	8003d18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029ae:	e011      	b.n	80029d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3310      	adds	r3, #16
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fda7 	bl	8003510 <xTaskRemoveFromEventList>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80029c8:	f000 fe80 	bl	80036cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80029cc:	7bbb      	ldrb	r3, [r7, #14]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	dce9      	bgt.n	80029b0 <prvUnlockQueue+0x60>
 80029dc:	e000      	b.n	80029e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80029de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	22ff      	movs	r2, #255	@ 0xff
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80029e8:	f001 f9c8 	bl	8003d7c <vPortExitCritical>
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029fc:	f001 f98c 	bl	8003d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e001      	b.n	8002a12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a12:	f001 f9b3 	bl	8003d7c <vPortExitCritical>

	return xReturn;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a28:	f001 f976 	bl	8003d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d102      	bne.n	8002a3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e001      	b.n	8002a42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a42:	f001 f99b 	bl	8003d7c <vPortExitCritical>

	return xReturn;
 8002a46:	68fb      	ldr	r3, [r7, #12]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08e      	sub	sp, #56	@ 0x38
 8002a54:	af04      	add	r7, sp, #16
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	623b      	str	r3, [r7, #32]
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10b      	bne.n	8002a9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	61fb      	str	r3, [r7, #28]
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	e7fd      	b.n	8002a96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a9a:	23a0      	movs	r3, #160	@ 0xa0
 8002a9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2ba0      	cmp	r3, #160	@ 0xa0
 8002aa2:	d00b      	beq.n	8002abc <xTaskCreateStatic+0x6c>
	__asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	61bb      	str	r3, [r7, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002abc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01e      	beq.n	8002b02 <xTaskCreateStatic+0xb2>
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01b      	beq.n	8002b02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002adc:	2300      	movs	r3, #0
 8002ade:	9303      	str	r3, [sp, #12]
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	9302      	str	r3, [sp, #8]
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f851 	bl	8002b9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002afa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002afc:	f000 f8ee 	bl	8002cdc <prvAddNewTaskToReadyList>
 8002b00:	e001      	b.n	8002b06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b06:	697b      	ldr	r3, [r7, #20]
	}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3728      	adds	r7, #40	@ 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	@ 0x30
 8002b14:	af04      	add	r7, sp, #16
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 f9d7 	bl	8003ed8 <pvPortMalloc>
 8002b2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00e      	beq.n	8002b50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b32:	20a0      	movs	r0, #160	@ 0xa0
 8002b34:	f001 f9d0 	bl	8003ed8 <pvPortMalloc>
 8002b38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b46:	e005      	b.n	8002b54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b48:	6978      	ldr	r0, [r7, #20]
 8002b4a:	f001 fa93 	bl	8004074 <vPortFree>
 8002b4e:	e001      	b.n	8002b54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d017      	beq.n	8002b8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b62:	88fa      	ldrh	r2, [r7, #6]
 8002b64:	2300      	movs	r3, #0
 8002b66:	9303      	str	r3, [sp, #12]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	9302      	str	r3, [sp, #8]
 8002b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f80f 	bl	8002b9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b7e:	69f8      	ldr	r0, [r7, #28]
 8002b80:	f000 f8ac 	bl	8002cdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b84:	2301      	movs	r3, #1
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	e002      	b.n	8002b90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b90:	69bb      	ldr	r3, [r7, #24]
	}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f023 0307 	bic.w	r3, r3, #7
 8002bc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	617b      	str	r3, [r7, #20]
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	e7fd      	b.n	8002be2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01f      	beq.n	8002c2c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e012      	b.n	8002c18 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	7819      	ldrb	r1, [r3, #0]
 8002bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	4413      	add	r3, r2
 8002c00:	3334      	adds	r3, #52	@ 0x34
 8002c02:	460a      	mov	r2, r1
 8002c04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d006      	beq.n	8002c20 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b0f      	cmp	r3, #15
 8002c1c:	d9e9      	bls.n	8002bf2 <prvInitialiseNewTask+0x56>
 8002c1e:	e000      	b.n	8002c22 <prvInitialiseNewTask+0x86>
			{
				break;
 8002c20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c2a:	e003      	b.n	8002c34 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d901      	bls.n	8002c3e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c3a:	2306      	movs	r3, #6
 8002c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c48:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c52:	3304      	adds	r3, #4
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff faae 	bl	80021b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5c:	3318      	adds	r3, #24
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff faa9 	bl	80021b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6c:	f1c3 0207 	rsb	r2, r3, #7
 8002c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8c:	334c      	adds	r3, #76	@ 0x4c
 8002c8e:	224c      	movs	r2, #76	@ 0x4c
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 fb0e 	bl	80042b4 <memset>
 8002c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd0 <prvInitialiseNewTask+0x134>)
 8002c9c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd4 <prvInitialiseNewTask+0x138>)
 8002ca2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd8 <prvInitialiseNewTask+0x13c>)
 8002ca8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	68f9      	ldr	r1, [r7, #12]
 8002cae:	69b8      	ldr	r0, [r7, #24]
 8002cb0:	f000 ff00 	bl	8003ab4 <pxPortInitialiseStack>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cc6:	bf00      	nop
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200040c4 	.word	0x200040c4
 8002cd4:	2000412c 	.word	0x2000412c
 8002cd8:	20004194 	.word	0x20004194

08002cdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ce4:	f001 f818 	bl	8003d18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d94 <prvAddNewTaskToReadyList+0xb8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	4a29      	ldr	r2, [pc, #164]	@ (8002d94 <prvAddNewTaskToReadyList+0xb8>)
 8002cf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002cf2:	4b29      	ldr	r3, [pc, #164]	@ (8002d98 <prvAddNewTaskToReadyList+0xbc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cfa:	4a27      	ldr	r2, [pc, #156]	@ (8002d98 <prvAddNewTaskToReadyList+0xbc>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d00:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <prvAddNewTaskToReadyList+0xb8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d110      	bne.n	8002d2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d08:	f000 fd04 	bl	8003714 <prvInitialiseTaskLists>
 8002d0c:	e00d      	b.n	8002d2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d0e:	4b23      	ldr	r3, [pc, #140]	@ (8002d9c <prvAddNewTaskToReadyList+0xc0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d16:	4b20      	ldr	r3, [pc, #128]	@ (8002d98 <prvAddNewTaskToReadyList+0xbc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d802      	bhi.n	8002d2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d24:	4a1c      	ldr	r2, [pc, #112]	@ (8002d98 <prvAddNewTaskToReadyList+0xbc>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002da0 <prvAddNewTaskToReadyList+0xc4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a1b      	ldr	r2, [pc, #108]	@ (8002da0 <prvAddNewTaskToReadyList+0xc4>)
 8002d32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	2201      	movs	r2, #1
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <prvAddNewTaskToReadyList+0xc8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	4a18      	ldr	r2, [pc, #96]	@ (8002da4 <prvAddNewTaskToReadyList+0xc8>)
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4a15      	ldr	r2, [pc, #84]	@ (8002da8 <prvAddNewTaskToReadyList+0xcc>)
 8002d54:	441a      	add	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f7ff fa37 	bl	80021d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d62:	f001 f80b 	bl	8003d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <prvAddNewTaskToReadyList+0xc0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00e      	beq.n	8002d8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d98 <prvAddNewTaskToReadyList+0xbc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d207      	bcs.n	8002d8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <prvAddNewTaskToReadyList+0xd0>)
 8002d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000470 	.word	0x20000470
 8002d98:	20000370 	.word	0x20000370
 8002d9c:	2000047c 	.word	0x2000047c
 8002da0:	2000048c 	.word	0x2000048c
 8002da4:	20000478 	.word	0x20000478
 8002da8:	20000374 	.word	0x20000374
 8002dac:	e000ed04 	.word	0xe000ed04

08002db0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002db8:	f000 ffae 	bl	8003d18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <vTaskDelete+0x18>
 8002dc2:	4b39      	ldr	r3, [pc, #228]	@ (8002ea8 <vTaskDelete+0xf8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	e000      	b.n	8002dca <vTaskDelete+0x1a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fa5a 	bl	800228a <uxListRemove>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d115      	bne.n	8002e08 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de0:	4932      	ldr	r1, [pc, #200]	@ (8002eac <vTaskDelete+0xfc>)
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <vTaskDelete+0x58>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	2201      	movs	r2, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb0 <vTaskDelete+0x100>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4013      	ands	r3, r2
 8002e04:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb0 <vTaskDelete+0x100>)
 8002e06:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3318      	adds	r3, #24
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fa38 	bl	800228a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002e1a:	4b26      	ldr	r3, [pc, #152]	@ (8002eb4 <vTaskDelete+0x104>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	4a24      	ldr	r2, [pc, #144]	@ (8002eb4 <vTaskDelete+0x104>)
 8002e22:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002e24:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <vTaskDelete+0xf8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d10b      	bne.n	8002e46 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3304      	adds	r3, #4
 8002e32:	4619      	mov	r1, r3
 8002e34:	4820      	ldr	r0, [pc, #128]	@ (8002eb8 <vTaskDelete+0x108>)
 8002e36:	f7ff f9cb 	bl	80021d0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002e3a:	4b20      	ldr	r3, [pc, #128]	@ (8002ebc <vTaskDelete+0x10c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	4a1e      	ldr	r2, [pc, #120]	@ (8002ebc <vTaskDelete+0x10c>)
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e009      	b.n	8002e5a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002e46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec0 <vTaskDelete+0x110>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec0 <vTaskDelete+0x110>)
 8002e4e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fccd 	bl	80037f0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002e56:	f000 fd01 	bl	800385c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002e5a:	f000 ff8f 	bl	8003d7c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002e5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ec4 <vTaskDelete+0x114>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01c      	beq.n	8002ea0 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <vTaskDelete+0xf8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d117      	bne.n	8002ea0 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002e70:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <vTaskDelete+0x118>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <vTaskDelete+0xe0>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	60bb      	str	r3, [r7, #8]
}
 8002e8a:	bf00      	nop
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8002e90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <vTaskDelete+0x11c>)
 8002e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000370 	.word	0x20000370
 8002eac:	20000374 	.word	0x20000374
 8002eb0:	20000478 	.word	0x20000478
 8002eb4:	2000048c 	.word	0x2000048c
 8002eb8:	20000444 	.word	0x20000444
 8002ebc:	20000458 	.word	0x20000458
 8002ec0:	20000470 	.word	0x20000470
 8002ec4:	2000047c 	.word	0x2000047c
 8002ec8:	20000498 	.word	0x20000498
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	@ 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <vTaskDelayUntil+0x2c>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	617b      	str	r3, [r7, #20]
}
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	e7fd      	b.n	8002ef8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <vTaskDelayUntil+0x4a>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	613b      	str	r3, [r7, #16]
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	e7fd      	b.n	8002f16 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc4 <vTaskDelayUntil+0xf4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <vTaskDelayUntil+0x6a>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	60fb      	str	r3, [r7, #12]
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	e7fd      	b.n	8002f36 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8002f3a:	f000 f8e9 	bl	8003110 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002f3e:	4b22      	ldr	r3, [pc, #136]	@ (8002fc8 <vTaskDelayUntil+0xf8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6a3a      	ldr	r2, [r7, #32]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d20b      	bcs.n	8002f70 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d211      	bcs.n	8002f86 <vTaskDelayUntil+0xb6>
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d90d      	bls.n	8002f86 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6e:	e00a      	b.n	8002f86 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d303      	bcc.n	8002f82 <vTaskDelayUntil+0xb2>
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d901      	bls.n	8002f86 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8002f82:	2301      	movs	r3, #1
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fd24 	bl	80039e8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002fa0:	f000 f8c4 	bl	800312c <xTaskResumeAll>
 8002fa4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d107      	bne.n	8002fbc <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8002fac:	4b07      	ldr	r3, [pc, #28]	@ (8002fcc <vTaskDelayUntil+0xfc>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fbc:	bf00      	nop
 8002fbe:	3728      	adds	r7, #40	@ 0x28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000498 	.word	0x20000498
 8002fc8:	20000474 	.word	0x20000474
 8002fcc:	e000ed04 	.word	0xe000ed04

08002fd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d018      	beq.n	8003014 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fe2:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <vTaskDelay+0x64>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <vTaskDelay+0x32>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	60bb      	str	r3, [r7, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	e7fd      	b.n	8002ffe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003002:	f000 f885 	bl	8003110 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003006:	2100      	movs	r1, #0
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fced 	bl	80039e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800300e:	f000 f88d 	bl	800312c <xTaskResumeAll>
 8003012:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800301a:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <vTaskDelay+0x68>)
 800301c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000498 	.word	0x20000498
 8003038:	e000ed04 	.word	0xe000ed04

0800303c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	@ 0x28
 8003040:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800304a:	463a      	mov	r2, r7
 800304c:	1d39      	adds	r1, r7, #4
 800304e:	f107 0308 	add.w	r3, r7, #8
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fa34 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003058:	6839      	ldr	r1, [r7, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	9202      	str	r2, [sp, #8]
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	2300      	movs	r3, #0
 8003068:	460a      	mov	r2, r1
 800306a:	4921      	ldr	r1, [pc, #132]	@ (80030f0 <vTaskStartScheduler+0xb4>)
 800306c:	4821      	ldr	r0, [pc, #132]	@ (80030f4 <vTaskStartScheduler+0xb8>)
 800306e:	f7ff fcef 	bl	8002a50 <xTaskCreateStatic>
 8003072:	4603      	mov	r3, r0
 8003074:	4a20      	ldr	r2, [pc, #128]	@ (80030f8 <vTaskStartScheduler+0xbc>)
 8003076:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003078:	4b1f      	ldr	r3, [pc, #124]	@ (80030f8 <vTaskStartScheduler+0xbc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003080:	2301      	movs	r3, #1
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e001      	b.n	800308a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d11b      	bne.n	80030c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	613b      	str	r3, [r7, #16]
}
 80030a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030a4:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <vTaskStartScheduler+0xc0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	334c      	adds	r3, #76	@ 0x4c
 80030aa:	4a15      	ldr	r2, [pc, #84]	@ (8003100 <vTaskStartScheduler+0xc4>)
 80030ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030ae:	4b15      	ldr	r3, [pc, #84]	@ (8003104 <vTaskStartScheduler+0xc8>)
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030b6:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <vTaskStartScheduler+0xcc>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030bc:	4b13      	ldr	r3, [pc, #76]	@ (800310c <vTaskStartScheduler+0xd0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030c2:	f000 fd85 	bl	8003bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030c6:	e00f      	b.n	80030e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ce:	d10b      	bne.n	80030e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	60fb      	str	r3, [r7, #12]
}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <vTaskStartScheduler+0xa8>
}
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	080044fc 	.word	0x080044fc
 80030f4:	080036e5 	.word	0x080036e5
 80030f8:	20000494 	.word	0x20000494
 80030fc:	20000370 	.word	0x20000370
 8003100:	20000010 	.word	0x20000010
 8003104:	20000490 	.word	0x20000490
 8003108:	2000047c 	.word	0x2000047c
 800310c:	20000474 	.word	0x20000474

08003110 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003114:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <vTaskSuspendAll+0x18>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	4a03      	ldr	r2, [pc, #12]	@ (8003128 <vTaskSuspendAll+0x18>)
 800311c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	20000498 	.word	0x20000498

0800312c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800313a:	4b42      	ldr	r3, [pc, #264]	@ (8003244 <xTaskResumeAll+0x118>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10b      	bne.n	800315a <xTaskResumeAll+0x2e>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	603b      	str	r3, [r7, #0]
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	e7fd      	b.n	8003156 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800315a:	f000 fddd 	bl	8003d18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800315e:	4b39      	ldr	r3, [pc, #228]	@ (8003244 <xTaskResumeAll+0x118>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3b01      	subs	r3, #1
 8003164:	4a37      	ldr	r2, [pc, #220]	@ (8003244 <xTaskResumeAll+0x118>)
 8003166:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003168:	4b36      	ldr	r3, [pc, #216]	@ (8003244 <xTaskResumeAll+0x118>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d161      	bne.n	8003234 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003170:	4b35      	ldr	r3, [pc, #212]	@ (8003248 <xTaskResumeAll+0x11c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05d      	beq.n	8003234 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003178:	e02e      	b.n	80031d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800317a:	4b34      	ldr	r3, [pc, #208]	@ (800324c <xTaskResumeAll+0x120>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3318      	adds	r3, #24
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff f87f 	bl	800228a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3304      	adds	r3, #4
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff f87a 	bl	800228a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319a:	2201      	movs	r2, #1
 800319c:	409a      	lsls	r2, r3
 800319e:	4b2c      	ldr	r3, [pc, #176]	@ (8003250 <xTaskResumeAll+0x124>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003250 <xTaskResumeAll+0x124>)
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4a27      	ldr	r2, [pc, #156]	@ (8003254 <xTaskResumeAll+0x128>)
 80031b6:	441a      	add	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7ff f806 	bl	80021d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c8:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <xTaskResumeAll+0x12c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80031d2:	4b22      	ldr	r3, [pc, #136]	@ (800325c <xTaskResumeAll+0x130>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031d8:	4b1c      	ldr	r3, [pc, #112]	@ (800324c <xTaskResumeAll+0x120>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1cc      	bne.n	800317a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031e6:	f000 fb39 	bl	800385c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003260 <xTaskResumeAll+0x134>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031f6:	f000 f847 	bl	8003288 <xTaskIncrementTick>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003200:	4b16      	ldr	r3, [pc, #88]	@ (800325c <xTaskResumeAll+0x130>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3b01      	subs	r3, #1
 800320a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f1      	bne.n	80031f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003212:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <xTaskResumeAll+0x134>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003218:	4b10      	ldr	r3, [pc, #64]	@ (800325c <xTaskResumeAll+0x130>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d009      	beq.n	8003234 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003220:	2301      	movs	r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003224:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <xTaskResumeAll+0x138>)
 8003226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003234:	f000 fda2 	bl	8003d7c <vPortExitCritical>

	return xAlreadyYielded;
 8003238:	68bb      	ldr	r3, [r7, #8]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000498 	.word	0x20000498
 8003248:	20000470 	.word	0x20000470
 800324c:	20000430 	.word	0x20000430
 8003250:	20000478 	.word	0x20000478
 8003254:	20000374 	.word	0x20000374
 8003258:	20000370 	.word	0x20000370
 800325c:	20000484 	.word	0x20000484
 8003260:	20000480 	.word	0x20000480
 8003264:	e000ed04 	.word	0xe000ed04

08003268 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800326e:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <xTaskGetTickCount+0x1c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003274:	687b      	ldr	r3, [r7, #4]
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000474 	.word	0x20000474

08003288 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003292:	4b4f      	ldr	r3, [pc, #316]	@ (80033d0 <xTaskIncrementTick+0x148>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 808f 	bne.w	80033ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800329c:	4b4d      	ldr	r3, [pc, #308]	@ (80033d4 <xTaskIncrementTick+0x14c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032a4:	4a4b      	ldr	r2, [pc, #300]	@ (80033d4 <xTaskIncrementTick+0x14c>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d121      	bne.n	80032f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80032b0:	4b49      	ldr	r3, [pc, #292]	@ (80033d8 <xTaskIncrementTick+0x150>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	603b      	str	r3, [r7, #0]
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	e7fd      	b.n	80032ce <xTaskIncrementTick+0x46>
 80032d2:	4b41      	ldr	r3, [pc, #260]	@ (80033d8 <xTaskIncrementTick+0x150>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	4b40      	ldr	r3, [pc, #256]	@ (80033dc <xTaskIncrementTick+0x154>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a3e      	ldr	r2, [pc, #248]	@ (80033d8 <xTaskIncrementTick+0x150>)
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4a3e      	ldr	r2, [pc, #248]	@ (80033dc <xTaskIncrementTick+0x154>)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b3e      	ldr	r3, [pc, #248]	@ (80033e0 <xTaskIncrementTick+0x158>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	4a3c      	ldr	r2, [pc, #240]	@ (80033e0 <xTaskIncrementTick+0x158>)
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	f000 fab4 	bl	800385c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032f4:	4b3b      	ldr	r3, [pc, #236]	@ (80033e4 <xTaskIncrementTick+0x15c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d348      	bcc.n	8003390 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032fe:	4b36      	ldr	r3, [pc, #216]	@ (80033d8 <xTaskIncrementTick+0x150>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003308:	4b36      	ldr	r3, [pc, #216]	@ (80033e4 <xTaskIncrementTick+0x15c>)
 800330a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800330e:	601a      	str	r2, [r3, #0]
					break;
 8003310:	e03e      	b.n	8003390 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003312:	4b31      	ldr	r3, [pc, #196]	@ (80033d8 <xTaskIncrementTick+0x150>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	429a      	cmp	r2, r3
 8003328:	d203      	bcs.n	8003332 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800332a:	4a2e      	ldr	r2, [pc, #184]	@ (80033e4 <xTaskIncrementTick+0x15c>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003330:	e02e      	b.n	8003390 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3304      	adds	r3, #4
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe ffa7 	bl	800228a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	3318      	adds	r3, #24
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe ff9e 	bl	800228a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	2201      	movs	r2, #1
 8003354:	409a      	lsls	r2, r3
 8003356:	4b24      	ldr	r3, [pc, #144]	@ (80033e8 <xTaskIncrementTick+0x160>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	4a22      	ldr	r2, [pc, #136]	@ (80033e8 <xTaskIncrementTick+0x160>)
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4a1f      	ldr	r2, [pc, #124]	@ (80033ec <xTaskIncrementTick+0x164>)
 800336e:	441a      	add	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	3304      	adds	r3, #4
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f7fe ff2a 	bl	80021d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003380:	4b1b      	ldr	r3, [pc, #108]	@ (80033f0 <xTaskIncrementTick+0x168>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003386:	429a      	cmp	r2, r3
 8003388:	d3b9      	bcc.n	80032fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800338a:	2301      	movs	r3, #1
 800338c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800338e:	e7b6      	b.n	80032fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003390:	4b17      	ldr	r3, [pc, #92]	@ (80033f0 <xTaskIncrementTick+0x168>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003396:	4915      	ldr	r1, [pc, #84]	@ (80033ec <xTaskIncrementTick+0x164>)
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d901      	bls.n	80033ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80033a8:	2301      	movs	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80033ac:	4b11      	ldr	r3, [pc, #68]	@ (80033f4 <xTaskIncrementTick+0x16c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80033b4:	2301      	movs	r3, #1
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	e004      	b.n	80033c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80033ba:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <xTaskIncrementTick+0x170>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	4a0d      	ldr	r2, [pc, #52]	@ (80033f8 <xTaskIncrementTick+0x170>)
 80033c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80033c4:	697b      	ldr	r3, [r7, #20]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000498 	.word	0x20000498
 80033d4:	20000474 	.word	0x20000474
 80033d8:	20000428 	.word	0x20000428
 80033dc:	2000042c 	.word	0x2000042c
 80033e0:	20000488 	.word	0x20000488
 80033e4:	20000490 	.word	0x20000490
 80033e8:	20000478 	.word	0x20000478
 80033ec:	20000374 	.word	0x20000374
 80033f0:	20000370 	.word	0x20000370
 80033f4:	20000484 	.word	0x20000484
 80033f8:	20000480 	.word	0x20000480

080033fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003402:	4b2a      	ldr	r3, [pc, #168]	@ (80034ac <vTaskSwitchContext+0xb0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800340a:	4b29      	ldr	r3, [pc, #164]	@ (80034b0 <vTaskSwitchContext+0xb4>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003410:	e045      	b.n	800349e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003412:	4b27      	ldr	r3, [pc, #156]	@ (80034b0 <vTaskSwitchContext+0xb4>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003418:	4b26      	ldr	r3, [pc, #152]	@ (80034b4 <vTaskSwitchContext+0xb8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	fab3 f383 	clz	r3, r3
 8003424:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003426:	7afb      	ldrb	r3, [r7, #11]
 8003428:	f1c3 031f 	rsb	r3, r3, #31
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	4922      	ldr	r1, [pc, #136]	@ (80034b8 <vTaskSwitchContext+0xbc>)
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10b      	bne.n	800345a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	607b      	str	r3, [r7, #4]
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	e7fd      	b.n	8003456 <vTaskSwitchContext+0x5a>
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4a14      	ldr	r2, [pc, #80]	@ (80034b8 <vTaskSwitchContext+0xbc>)
 8003466:	4413      	add	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	3308      	adds	r3, #8
 800347c:	429a      	cmp	r2, r3
 800347e:	d104      	bne.n	800348a <vTaskSwitchContext+0x8e>
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <vTaskSwitchContext+0xc0>)
 8003492:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003494:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <vTaskSwitchContext+0xc0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	334c      	adds	r3, #76	@ 0x4c
 800349a:	4a09      	ldr	r2, [pc, #36]	@ (80034c0 <vTaskSwitchContext+0xc4>)
 800349c:	6013      	str	r3, [r2, #0]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000498 	.word	0x20000498
 80034b0:	20000484 	.word	0x20000484
 80034b4:	20000478 	.word	0x20000478
 80034b8:	20000374 	.word	0x20000374
 80034bc:	20000370 	.word	0x20000370
 80034c0:	20000010 	.word	0x20000010

080034c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	60fb      	str	r3, [r7, #12]
}
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	e7fd      	b.n	80034e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ec:	4b07      	ldr	r3, [pc, #28]	@ (800350c <vTaskPlaceOnEventList+0x48>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3318      	adds	r3, #24
 80034f2:	4619      	mov	r1, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7fe fe8f 	bl	8002218 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034fa:	2101      	movs	r1, #1
 80034fc:	6838      	ldr	r0, [r7, #0]
 80034fe:	f000 fa73 	bl	80039e8 <prvAddCurrentTaskToDelayedList>
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000370 	.word	0x20000370

08003510 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10b      	bne.n	800353e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	60fb      	str	r3, [r7, #12]
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	e7fd      	b.n	800353a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	3318      	adds	r3, #24
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fea1 	bl	800228a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003548:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <xTaskRemoveFromEventList+0xb0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d11c      	bne.n	800358a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	3304      	adds	r3, #4
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fe98 	bl	800228a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	2201      	movs	r2, #1
 8003560:	409a      	lsls	r2, r3
 8003562:	4b18      	ldr	r3, [pc, #96]	@ (80035c4 <xTaskRemoveFromEventList+0xb4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	4a16      	ldr	r2, [pc, #88]	@ (80035c4 <xTaskRemoveFromEventList+0xb4>)
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4a13      	ldr	r2, [pc, #76]	@ (80035c8 <xTaskRemoveFromEventList+0xb8>)
 800357a:	441a      	add	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	3304      	adds	r3, #4
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f7fe fe24 	bl	80021d0 <vListInsertEnd>
 8003588:	e005      	b.n	8003596 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	3318      	adds	r3, #24
 800358e:	4619      	mov	r1, r3
 8003590:	480e      	ldr	r0, [pc, #56]	@ (80035cc <xTaskRemoveFromEventList+0xbc>)
 8003592:	f7fe fe1d 	bl	80021d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800359a:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <xTaskRemoveFromEventList+0xc0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d905      	bls.n	80035b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035a8:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <xTaskRemoveFromEventList+0xc4>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e001      	b.n	80035b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80035b4:	697b      	ldr	r3, [r7, #20]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000498 	.word	0x20000498
 80035c4:	20000478 	.word	0x20000478
 80035c8:	20000374 	.word	0x20000374
 80035cc:	20000430 	.word	0x20000430
 80035d0:	20000370 	.word	0x20000370
 80035d4:	20000484 	.word	0x20000484

080035d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035e0:	4b06      	ldr	r3, [pc, #24]	@ (80035fc <vTaskInternalSetTimeOutState+0x24>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035e8:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <vTaskInternalSetTimeOutState+0x28>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	605a      	str	r2, [r3, #4]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	20000488 	.word	0x20000488
 8003600:	20000474 	.word	0x20000474

08003604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	613b      	str	r3, [r7, #16]
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	e7fd      	b.n	8003628 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	60fb      	str	r3, [r7, #12]
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800364a:	f000 fb65 	bl	8003d18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800364e:	4b1d      	ldr	r3, [pc, #116]	@ (80036c4 <xTaskCheckForTimeOut+0xc0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003666:	d102      	bne.n	800366e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	e023      	b.n	80036b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b15      	ldr	r3, [pc, #84]	@ (80036c8 <xTaskCheckForTimeOut+0xc4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d007      	beq.n	800368a <xTaskCheckForTimeOut+0x86>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	429a      	cmp	r2, r3
 8003682:	d302      	bcc.n	800368a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003684:	2301      	movs	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e015      	b.n	80036b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	429a      	cmp	r2, r3
 8003692:	d20b      	bcs.n	80036ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	1ad2      	subs	r2, r2, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff99 	bl	80035d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e004      	b.n	80036b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036b2:	2301      	movs	r3, #1
 80036b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036b6:	f000 fb61 	bl	8003d7c <vPortExitCritical>

	return xReturn;
 80036ba:	69fb      	ldr	r3, [r7, #28]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000474 	.word	0x20000474
 80036c8:	20000488 	.word	0x20000488

080036cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036d0:	4b03      	ldr	r3, [pc, #12]	@ (80036e0 <vTaskMissedYield+0x14>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	20000484 	.word	0x20000484

080036e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036ec:	f000 f852 	bl	8003794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036f0:	4b06      	ldr	r3, [pc, #24]	@ (800370c <prvIdleTask+0x28>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d9f9      	bls.n	80036ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <prvIdleTask+0x2c>)
 80036fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003708:	e7f0      	b.n	80036ec <prvIdleTask+0x8>
 800370a:	bf00      	nop
 800370c:	20000374 	.word	0x20000374
 8003710:	e000ed04 	.word	0xe000ed04

08003714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	e00c      	b.n	800373a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4a12      	ldr	r2, [pc, #72]	@ (8003774 <prvInitialiseTaskLists+0x60>)
 800372c:	4413      	add	r3, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fd21 	bl	8002176 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3301      	adds	r3, #1
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b06      	cmp	r3, #6
 800373e:	d9ef      	bls.n	8003720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003740:	480d      	ldr	r0, [pc, #52]	@ (8003778 <prvInitialiseTaskLists+0x64>)
 8003742:	f7fe fd18 	bl	8002176 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003746:	480d      	ldr	r0, [pc, #52]	@ (800377c <prvInitialiseTaskLists+0x68>)
 8003748:	f7fe fd15 	bl	8002176 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800374c:	480c      	ldr	r0, [pc, #48]	@ (8003780 <prvInitialiseTaskLists+0x6c>)
 800374e:	f7fe fd12 	bl	8002176 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003752:	480c      	ldr	r0, [pc, #48]	@ (8003784 <prvInitialiseTaskLists+0x70>)
 8003754:	f7fe fd0f 	bl	8002176 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003758:	480b      	ldr	r0, [pc, #44]	@ (8003788 <prvInitialiseTaskLists+0x74>)
 800375a:	f7fe fd0c 	bl	8002176 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800375e:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <prvInitialiseTaskLists+0x78>)
 8003760:	4a05      	ldr	r2, [pc, #20]	@ (8003778 <prvInitialiseTaskLists+0x64>)
 8003762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003764:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <prvInitialiseTaskLists+0x7c>)
 8003766:	4a05      	ldr	r2, [pc, #20]	@ (800377c <prvInitialiseTaskLists+0x68>)
 8003768:	601a      	str	r2, [r3, #0]
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000374 	.word	0x20000374
 8003778:	20000400 	.word	0x20000400
 800377c:	20000414 	.word	0x20000414
 8003780:	20000430 	.word	0x20000430
 8003784:	20000444 	.word	0x20000444
 8003788:	2000045c 	.word	0x2000045c
 800378c:	20000428 	.word	0x20000428
 8003790:	2000042c 	.word	0x2000042c

08003794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800379a:	e019      	b.n	80037d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800379c:	f000 fabc 	bl	8003d18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037a0:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <prvCheckTasksWaitingTermination+0x50>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe fd6c 	bl	800228a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <prvCheckTasksWaitingTermination+0x54>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	4a0b      	ldr	r2, [pc, #44]	@ (80037e8 <prvCheckTasksWaitingTermination+0x54>)
 80037ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037bc:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <prvCheckTasksWaitingTermination+0x58>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	4a0a      	ldr	r2, [pc, #40]	@ (80037ec <prvCheckTasksWaitingTermination+0x58>)
 80037c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037c6:	f000 fad9 	bl	8003d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f810 	bl	80037f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037d0:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <prvCheckTasksWaitingTermination+0x58>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e1      	bne.n	800379c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000444 	.word	0x20000444
 80037e8:	20000470 	.word	0x20000470
 80037ec:	20000458 	.word	0x20000458

080037f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	334c      	adds	r3, #76	@ 0x4c
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fd61 	bl	80042c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003808:	2b00      	cmp	r3, #0
 800380a:	d108      	bne.n	800381e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fc2f 	bl	8004074 <vPortFree>
				vPortFree( pxTCB );
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fc2c 	bl	8004074 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800381c:	e019      	b.n	8003852 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003824:	2b01      	cmp	r3, #1
 8003826:	d103      	bne.n	8003830 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fc23 	bl	8004074 <vPortFree>
	}
 800382e:	e010      	b.n	8003852 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003836:	2b02      	cmp	r3, #2
 8003838:	d00b      	beq.n	8003852 <prvDeleteTCB+0x62>
	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	60fb      	str	r3, [r7, #12]
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <prvDeleteTCB+0x5e>
	}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003862:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <prvResetNextTaskUnblockTime+0x38>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d104      	bne.n	8003876 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800386c:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <prvResetNextTaskUnblockTime+0x3c>)
 800386e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003872:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003874:	e008      	b.n	8003888 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003876:	4b07      	ldr	r3, [pc, #28]	@ (8003894 <prvResetNextTaskUnblockTime+0x38>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <prvResetNextTaskUnblockTime+0x3c>)
 8003886:	6013      	str	r3, [r2, #0]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	20000428 	.word	0x20000428
 8003898:	20000490 	.word	0x20000490

0800389c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038a2:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <xTaskGetSchedulerState+0x34>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038aa:	2301      	movs	r3, #1
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	e008      	b.n	80038c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b0:	4b08      	ldr	r3, [pc, #32]	@ (80038d4 <xTaskGetSchedulerState+0x38>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038b8:	2302      	movs	r3, #2
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	e001      	b.n	80038c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038c2:	687b      	ldr	r3, [r7, #4]
	}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	2000047c 	.word	0x2000047c
 80038d4:	20000498 	.word	0x20000498

080038d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d070      	beq.n	80039d0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038ee:	4b3b      	ldr	r3, [pc, #236]	@ (80039dc <xTaskPriorityDisinherit+0x104>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d00b      	beq.n	8003910 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	60fb      	str	r3, [r7, #12]
}
 800390a:	bf00      	nop
 800390c:	bf00      	nop
 800390e:	e7fd      	b.n	800390c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	60bb      	str	r3, [r7, #8]
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003934:	1e5a      	subs	r2, r3, #1
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	429a      	cmp	r2, r3
 8003944:	d044      	beq.n	80039d0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394a:	2b00      	cmp	r3, #0
 800394c:	d140      	bne.n	80039d0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	3304      	adds	r3, #4
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fc99 	bl	800228a <uxListRemove>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d115      	bne.n	800398a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003962:	491f      	ldr	r1, [pc, #124]	@ (80039e0 <xTaskPriorityDisinherit+0x108>)
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <xTaskPriorityDisinherit+0xb2>
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	2201      	movs	r2, #1
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	4b18      	ldr	r3, [pc, #96]	@ (80039e4 <xTaskPriorityDisinherit+0x10c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4013      	ands	r3, r2
 8003986:	4a17      	ldr	r2, [pc, #92]	@ (80039e4 <xTaskPriorityDisinherit+0x10c>)
 8003988:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	f1c3 0207 	rsb	r2, r3, #7
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	2201      	movs	r2, #1
 80039a4:	409a      	lsls	r2, r3
 80039a6:	4b0f      	ldr	r3, [pc, #60]	@ (80039e4 <xTaskPriorityDisinherit+0x10c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	4a0d      	ldr	r2, [pc, #52]	@ (80039e4 <xTaskPriorityDisinherit+0x10c>)
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4a08      	ldr	r2, [pc, #32]	@ (80039e0 <xTaskPriorityDisinherit+0x108>)
 80039be:	441a      	add	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f7fe fc02 	bl	80021d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039cc:	2301      	movs	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039d0:	697b      	ldr	r3, [r7, #20]
	}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000370 	.word	0x20000370
 80039e0:	20000374 	.word	0x20000374
 80039e4:	20000478 	.word	0x20000478

080039e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039f2:	4b29      	ldr	r3, [pc, #164]	@ (8003a98 <prvAddCurrentTaskToDelayedList+0xb0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039f8:	4b28      	ldr	r3, [pc, #160]	@ (8003a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3304      	adds	r3, #4
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe fc43 	bl	800228a <uxListRemove>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a0a:	4b24      	ldr	r3, [pc, #144]	@ (8003a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	2201      	movs	r2, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	4b21      	ldr	r3, [pc, #132]	@ (8003aa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	4a20      	ldr	r2, [pc, #128]	@ (8003aa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a28:	d10a      	bne.n	8003a40 <prvAddCurrentTaskToDelayedList+0x58>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a30:	4b1a      	ldr	r3, [pc, #104]	@ (8003a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3304      	adds	r3, #4
 8003a36:	4619      	mov	r1, r3
 8003a38:	481a      	ldr	r0, [pc, #104]	@ (8003aa4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003a3a:	f7fe fbc9 	bl	80021d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a3e:	e026      	b.n	8003a8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a48:	4b14      	ldr	r3, [pc, #80]	@ (8003a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d209      	bcs.n	8003a6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a58:	4b13      	ldr	r3, [pc, #76]	@ (8003aa8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f7fe fbd7 	bl	8002218 <vListInsert>
}
 8003a6a:	e010      	b.n	8003a8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003aac <prvAddCurrentTaskToDelayedList+0xc4>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4619      	mov	r1, r3
 8003a78:	4610      	mov	r0, r2
 8003a7a:	f7fe fbcd 	bl	8002218 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d202      	bcs.n	8003a8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003a88:	4a09      	ldr	r2, [pc, #36]	@ (8003ab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6013      	str	r3, [r2, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000474 	.word	0x20000474
 8003a9c:	20000370 	.word	0x20000370
 8003aa0:	20000478 	.word	0x20000478
 8003aa4:	2000045c 	.word	0x2000045c
 8003aa8:	2000042c 	.word	0x2000042c
 8003aac:	20000428 	.word	0x20000428
 8003ab0:	20000490 	.word	0x20000490

08003ab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3b04      	subs	r3, #4
 8003ac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3b04      	subs	r3, #4
 8003ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0201 	bic.w	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3b04      	subs	r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8003b18 <pxPortInitialiseStack+0x64>)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3b14      	subs	r3, #20
 8003aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3b04      	subs	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f06f 0202 	mvn.w	r2, #2
 8003b02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3b20      	subs	r3, #32
 8003b08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	08003b1d 	.word	0x08003b1d

08003b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b26:	4b13      	ldr	r3, [pc, #76]	@ (8003b74 <prvTaskExitError+0x58>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b2e:	d00b      	beq.n	8003b48 <prvTaskExitError+0x2c>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60fb      	str	r3, [r7, #12]
}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <prvTaskExitError+0x28>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	60bb      	str	r3, [r7, #8]
}
 8003b5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b5c:	bf00      	nop
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0fc      	beq.n	8003b5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	2000000c 	.word	0x2000000c
	...

08003b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b80:	4b07      	ldr	r3, [pc, #28]	@ (8003ba0 <pxCurrentTCBConst2>)
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	6808      	ldr	r0, [r1, #0]
 8003b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	f380 8809 	msr	PSP, r0
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8811 	msr	BASEPRI, r0
 8003b9a:	4770      	bx	lr
 8003b9c:	f3af 8000 	nop.w

08003ba0 <pxCurrentTCBConst2>:
 8003ba0:	20000370 	.word	0x20000370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop

08003ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ba8:	4808      	ldr	r0, [pc, #32]	@ (8003bcc <prvPortStartFirstTask+0x24>)
 8003baa:	6800      	ldr	r0, [r0, #0]
 8003bac:	6800      	ldr	r0, [r0, #0]
 8003bae:	f380 8808 	msr	MSP, r0
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8814 	msr	CONTROL, r0
 8003bba:	b662      	cpsie	i
 8003bbc:	b661      	cpsie	f
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	df00      	svc	0
 8003bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003bca:	bf00      	nop
 8003bcc:	e000ed08 	.word	0xe000ed08

08003bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bd6:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <xPortStartScheduler+0x124>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a47      	ldr	r2, [pc, #284]	@ (8003cf8 <xPortStartScheduler+0x128>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10b      	bne.n	8003bf8 <xPortStartScheduler+0x28>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	613b      	str	r3, [r7, #16]
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf4 <xPortStartScheduler+0x124>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8003cfc <xPortStartScheduler+0x12c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10b      	bne.n	8003c1a <xPortStartScheduler+0x4a>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60fb      	str	r3, [r7, #12]
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	e7fd      	b.n	8003c16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c1a:	4b39      	ldr	r3, [pc, #228]	@ (8003d00 <xPortStartScheduler+0x130>)
 8003c1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	22ff      	movs	r2, #255	@ 0xff
 8003c2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4b31      	ldr	r3, [pc, #196]	@ (8003d04 <xPortStartScheduler+0x134>)
 8003c40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c42:	4b31      	ldr	r3, [pc, #196]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c48:	e009      	b.n	8003c5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	4a2d      	ldr	r2, [pc, #180]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c66:	2b80      	cmp	r3, #128	@ 0x80
 8003c68:	d0ef      	beq.n	8003c4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c6a:	4b27      	ldr	r3, [pc, #156]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1c3 0307 	rsb	r3, r3, #7
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d00b      	beq.n	8003c8e <xPortStartScheduler+0xbe>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	60bb      	str	r3, [r7, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	e7fd      	b.n	8003c8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c98:	4b1b      	ldr	r3, [pc, #108]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ca0:	4a19      	ldr	r2, [pc, #100]	@ (8003d08 <xPortStartScheduler+0x138>)
 8003ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003cac:	4b17      	ldr	r3, [pc, #92]	@ (8003d0c <xPortStartScheduler+0x13c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a16      	ldr	r2, [pc, #88]	@ (8003d0c <xPortStartScheduler+0x13c>)
 8003cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003cb8:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <xPortStartScheduler+0x13c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	@ (8003d0c <xPortStartScheduler+0x13c>)
 8003cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003cc4:	f000 f8da 	bl	8003e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <xPortStartScheduler+0x140>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003cce:	f000 f8f9 	bl	8003ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cd2:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <xPortStartScheduler+0x144>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8003d14 <xPortStartScheduler+0x144>)
 8003cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003cde:	f7ff ff63 	bl	8003ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ce2:	f7ff fb8b 	bl	80033fc <vTaskSwitchContext>
	prvTaskExitError();
 8003ce6:	f7ff ff19 	bl	8003b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	e000ed00 	.word	0xe000ed00
 8003cf8:	410fc271 	.word	0x410fc271
 8003cfc:	410fc270 	.word	0x410fc270
 8003d00:	e000e400 	.word	0xe000e400
 8003d04:	2000049c 	.word	0x2000049c
 8003d08:	200004a0 	.word	0x200004a0
 8003d0c:	e000ed20 	.word	0xe000ed20
 8003d10:	2000000c 	.word	0x2000000c
 8003d14:	e000ef34 	.word	0xe000ef34

08003d18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	607b      	str	r3, [r7, #4]
}
 8003d30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d32:	4b10      	ldr	r3, [pc, #64]	@ (8003d74 <vPortEnterCritical+0x5c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a0e      	ldr	r2, [pc, #56]	@ (8003d74 <vPortEnterCritical+0x5c>)
 8003d3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <vPortEnterCritical+0x5c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d110      	bne.n	8003d66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d44:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <vPortEnterCritical+0x60>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <vPortEnterCritical+0x4e>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	603b      	str	r3, [r7, #0]
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	e7fd      	b.n	8003d62 <vPortEnterCritical+0x4a>
	}
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	2000000c 	.word	0x2000000c
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d82:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <vPortExitCritical+0x50>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <vPortExitCritical+0x26>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	607b      	str	r3, [r7, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003da2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <vPortExitCritical+0x50>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	4a08      	ldr	r2, [pc, #32]	@ (8003dcc <vPortExitCritical+0x50>)
 8003daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <vPortExitCritical+0x50>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <vPortExitCritical+0x44>
 8003db4:	2300      	movs	r3, #0
 8003db6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	2000000c 	.word	0x2000000c

08003dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003dd0:	f3ef 8009 	mrs	r0, PSP
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <pxCurrentTCBConst>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	f01e 0f10 	tst.w	lr, #16
 8003de0:	bf08      	it	eq
 8003de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dea:	6010      	str	r0, [r2, #0]
 8003dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003df4:	f380 8811 	msr	BASEPRI, r0
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f7ff fafc 	bl	80033fc <vTaskSwitchContext>
 8003e04:	f04f 0000 	mov.w	r0, #0
 8003e08:	f380 8811 	msr	BASEPRI, r0
 8003e0c:	bc09      	pop	{r0, r3}
 8003e0e:	6819      	ldr	r1, [r3, #0]
 8003e10:	6808      	ldr	r0, [r1, #0]
 8003e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e16:	f01e 0f10 	tst.w	lr, #16
 8003e1a:	bf08      	it	eq
 8003e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e20:	f380 8809 	msr	PSP, r0
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	f3af 8000 	nop.w

08003e30 <pxCurrentTCBConst>:
 8003e30:	20000370 	.word	0x20000370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop

08003e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	607b      	str	r3, [r7, #4]
}
 8003e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e52:	f7ff fa19 	bl	8003288 <xTaskIncrementTick>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e5c:	4b06      	ldr	r3, [pc, #24]	@ (8003e78 <SysTick_Handler+0x40>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f383 8811 	msr	BASEPRI, r3
}
 8003e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <vPortSetupTimerInterrupt+0x34>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <vPortSetupTimerInterrupt+0x38>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <vPortSetupTimerInterrupt+0x3c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	@ (8003ebc <vPortSetupTimerInterrupt+0x40>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	4a09      	ldr	r2, [pc, #36]	@ (8003ec0 <vPortSetupTimerInterrupt+0x44>)
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e9e:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <vPortSetupTimerInterrupt+0x34>)
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	e000e010 	.word	0xe000e010
 8003eb4:	e000e018 	.word	0xe000e018
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	10624dd3 	.word	0x10624dd3
 8003ec0:	e000e014 	.word	0xe000e014

08003ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003ed4 <vPortEnableVFP+0x10>
 8003ec8:	6801      	ldr	r1, [r0, #0]
 8003eca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003ece:	6001      	str	r1, [r0, #0]
 8003ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ed2:	bf00      	nop
 8003ed4:	e000ed88 	.word	0xe000ed88

08003ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	@ 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ee4:	f7ff f914 	bl	8003110 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ee8:	4b5c      	ldr	r3, [pc, #368]	@ (800405c <pvPortMalloc+0x184>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ef0:	f000 f924 	bl	800413c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8004060 <pvPortMalloc+0x188>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f040 8095 	bne.w	800402c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01e      	beq.n	8003f46 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003f08:	2208      	movs	r2, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d015      	beq.n	8003f46 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f023 0307 	bic.w	r3, r3, #7
 8003f20:	3308      	adds	r3, #8
 8003f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <pvPortMalloc+0x6e>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	617b      	str	r3, [r7, #20]
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	e7fd      	b.n	8003f42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d06f      	beq.n	800402c <pvPortMalloc+0x154>
 8003f4c:	4b45      	ldr	r3, [pc, #276]	@ (8004064 <pvPortMalloc+0x18c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d86a      	bhi.n	800402c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f56:	4b44      	ldr	r3, [pc, #272]	@ (8004068 <pvPortMalloc+0x190>)
 8003f58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f5a:	4b43      	ldr	r3, [pc, #268]	@ (8004068 <pvPortMalloc+0x190>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f60:	e004      	b.n	8003f6c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d903      	bls.n	8003f7e <pvPortMalloc+0xa6>
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f1      	bne.n	8003f62 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f7e:	4b37      	ldr	r3, [pc, #220]	@ (800405c <pvPortMalloc+0x184>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d051      	beq.n	800402c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	4413      	add	r3, r2
 8003f90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	1ad2      	subs	r2, r2, r3
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d920      	bls.n	8003fec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4413      	add	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00b      	beq.n	8003fd4 <pvPortMalloc+0xfc>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	613b      	str	r3, [r7, #16]
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	1ad2      	subs	r2, r2, r3
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fe6:	69b8      	ldr	r0, [r7, #24]
 8003fe8:	f000 f90a 	bl	8004200 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fec:	4b1d      	ldr	r3, [pc, #116]	@ (8004064 <pvPortMalloc+0x18c>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8004064 <pvPortMalloc+0x18c>)
 8003ff8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8004064 <pvPortMalloc+0x18c>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <pvPortMalloc+0x194>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d203      	bcs.n	800400e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004006:	4b17      	ldr	r3, [pc, #92]	@ (8004064 <pvPortMalloc+0x18c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a18      	ldr	r2, [pc, #96]	@ (800406c <pvPortMalloc+0x194>)
 800400c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	4b13      	ldr	r3, [pc, #76]	@ (8004060 <pvPortMalloc+0x188>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	431a      	orrs	r2, r3
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004022:	4b13      	ldr	r3, [pc, #76]	@ (8004070 <pvPortMalloc+0x198>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	4a11      	ldr	r2, [pc, #68]	@ (8004070 <pvPortMalloc+0x198>)
 800402a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800402c:	f7ff f87e 	bl	800312c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <pvPortMalloc+0x17a>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	60fb      	str	r3, [r7, #12]
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	e7fd      	b.n	800404e <pvPortMalloc+0x176>
	return pvReturn;
 8004052:	69fb      	ldr	r3, [r7, #28]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3728      	adds	r7, #40	@ 0x28
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	200040ac 	.word	0x200040ac
 8004060:	200040c0 	.word	0x200040c0
 8004064:	200040b0 	.word	0x200040b0
 8004068:	200040a4 	.word	0x200040a4
 800406c:	200040b4 	.word	0x200040b4
 8004070:	200040b8 	.word	0x200040b8

08004074 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d04f      	beq.n	8004126 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004086:	2308      	movs	r3, #8
 8004088:	425b      	negs	r3, r3
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4413      	add	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	4b25      	ldr	r3, [pc, #148]	@ (8004130 <vPortFree+0xbc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <vPortFree+0x46>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60fb      	str	r3, [r7, #12]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <vPortFree+0x66>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	60bb      	str	r3, [r7, #8]
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	e7fd      	b.n	80040d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	4b14      	ldr	r3, [pc, #80]	@ (8004130 <vPortFree+0xbc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01e      	beq.n	8004126 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d11a      	bne.n	8004126 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004130 <vPortFree+0xbc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004100:	f7ff f806 	bl	8003110 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	4b0a      	ldr	r3, [pc, #40]	@ (8004134 <vPortFree+0xc0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4413      	add	r3, r2
 800410e:	4a09      	ldr	r2, [pc, #36]	@ (8004134 <vPortFree+0xc0>)
 8004110:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004112:	6938      	ldr	r0, [r7, #16]
 8004114:	f000 f874 	bl	8004200 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004118:	4b07      	ldr	r3, [pc, #28]	@ (8004138 <vPortFree+0xc4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	4a06      	ldr	r2, [pc, #24]	@ (8004138 <vPortFree+0xc4>)
 8004120:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004122:	f7ff f803 	bl	800312c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	200040c0 	.word	0x200040c0
 8004134:	200040b0 	.word	0x200040b0
 8004138:	200040bc 	.word	0x200040bc

0800413c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004142:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004146:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004148:	4b27      	ldr	r3, [pc, #156]	@ (80041e8 <prvHeapInit+0xac>)
 800414a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3307      	adds	r3, #7
 800415a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0307 	bic.w	r3, r3, #7
 8004162:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	4a1f      	ldr	r2, [pc, #124]	@ (80041e8 <prvHeapInit+0xac>)
 800416c:	4413      	add	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004174:	4a1d      	ldr	r2, [pc, #116]	@ (80041ec <prvHeapInit+0xb0>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800417a:	4b1c      	ldr	r3, [pc, #112]	@ (80041ec <prvHeapInit+0xb0>)
 800417c:	2200      	movs	r2, #0
 800417e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	4413      	add	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004188:	2208      	movs	r2, #8
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0307 	bic.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a15      	ldr	r2, [pc, #84]	@ (80041f0 <prvHeapInit+0xb4>)
 800419c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800419e:	4b14      	ldr	r3, [pc, #80]	@ (80041f0 <prvHeapInit+0xb4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041a6:	4b12      	ldr	r3, [pc, #72]	@ (80041f0 <prvHeapInit+0xb4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	1ad2      	subs	r2, r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041bc:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <prvHeapInit+0xb4>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a0a      	ldr	r2, [pc, #40]	@ (80041f4 <prvHeapInit+0xb8>)
 80041ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <prvHeapInit+0xbc>)
 80041d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041d4:	4b09      	ldr	r3, [pc, #36]	@ (80041fc <prvHeapInit+0xc0>)
 80041d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80041da:	601a      	str	r2, [r3, #0]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	200004a4 	.word	0x200004a4
 80041ec:	200040a4 	.word	0x200040a4
 80041f0:	200040ac 	.word	0x200040ac
 80041f4:	200040b4 	.word	0x200040b4
 80041f8:	200040b0 	.word	0x200040b0
 80041fc:	200040c0 	.word	0x200040c0

08004200 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004208:	4b28      	ldr	r3, [pc, #160]	@ (80042ac <prvInsertBlockIntoFreeList+0xac>)
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e002      	b.n	8004214 <prvInsertBlockIntoFreeList+0x14>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	d8f7      	bhi.n	800420e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4413      	add	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d108      	bne.n	8004242 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	441a      	add	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	441a      	add	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d118      	bne.n	8004288 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b15      	ldr	r3, [pc, #84]	@ (80042b0 <prvInsertBlockIntoFreeList+0xb0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d00d      	beq.n	800427e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e008      	b.n	8004290 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800427e:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <prvInsertBlockIntoFreeList+0xb0>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e003      	b.n	8004290 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d002      	beq.n	800429e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	200040a4 	.word	0x200040a4
 80042b0:	200040ac 	.word	0x200040ac

080042b4 <memset>:
 80042b4:	4402      	add	r2, r0
 80042b6:	4603      	mov	r3, r0
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d100      	bne.n	80042be <memset+0xa>
 80042bc:	4770      	bx	lr
 80042be:	f803 1b01 	strb.w	r1, [r3], #1
 80042c2:	e7f9      	b.n	80042b8 <memset+0x4>

080042c4 <_reclaim_reent>:
 80042c4:	4b29      	ldr	r3, [pc, #164]	@ (800436c <_reclaim_reent+0xa8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4283      	cmp	r3, r0
 80042ca:	b570      	push	{r4, r5, r6, lr}
 80042cc:	4604      	mov	r4, r0
 80042ce:	d04b      	beq.n	8004368 <_reclaim_reent+0xa4>
 80042d0:	69c3      	ldr	r3, [r0, #28]
 80042d2:	b1ab      	cbz	r3, 8004300 <_reclaim_reent+0x3c>
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	b16b      	cbz	r3, 80042f4 <_reclaim_reent+0x30>
 80042d8:	2500      	movs	r5, #0
 80042da:	69e3      	ldr	r3, [r4, #28]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	5959      	ldr	r1, [r3, r5]
 80042e0:	2900      	cmp	r1, #0
 80042e2:	d13b      	bne.n	800435c <_reclaim_reent+0x98>
 80042e4:	3504      	adds	r5, #4
 80042e6:	2d80      	cmp	r5, #128	@ 0x80
 80042e8:	d1f7      	bne.n	80042da <_reclaim_reent+0x16>
 80042ea:	69e3      	ldr	r3, [r4, #28]
 80042ec:	4620      	mov	r0, r4
 80042ee:	68d9      	ldr	r1, [r3, #12]
 80042f0:	f000 f872 	bl	80043d8 <_free_r>
 80042f4:	69e3      	ldr	r3, [r4, #28]
 80042f6:	6819      	ldr	r1, [r3, #0]
 80042f8:	b111      	cbz	r1, 8004300 <_reclaim_reent+0x3c>
 80042fa:	4620      	mov	r0, r4
 80042fc:	f000 f86c 	bl	80043d8 <_free_r>
 8004300:	6961      	ldr	r1, [r4, #20]
 8004302:	b111      	cbz	r1, 800430a <_reclaim_reent+0x46>
 8004304:	4620      	mov	r0, r4
 8004306:	f000 f867 	bl	80043d8 <_free_r>
 800430a:	69e1      	ldr	r1, [r4, #28]
 800430c:	b111      	cbz	r1, 8004314 <_reclaim_reent+0x50>
 800430e:	4620      	mov	r0, r4
 8004310:	f000 f862 	bl	80043d8 <_free_r>
 8004314:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004316:	b111      	cbz	r1, 800431e <_reclaim_reent+0x5a>
 8004318:	4620      	mov	r0, r4
 800431a:	f000 f85d 	bl	80043d8 <_free_r>
 800431e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004320:	b111      	cbz	r1, 8004328 <_reclaim_reent+0x64>
 8004322:	4620      	mov	r0, r4
 8004324:	f000 f858 	bl	80043d8 <_free_r>
 8004328:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800432a:	b111      	cbz	r1, 8004332 <_reclaim_reent+0x6e>
 800432c:	4620      	mov	r0, r4
 800432e:	f000 f853 	bl	80043d8 <_free_r>
 8004332:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004334:	b111      	cbz	r1, 800433c <_reclaim_reent+0x78>
 8004336:	4620      	mov	r0, r4
 8004338:	f000 f84e 	bl	80043d8 <_free_r>
 800433c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800433e:	b111      	cbz	r1, 8004346 <_reclaim_reent+0x82>
 8004340:	4620      	mov	r0, r4
 8004342:	f000 f849 	bl	80043d8 <_free_r>
 8004346:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004348:	b111      	cbz	r1, 8004350 <_reclaim_reent+0x8c>
 800434a:	4620      	mov	r0, r4
 800434c:	f000 f844 	bl	80043d8 <_free_r>
 8004350:	6a23      	ldr	r3, [r4, #32]
 8004352:	b14b      	cbz	r3, 8004368 <_reclaim_reent+0xa4>
 8004354:	4620      	mov	r0, r4
 8004356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800435a:	4718      	bx	r3
 800435c:	680e      	ldr	r6, [r1, #0]
 800435e:	4620      	mov	r0, r4
 8004360:	f000 f83a 	bl	80043d8 <_free_r>
 8004364:	4631      	mov	r1, r6
 8004366:	e7bb      	b.n	80042e0 <_reclaim_reent+0x1c>
 8004368:	bd70      	pop	{r4, r5, r6, pc}
 800436a:	bf00      	nop
 800436c:	20000010 	.word	0x20000010

08004370 <__libc_init_array>:
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	4d0d      	ldr	r5, [pc, #52]	@ (80043a8 <__libc_init_array+0x38>)
 8004374:	4c0d      	ldr	r4, [pc, #52]	@ (80043ac <__libc_init_array+0x3c>)
 8004376:	1b64      	subs	r4, r4, r5
 8004378:	10a4      	asrs	r4, r4, #2
 800437a:	2600      	movs	r6, #0
 800437c:	42a6      	cmp	r6, r4
 800437e:	d109      	bne.n	8004394 <__libc_init_array+0x24>
 8004380:	4d0b      	ldr	r5, [pc, #44]	@ (80043b0 <__libc_init_array+0x40>)
 8004382:	4c0c      	ldr	r4, [pc, #48]	@ (80043b4 <__libc_init_array+0x44>)
 8004384:	f000 f87e 	bl	8004484 <_init>
 8004388:	1b64      	subs	r4, r4, r5
 800438a:	10a4      	asrs	r4, r4, #2
 800438c:	2600      	movs	r6, #0
 800438e:	42a6      	cmp	r6, r4
 8004390:	d105      	bne.n	800439e <__libc_init_array+0x2e>
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	f855 3b04 	ldr.w	r3, [r5], #4
 8004398:	4798      	blx	r3
 800439a:	3601      	adds	r6, #1
 800439c:	e7ee      	b.n	800437c <__libc_init_array+0xc>
 800439e:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a2:	4798      	blx	r3
 80043a4:	3601      	adds	r6, #1
 80043a6:	e7f2      	b.n	800438e <__libc_init_array+0x1e>
 80043a8:	08004524 	.word	0x08004524
 80043ac:	08004524 	.word	0x08004524
 80043b0:	08004524 	.word	0x08004524
 80043b4:	08004528 	.word	0x08004528

080043b8 <__retarget_lock_acquire_recursive>:
 80043b8:	4770      	bx	lr

080043ba <__retarget_lock_release_recursive>:
 80043ba:	4770      	bx	lr

080043bc <memcpy>:
 80043bc:	440a      	add	r2, r1
 80043be:	4291      	cmp	r1, r2
 80043c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80043c4:	d100      	bne.n	80043c8 <memcpy+0xc>
 80043c6:	4770      	bx	lr
 80043c8:	b510      	push	{r4, lr}
 80043ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043d2:	4291      	cmp	r1, r2
 80043d4:	d1f9      	bne.n	80043ca <memcpy+0xe>
 80043d6:	bd10      	pop	{r4, pc}

080043d8 <_free_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4605      	mov	r5, r0
 80043dc:	2900      	cmp	r1, #0
 80043de:	d041      	beq.n	8004464 <_free_r+0x8c>
 80043e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e4:	1f0c      	subs	r4, r1, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bfb8      	it	lt
 80043ea:	18e4      	addlt	r4, r4, r3
 80043ec:	f000 f83e 	bl	800446c <__malloc_lock>
 80043f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <_free_r+0x90>)
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	b933      	cbnz	r3, 8004404 <_free_r+0x2c>
 80043f6:	6063      	str	r3, [r4, #4]
 80043f8:	6014      	str	r4, [r2, #0]
 80043fa:	4628      	mov	r0, r5
 80043fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004400:	f000 b83a 	b.w	8004478 <__malloc_unlock>
 8004404:	42a3      	cmp	r3, r4
 8004406:	d908      	bls.n	800441a <_free_r+0x42>
 8004408:	6820      	ldr	r0, [r4, #0]
 800440a:	1821      	adds	r1, r4, r0
 800440c:	428b      	cmp	r3, r1
 800440e:	bf01      	itttt	eq
 8004410:	6819      	ldreq	r1, [r3, #0]
 8004412:	685b      	ldreq	r3, [r3, #4]
 8004414:	1809      	addeq	r1, r1, r0
 8004416:	6021      	streq	r1, [r4, #0]
 8004418:	e7ed      	b.n	80043f6 <_free_r+0x1e>
 800441a:	461a      	mov	r2, r3
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	b10b      	cbz	r3, 8004424 <_free_r+0x4c>
 8004420:	42a3      	cmp	r3, r4
 8004422:	d9fa      	bls.n	800441a <_free_r+0x42>
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	1850      	adds	r0, r2, r1
 8004428:	42a0      	cmp	r0, r4
 800442a:	d10b      	bne.n	8004444 <_free_r+0x6c>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	4401      	add	r1, r0
 8004430:	1850      	adds	r0, r2, r1
 8004432:	4283      	cmp	r3, r0
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	d1e0      	bne.n	80043fa <_free_r+0x22>
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	6053      	str	r3, [r2, #4]
 800443e:	4408      	add	r0, r1
 8004440:	6010      	str	r0, [r2, #0]
 8004442:	e7da      	b.n	80043fa <_free_r+0x22>
 8004444:	d902      	bls.n	800444c <_free_r+0x74>
 8004446:	230c      	movs	r3, #12
 8004448:	602b      	str	r3, [r5, #0]
 800444a:	e7d6      	b.n	80043fa <_free_r+0x22>
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	1821      	adds	r1, r4, r0
 8004450:	428b      	cmp	r3, r1
 8004452:	bf04      	itt	eq
 8004454:	6819      	ldreq	r1, [r3, #0]
 8004456:	685b      	ldreq	r3, [r3, #4]
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	bf04      	itt	eq
 800445c:	1809      	addeq	r1, r1, r0
 800445e:	6021      	streq	r1, [r4, #0]
 8004460:	6054      	str	r4, [r2, #4]
 8004462:	e7ca      	b.n	80043fa <_free_r+0x22>
 8004464:	bd38      	pop	{r3, r4, r5, pc}
 8004466:	bf00      	nop
 8004468:	20004200 	.word	0x20004200

0800446c <__malloc_lock>:
 800446c:	4801      	ldr	r0, [pc, #4]	@ (8004474 <__malloc_lock+0x8>)
 800446e:	f7ff bfa3 	b.w	80043b8 <__retarget_lock_acquire_recursive>
 8004472:	bf00      	nop
 8004474:	200041fc 	.word	0x200041fc

08004478 <__malloc_unlock>:
 8004478:	4801      	ldr	r0, [pc, #4]	@ (8004480 <__malloc_unlock+0x8>)
 800447a:	f7ff bf9e 	b.w	80043ba <__retarget_lock_release_recursive>
 800447e:	bf00      	nop
 8004480:	200041fc 	.word	0x200041fc

08004484 <_init>:
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004486:	bf00      	nop
 8004488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448a:	bc08      	pop	{r3}
 800448c:	469e      	mov	lr, r3
 800448e:	4770      	bx	lr

08004490 <_fini>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	bf00      	nop
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr
