
DISC_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005128  08005128  00006128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051cc  080051cc  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080051cc  080051cc  000061cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051d4  080051d4  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d4  080051d4  000061d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051d8  080051d8  000061d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080051dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          0000423c  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000429c  2000429c  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140d2  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d98  00000000  00000000  0001b162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  0001df00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d95  00000000  00000000  0001f078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002415a  00000000  00000000  0001fe0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136fd  00000000  00000000  00043f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0603  00000000  00000000  00057664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137c67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004de8  00000000  00000000  00137cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0013ca94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005110 	.word	0x08005110

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005110 	.word	0x08005110

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	2000011c 	.word	0x2000011c

080005a4 <vReadADCValuePeriodic>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vReadADCValuePeriodic(void *pvParam)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	@ 0x30
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	char str[32];
	portTickType xLastWakeupTime = xTaskGetTickCount();
 80005ac:	f003 fa4c 	bl	8003a48 <xTaskGetTickCount>
 80005b0:	4603      	mov	r3, r0
 80005b2:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		HAL_ADC_Start(&hadc1);
 80005b4:	4816      	ldr	r0, [pc, #88]	@ (8000610 <vReadADCValuePeriodic+0x6c>)
 80005b6:	f000 fbe7 	bl	8000d88 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005be:	4814      	ldr	r0, [pc, #80]	@ (8000610 <vReadADCValuePeriodic+0x6c>)
 80005c0:	f000 fce7 	bl	8000f92 <HAL_ADC_PollForConversion>
		uint16_t value = HAL_ADC_GetValue(&hadc1);
 80005c4:	4812      	ldr	r0, [pc, #72]	@ (8000610 <vReadADCValuePeriodic+0x6c>)
 80005c6:	f000 fd6f 	bl	80010a8 <HAL_ADC_GetValue>
 80005ca:	4603      	mov	r3, r0
 80005cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		HAL_ADC_Stop(&hadc1);
 80005ce:	4810      	ldr	r0, [pc, #64]	@ (8000610 <vReadADCValuePeriodic+0x6c>)
 80005d0:	f000 fcac 	bl	8000f2c <HAL_ADC_Stop>

		sprintf(str, "ADC value = %d\r\n", value);
 80005d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	490e      	ldr	r1, [pc, #56]	@ (8000614 <vReadADCValuePeriodic+0x70>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 f8a1 	bl	8004724 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdf2 	bl	80001d0 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f107 010c 	add.w	r1, r7, #12
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f8:	4807      	ldr	r0, [pc, #28]	@ (8000618 <vReadADCValuePeriodic+0x74>)
 80005fa:	f002 f9bb 	bl	8002974 <HAL_UART_Transmit>

		vTaskDelayUntil(&xLastWakeupTime, 5000 / portTICK_RATE_MS);
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000606:	4618      	mov	r0, r3
 8000608:	f003 f852 	bl	80036b0 <vTaskDelayUntil>
	{
 800060c:	bf00      	nop
 800060e:	e7d1      	b.n	80005b4 <vReadADCValuePeriodic+0x10>
 8000610:	2000031c 	.word	0x2000031c
 8000614:	08005128 	.word	0x08005128
 8000618:	20000364 	.word	0x20000364

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b08c      	sub	sp, #48	@ 0x30
 8000620:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	BaseType_t xRet;
	char *pcMessage = "ADC Demo\r\n";
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <main+0x80>)
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fb29 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f843 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f927 	bl	8000880 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000632:	f000 f8a9 	bl	8000788 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000636:	f000 f8f9 	bl	800082c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 800063a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800063c:	f7ff fdc8 	bl	80001d0 <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	b29a      	uxth	r2, r3
 8000644:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000648:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800064a:	4815      	ldr	r0, [pc, #84]	@ (80006a0 <main+0x84>)
 800064c:	f002 f992 	bl	8002974 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <main+0x88>)
 8000652:	1d3c      	adds	r4, r7, #4
 8000654:	461d      	mov	r5, r3
 8000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fd5f 	bl	800312a <osThreadCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <main+0x8c>)
 8000670:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xRet = xTaskCreate(vReadADCValuePeriodic, "ADCTask", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2303      	movs	r3, #3
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	490b      	ldr	r1, [pc, #44]	@ (80006ac <main+0x90>)
 8000680:	480b      	ldr	r0, [pc, #44]	@ (80006b0 <main+0x94>)
 8000682:	f002 fec6 	bl	8003412 <xTaskCreate>
 8000686:	6238      	str	r0, [r7, #32]
  if(xRet != pdTRUE)
 8000688:	6a3b      	ldr	r3, [r7, #32]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d001      	beq.n	8000692 <main+0x76>
	  Error_Handler();
 800068e:	f000 f92b 	bl	80008e8 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000692:	f002 fd43 	bl	800311c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	bf00      	nop
 8000698:	e7fd      	b.n	8000696 <main+0x7a>
 800069a:	bf00      	nop
 800069c:	0800513c 	.word	0x0800513c
 80006a0:	20000364 	.word	0x20000364
 80006a4:	0800515c 	.word	0x0800515c
 80006a8:	200003ac 	.word	0x200003ac
 80006ac:	08005148 	.word	0x08005148
 80006b0:	080005a5 	.word	0x080005a5

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 f84e 	bl	8004764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	@ (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000728:	23a8      	movs	r3, #168	@ 0xa8
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f95f 	bl	80019fc <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000744:	f000 f8d0 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2105      	movs	r1, #5
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fbc0 	bl	8001eec <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000772:	f000 f8b9 	bl	80008e8 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	@ 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800079a:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <MX_ADC1_Init+0x98>)
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <MX_ADC1_Init+0x9c>)
 800079e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007ca:	4a17      	ldr	r2, [pc, #92]	@ (8000828 <MX_ADC1_Init+0xa0>)
 80007cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e8:	480d      	ldr	r0, [pc, #52]	@ (8000820 <MX_ADC1_Init+0x98>)
 80007ea:	f000 fa89 	bl	8000d00 <HAL_ADC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007f4:	f000 f878 	bl	80008e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_ADC1_Init+0x98>)
 800080a:	f000 fc5b 	bl	80010c4 <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000814:	f000 f868 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000031c 	.word	0x2000031c
 8000824:	40012000 	.word	0x40012000
 8000828:	0f000001 	.word	0x0f000001

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f002 f836 	bl	80028d4 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f83b 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000364 	.word	0x20000364
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_GPIO_Init+0x30>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <MX_GPIO_Init+0x30>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_GPIO_Init+0x30>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f002 fc80 	bl	80031c2 <osDelay>
 80008c2:	e7fb      	b.n	80008bc <StartDefaultTask+0x8>

080008c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d6:	f000 f9f3 	bl	8000cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40010000 	.word	0x40010000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x8>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_MspInit+0x54>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	4a11      	ldr	r2, [pc, #68]	@ (8000948 <HAL_MspInit+0x54>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6453      	str	r3, [r2, #68]	@ 0x44
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <HAL_MspInit+0x54>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <HAL_MspInit+0x54>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <HAL_MspInit+0x54>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	@ 0x40
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <HAL_MspInit+0x54>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	210f      	movs	r1, #15
 8000936:	f06f 0001 	mvn.w	r0, #1
 800093a:	f000 fe99 	bl	8001670 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a17      	ldr	r2, [pc, #92]	@ (80009c8 <HAL_ADC_MspInit+0x7c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d127      	bne.n	80009be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <HAL_ADC_MspInit+0x80>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000976:	4a15      	ldr	r2, [pc, #84]	@ (80009cc <HAL_ADC_MspInit+0x80>)
 8000978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800097c:	6453      	str	r3, [r2, #68]	@ 0x44
 800097e:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <HAL_ADC_MspInit+0x80>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <HAL_ADC_MspInit+0x80>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <HAL_ADC_MspInit+0x80>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <HAL_ADC_MspInit+0x80>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a6:	2301      	movs	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <HAL_ADC_MspInit+0x84>)
 80009ba:	f000 fe83 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	@ 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40012000 	.word	0x40012000
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	@ (8000a58 <HAL_UART_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12b      	bne.n	8000a4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <HAL_UART_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <HAL_UART_MspInit+0x88>)
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <HAL_UART_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <HAL_UART_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a10      	ldr	r2, [pc, #64]	@ (8000a5c <HAL_UART_MspInit+0x88>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2e:	230c      	movs	r3, #12
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <HAL_UART_MspInit+0x8c>)
 8000a4a:	f000 fe3b 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	@ 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000

08000a64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	@ 0x30
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	4b2f      	ldr	r3, [pc, #188]	@ (8000b38 <HAL_InitTick+0xd4>)
 8000a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b38 <HAL_InitTick+0xd4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a84:	4b2c      	ldr	r3, [pc, #176]	@ (8000b38 <HAL_InitTick+0xd4>)
 8000a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a90:	f107 020c 	add.w	r2, r7, #12
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 fc46 	bl	800232c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000aa0:	f001 fc30 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aac:	4a23      	ldr	r2, [pc, #140]	@ (8000b3c <HAL_InitTick+0xd8>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	0c9b      	lsrs	r3, r3, #18
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ab8:	4b21      	ldr	r3, [pc, #132]	@ (8000b40 <HAL_InitTick+0xdc>)
 8000aba:	4a22      	ldr	r2, [pc, #136]	@ (8000b44 <HAL_InitTick+0xe0>)
 8000abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000abe:	4b20      	ldr	r3, [pc, #128]	@ (8000b40 <HAL_InitTick+0xdc>)
 8000ac0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b40 <HAL_InitTick+0xdc>)
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <HAL_InitTick+0xdc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <HAL_InitTick+0xdc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <HAL_InitTick+0xdc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ade:	4818      	ldr	r0, [pc, #96]	@ (8000b40 <HAL_InitTick+0xdc>)
 8000ae0:	f001 fc56 	bl	8002390 <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000aea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d11b      	bne.n	8000b2a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000af2:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <HAL_InitTick+0xdc>)
 8000af4:	f001 fca6 	bl	8002444 <HAL_TIM_Base_Start_IT>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000afe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d111      	bne.n	8000b2a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b06:	2019      	movs	r0, #25
 8000b08:	f000 fdce 	bl	80016a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	d808      	bhi.n	8000b24 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b12:	2200      	movs	r2, #0
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	2019      	movs	r0, #25
 8000b18:	f000 fdaa 	bl	8001670 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <HAL_InitTick+0xe4>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	e002      	b.n	8000b2a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3730      	adds	r7, #48	@ 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	431bde83 	.word	0x431bde83
 8000b40:	200003b0 	.word	0x200003b0
 8000b44:	40010000 	.word	0x40010000
 8000b48:	20000004 	.word	0x20000004

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b8a:	f001 fccb 	bl	8002524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200003b0 	.word	0x200003b0

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	@ (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f003 fe2a 	bl	8004820 <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20020000 	.word	0x20020000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	200003f8 	.word	0x200003f8
 8000c00:	200042a0 	.word	0x200042a0

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c2c:	f7ff ffea 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	@ (8000c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	@ (8000c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c56:	f003 fde9 	bl	800482c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fcdf 	bl	800061c <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c6c:	080051dc 	.word	0x080051dc
  ldr r2, =_sbss
 8000c70:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c74:	2000429c 	.word	0x2000429c

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	@ (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 fcd8 	bl	800165a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	200f      	movs	r0, #15
 8000cac:	f7ff feda 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe20 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	200003fc 	.word	0x200003fc

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200003fc 	.word	0x200003fc

08000d00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e033      	b.n	8000d7e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d109      	bne.n	8000d32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fe14 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d118      	bne.n	8000d70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d46:	f023 0302 	bic.w	r3, r3, #2
 8000d4a:	f043 0202 	orr.w	r2, r3, #2
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 fad8 	bl	8001308 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	f023 0303 	bic.w	r3, r3, #3
 8000d66:	f043 0201 	orr.w	r2, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d6e:	e001      	b.n	8000d74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <HAL_ADC_Start+0x1a>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e0b2      	b.n	8000f08 <HAL_ADC_Start+0x180>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d018      	beq.n	8000dea <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0201 	orr.w	r2, r2, #1
 8000dc6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc8:	4b52      	ldr	r3, [pc, #328]	@ (8000f14 <HAL_ADC_Start+0x18c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a52      	ldr	r2, [pc, #328]	@ (8000f18 <HAL_ADC_Start+0x190>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	0c9a      	lsrs	r2, r3, #18
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000ddc:	e002      	b.n	8000de4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f9      	bne.n	8000dde <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d17a      	bne.n	8000eee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e00:	f023 0301 	bic.w	r3, r3, #1
 8000e04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d007      	beq.n	8000e2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e36:	d106      	bne.n	8000e46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3c:	f023 0206 	bic.w	r2, r3, #6
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e44:	e002      	b.n	8000e4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e54:	4b31      	ldr	r3, [pc, #196]	@ (8000f1c <HAL_ADC_Start+0x194>)
 8000e56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000e60:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 031f 	and.w	r3, r3, #31
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d12a      	bne.n	8000ec4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a2b      	ldr	r2, [pc, #172]	@ (8000f20 <HAL_ADC_Start+0x198>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d015      	beq.n	8000ea4 <HAL_ADC_Start+0x11c>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a29      	ldr	r2, [pc, #164]	@ (8000f24 <HAL_ADC_Start+0x19c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d105      	bne.n	8000e8e <HAL_ADC_Start+0x106>
 8000e82:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <HAL_ADC_Start+0x194>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00a      	beq.n	8000ea4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a25      	ldr	r2, [pc, #148]	@ (8000f28 <HAL_ADC_Start+0x1a0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d136      	bne.n	8000f06 <HAL_ADC_Start+0x17e>
 8000e98:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <HAL_ADC_Start+0x194>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d130      	bne.n	8000f06 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d129      	bne.n	8000f06 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	e020      	b.n	8000f06 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a15      	ldr	r2, [pc, #84]	@ (8000f20 <HAL_ADC_Start+0x198>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d11b      	bne.n	8000f06 <HAL_ADC_Start+0x17e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d114      	bne.n	8000f06 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	e00b      	b.n	8000f06 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f043 0210 	orr.w	r2, r3, #16
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	f043 0201 	orr.w	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000000 	.word	0x20000000
 8000f18:	431bde83 	.word	0x431bde83
 8000f1c:	40012300 	.word	0x40012300
 8000f20:	40012000 	.word	0x40012000
 8000f24:	40012100 	.word	0x40012100
 8000f28:	40012200 	.word	0x40012200

08000f2c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Stop+0x16>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e021      	b.n	8000f86 <HAL_ADC_Stop+0x5a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d109      	bne.n	8000f7c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	f043 0201 	orr.w	r2, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fae:	d113      	bne.n	8000fd8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fbe:	d10b      	bne.n	8000fd8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	f043 0220 	orr.w	r2, r3, #32
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e063      	b.n	80010a0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd8:	f7ff fe86 	bl	8000ce8 <HAL_GetTick>
 8000fdc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fde:	e021      	b.n	8001024 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fe6:	d01d      	beq.n	8001024 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_ADC_PollForConversion+0x6c>
 8000fee:	f7ff fe7b 	bl	8000ce8 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d212      	bcs.n	8001024 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b02      	cmp	r3, #2
 800100a:	d00b      	beq.n	8001024 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	f043 0204 	orr.w	r2, r3, #4
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e03d      	b.n	80010a0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b02      	cmp	r3, #2
 8001030:	d1d6      	bne.n	8000fe0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f06f 0212 	mvn.w	r2, #18
 800103a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d123      	bne.n	800109e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800105a:	2b00      	cmp	r3, #0
 800105c:	d11f      	bne.n	800109e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001064:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001076:	2b00      	cmp	r3, #0
 8001078:	d111      	bne.n	800109e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1c>
 80010dc:	2302      	movs	r3, #2
 80010de:	e105      	b.n	80012ec <HAL_ADC_ConfigChannel+0x228>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b09      	cmp	r3, #9
 80010ee:	d925      	bls.n	800113c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68d9      	ldr	r1, [r3, #12]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	3b1e      	subs	r3, #30
 8001106:	2207      	movs	r2, #7
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43da      	mvns	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	400a      	ands	r2, r1
 8001114:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68d9      	ldr	r1, [r3, #12]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	4603      	mov	r3, r0
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4403      	add	r3, r0
 800112e:	3b1e      	subs	r3, #30
 8001130:	409a      	lsls	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	e022      	b.n	8001182 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6919      	ldr	r1, [r3, #16]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	2207      	movs	r2, #7
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	400a      	ands	r2, r1
 800115e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6919      	ldr	r1, [r3, #16]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	4603      	mov	r3, r0
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4403      	add	r3, r0
 8001178:	409a      	lsls	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b06      	cmp	r3, #6
 8001188:	d824      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	3b05      	subs	r3, #5
 800119c:	221f      	movs	r2, #31
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	400a      	ands	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b05      	subs	r3, #5
 80011c6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80011d2:	e04c      	b.n	800126e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d824      	bhi.n	8001226 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b23      	subs	r3, #35	@ 0x23
 80011ee:	221f      	movs	r2, #31
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43da      	mvns	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	400a      	ands	r2, r1
 80011fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b23      	subs	r3, #35	@ 0x23
 8001218:	fa00 f203 	lsl.w	r2, r0, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	631a      	str	r2, [r3, #48]	@ 0x30
 8001224:	e023      	b.n	800126e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b41      	subs	r3, #65	@ 0x41
 8001238:	221f      	movs	r2, #31
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b41      	subs	r3, #65	@ 0x41
 8001262:	fa00 f203 	lsl.w	r2, r0, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126e:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <HAL_ADC_ConfigChannel+0x234>)
 8001270:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <HAL_ADC_ConfigChannel+0x238>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d109      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1cc>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d105      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	@ (80012fc <HAL_ADC_ConfigChannel+0x238>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d123      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x21e>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b10      	cmp	r3, #16
 80012a0:	d003      	beq.n	80012aa <HAL_ADC_ConfigChannel+0x1e6>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b11      	cmp	r3, #17
 80012a8:	d11b      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b10      	cmp	r3, #16
 80012bc:	d111      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <HAL_ADC_ConfigChannel+0x23c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <HAL_ADC_ConfigChannel+0x240>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	0c9a      	lsrs	r2, r3, #18
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012d4:	e002      	b.n	80012dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f9      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40012300 	.word	0x40012300
 80012fc:	40012000 	.word	0x40012000
 8001300:	20000000 	.word	0x20000000
 8001304:	431bde83 	.word	0x431bde83

08001308 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001310:	4b79      	ldr	r3, [pc, #484]	@ (80014f8 <ADC_Init+0x1f0>)
 8001312:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	431a      	orrs	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800133c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6859      	ldr	r1, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	021a      	lsls	r2, r3, #8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6899      	ldr	r1, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139a:	4a58      	ldr	r2, [pc, #352]	@ (80014fc <ADC_Init+0x1f4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d022      	beq.n	80013e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6899      	ldr	r1, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6899      	ldr	r1, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e00f      	b.n	8001406 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001404:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0202 	bic.w	r2, r2, #2
 8001414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6899      	ldr	r1, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7e1b      	ldrb	r3, [r3, #24]
 8001420:	005a      	lsls	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01b      	beq.n	800146c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001442:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001452:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6859      	ldr	r1, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	3b01      	subs	r3, #1
 8001460:	035a      	lsls	r2, r3, #13
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	e007      	b.n	800147c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800147a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	3b01      	subs	r3, #1
 8001498:	051a      	lsls	r2, r3, #20
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6899      	ldr	r1, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014be:	025a      	lsls	r2, r3, #9
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6899      	ldr	r1, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	029a      	lsls	r2, r3, #10
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40012300 	.word	0x40012300
 80014fc:	0f000001 	.word	0x0f000001

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	@ (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	@ (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	@ (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	@ 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff4c 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001682:	f7ff ff61 	bl	8001548 <__NVIC_GetPriorityGrouping>
 8001686:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	6978      	ldr	r0, [r7, #20]
 800168e:	f7ff ffb1 	bl	80015f4 <NVIC_EncodePriority>
 8001692:	4602      	mov	r2, r0
 8001694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff80 	bl	80015a0 <__NVIC_SetPriority>
}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff54 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	e16b      	b.n	80019b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e0:	2201      	movs	r2, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 815a 	bne.w	80019b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d005      	beq.n	8001716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001712:	2b02      	cmp	r3, #2
 8001714:	d130      	bne.n	8001778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 0201 	and.w	r2, r3, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b03      	cmp	r3, #3
 8001782:	d017      	beq.n	80017b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d123      	bne.n	8001808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80b4 	beq.w	80019b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b60      	ldr	r3, [pc, #384]	@ (80019d0 <HAL_GPIO_Init+0x30c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	4a5f      	ldr	r2, [pc, #380]	@ (80019d0 <HAL_GPIO_Init+0x30c>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001858:	6453      	str	r3, [r2, #68]	@ 0x44
 800185a:	4b5d      	ldr	r3, [pc, #372]	@ (80019d0 <HAL_GPIO_Init+0x30c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001866:	4a5b      	ldr	r2, [pc, #364]	@ (80019d4 <HAL_GPIO_Init+0x310>)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a52      	ldr	r2, [pc, #328]	@ (80019d8 <HAL_GPIO_Init+0x314>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d02b      	beq.n	80018ea <HAL_GPIO_Init+0x226>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a51      	ldr	r2, [pc, #324]	@ (80019dc <HAL_GPIO_Init+0x318>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d025      	beq.n	80018e6 <HAL_GPIO_Init+0x222>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a50      	ldr	r2, [pc, #320]	@ (80019e0 <HAL_GPIO_Init+0x31c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d01f      	beq.n	80018e2 <HAL_GPIO_Init+0x21e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4f      	ldr	r2, [pc, #316]	@ (80019e4 <HAL_GPIO_Init+0x320>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d019      	beq.n	80018de <HAL_GPIO_Init+0x21a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4e      	ldr	r2, [pc, #312]	@ (80019e8 <HAL_GPIO_Init+0x324>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0x216>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4d      	ldr	r2, [pc, #308]	@ (80019ec <HAL_GPIO_Init+0x328>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00d      	beq.n	80018d6 <HAL_GPIO_Init+0x212>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4c      	ldr	r2, [pc, #304]	@ (80019f0 <HAL_GPIO_Init+0x32c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4b      	ldr	r2, [pc, #300]	@ (80019f4 <HAL_GPIO_Init+0x330>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <HAL_GPIO_Init+0x20a>
 80018ca:	2307      	movs	r3, #7
 80018cc:	e00e      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018ce:	2308      	movs	r3, #8
 80018d0:	e00c      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018d2:	2306      	movs	r3, #6
 80018d4:	e00a      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018d6:	2305      	movs	r3, #5
 80018d8:	e008      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018da:	2304      	movs	r3, #4
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018de:	2303      	movs	r3, #3
 80018e0:	e004      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018ea:	2300      	movs	r3, #0
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f002 0203 	and.w	r2, r2, #3
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	4093      	lsls	r3, r2
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018fc:	4935      	ldr	r1, [pc, #212]	@ (80019d4 <HAL_GPIO_Init+0x310>)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800190a:	4b3b      	ldr	r3, [pc, #236]	@ (80019f8 <HAL_GPIO_Init+0x334>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800192e:	4a32      	ldr	r2, [pc, #200]	@ (80019f8 <HAL_GPIO_Init+0x334>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001934:	4b30      	ldr	r3, [pc, #192]	@ (80019f8 <HAL_GPIO_Init+0x334>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001958:	4a27      	ldr	r2, [pc, #156]	@ (80019f8 <HAL_GPIO_Init+0x334>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800195e:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <HAL_GPIO_Init+0x334>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001982:	4a1d      	ldr	r2, [pc, #116]	@ (80019f8 <HAL_GPIO_Init+0x334>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001988:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <HAL_GPIO_Init+0x334>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ac:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <HAL_GPIO_Init+0x334>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	f67f ae90 	bls.w	80016e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3724      	adds	r7, #36	@ 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40013800 	.word	0x40013800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40021400 	.word	0x40021400
 80019f0:	40021800 	.word	0x40021800
 80019f4:	40021c00 	.word	0x40021c00
 80019f8:	40013c00 	.word	0x40013c00

080019fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e267      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d075      	beq.n	8001b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a1a:	4b88      	ldr	r3, [pc, #544]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d00c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a26:	4b85      	ldr	r3, [pc, #532]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d112      	bne.n	8001a58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a32:	4b82      	ldr	r3, [pc, #520]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a3e:	d10b      	bne.n	8001a58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	4b7e      	ldr	r3, [pc, #504]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d05b      	beq.n	8001b04 <HAL_RCC_OscConfig+0x108>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d157      	bne.n	8001b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e242      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a60:	d106      	bne.n	8001a70 <HAL_RCC_OscConfig+0x74>
 8001a62:	4b76      	ldr	r3, [pc, #472]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a75      	ldr	r2, [pc, #468]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e01d      	b.n	8001aac <HAL_RCC_OscConfig+0xb0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x98>
 8001a7a:	4b70      	ldr	r3, [pc, #448]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b6d      	ldr	r3, [pc, #436]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0xb0>
 8001a94:	4b69      	ldr	r3, [pc, #420]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a68      	ldr	r2, [pc, #416]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b66      	ldr	r3, [pc, #408]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a65      	ldr	r2, [pc, #404]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f918 	bl	8000ce8 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff f914 	bl	8000ce8 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	@ 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e207      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	4b5b      	ldr	r3, [pc, #364]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0xc0>
 8001ada:	e014      	b.n	8001b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff f904 	bl	8000ce8 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f900 	bl	8000ce8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	@ 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1f3      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	4b51      	ldr	r3, [pc, #324]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0xe8>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d063      	beq.n	8001bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b12:	4b4a      	ldr	r3, [pc, #296]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1e:	4b47      	ldr	r3, [pc, #284]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d11c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b44      	ldr	r3, [pc, #272]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d116      	bne.n	8001b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	4b41      	ldr	r3, [pc, #260]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_RCC_OscConfig+0x152>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e1c7      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4937      	ldr	r1, [pc, #220]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	e03a      	b.n	8001bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6c:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <HAL_RCC_OscConfig+0x244>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff f8b9 	bl	8000ce8 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff f8b5 	bl	8000ce8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1a8      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4925      	ldr	r1, [pc, #148]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bae:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <HAL_RCC_OscConfig+0x244>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f898 	bl	8000ce8 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff f894 	bl	8000ce8 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e187      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d036      	beq.n	8001c54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d016      	beq.n	8001c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_RCC_OscConfig+0x248>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f878 	bl	8000ce8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff f874 	bl	8000ce8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e167      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x200>
 8001c1a:	e01b      	b.n	8001c54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_RCC_OscConfig+0x248>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7ff f861 	bl	8000ce8 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	e00e      	b.n	8001c48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f85d 	bl	8000ce8 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d907      	bls.n	8001c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e150      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	42470000 	.word	0x42470000
 8001c44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	4b88      	ldr	r3, [pc, #544]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ea      	bne.n	8001c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8097 	beq.w	8001d90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c66:	4b81      	ldr	r3, [pc, #516]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b7d      	ldr	r3, [pc, #500]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c82:	4b7a      	ldr	r3, [pc, #488]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b77      	ldr	r3, [pc, #476]	@ (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9e:	4b74      	ldr	r3, [pc, #464]	@ (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a73      	ldr	r2, [pc, #460]	@ (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7ff f81d 	bl	8000ce8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7ff f819 	bl	8000ce8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e10c      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2ea>
 8001cd8:	4b64      	ldr	r3, [pc, #400]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cdc:	4a63      	ldr	r2, [pc, #396]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce4:	e01c      	b.n	8001d20 <HAL_RCC_OscConfig+0x324>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x30c>
 8001cee:	4b5f      	ldr	r3, [pc, #380]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfe:	4a5b      	ldr	r2, [pc, #364]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0x324>
 8001d08:	4b58      	ldr	r3, [pc, #352]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0c:	4a57      	ldr	r2, [pc, #348]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d14:	4b55      	ldr	r3, [pc, #340]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d18:	4a54      	ldr	r2, [pc, #336]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f023 0304 	bic.w	r3, r3, #4
 8001d1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d015      	beq.n	8001d54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7fe ffde 	bl	8000ce8 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7fe ffda 	bl	8000ce8 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e0cb      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d46:	4b49      	ldr	r3, [pc, #292]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ee      	beq.n	8001d30 <HAL_RCC_OscConfig+0x334>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7fe ffc8 	bl	8000ce8 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7fe ffc4 	bl	8000ce8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0b5      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d72:	4b3e      	ldr	r3, [pc, #248]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ee      	bne.n	8001d5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d84:	4b39      	ldr	r3, [pc, #228]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	4a38      	ldr	r2, [pc, #224]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a1 	beq.w	8001edc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d9a:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d05c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d141      	bne.n	8001e32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b31      	ldr	r3, [pc, #196]	@ (8001e74 <HAL_RCC_OscConfig+0x478>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7fe ff98 	bl	8000ce8 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7fe ff94 	bl	8000ce8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e087      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	4b27      	ldr	r3, [pc, #156]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	3b01      	subs	r3, #1
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	491b      	ldr	r1, [pc, #108]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <HAL_RCC_OscConfig+0x478>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7fe ff6d 	bl	8000ce8 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e12:	f7fe ff69 	bl	8000ce8 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e05c      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x416>
 8001e30:	e054      	b.n	8001edc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <HAL_RCC_OscConfig+0x478>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7fe ff56 	bl	8000ce8 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe ff52 	bl	8000ce8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e045      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x444>
 8001e5e:	e03d      	b.n	8001edc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e038      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <HAL_RCC_OscConfig+0x4ec>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d028      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d121      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d11a      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0cc      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b68      	ldr	r3, [pc, #416]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d90c      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b65      	ldr	r3, [pc, #404]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b63      	ldr	r3, [pc, #396]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b8      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b59      	ldr	r3, [pc, #356]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a58      	ldr	r2, [pc, #352]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f58:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b50      	ldr	r3, [pc, #320]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	494d      	ldr	r1, [pc, #308]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d044      	beq.n	800200c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d119      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b3f      	ldr	r3, [pc, #252]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b3b      	ldr	r3, [pc, #236]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e067      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b37      	ldr	r3, [pc, #220]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4934      	ldr	r1, [pc, #208]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe fe84 	bl	8000ce8 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe fe80 	bl	8000ce8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e04f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b25      	ldr	r3, [pc, #148]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d20c      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b22      	ldr	r3, [pc, #136]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e032      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4916      	ldr	r1, [pc, #88]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	490e      	ldr	r1, [pc, #56]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002072:	f000 f821 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	490a      	ldr	r1, [pc, #40]	@ (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	5ccb      	ldrb	r3, [r1, r3]
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800208e:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fce6 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00
 80020a8:	40023800 	.word	0x40023800
 80020ac:	08005180 	.word	0x08005180
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020bc:	b094      	sub	sp, #80	@ 0x50
 80020be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80020c4:	2300      	movs	r3, #0
 80020c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020c8:	2300      	movs	r3, #0
 80020ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d0:	4b79      	ldr	r3, [pc, #484]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d00d      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x40>
 80020dc:	2b08      	cmp	r3, #8
 80020de:	f200 80e1 	bhi.w	80022a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x34>
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ea:	e0db      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b73      	ldr	r3, [pc, #460]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x204>)
 80020ee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80020f0:	e0db      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020f2:	4b73      	ldr	r3, [pc, #460]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80020f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020f6:	e0d8      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f8:	4b6f      	ldr	r3, [pc, #444]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002100:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002102:	4b6d      	ldr	r3, [pc, #436]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d063      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210e:	4b6a      	ldr	r3, [pc, #424]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	2200      	movs	r2, #0
 8002116:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002118:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800211a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800211c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002120:	633b      	str	r3, [r7, #48]	@ 0x30
 8002122:	2300      	movs	r3, #0
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
 8002126:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800212a:	4622      	mov	r2, r4
 800212c:	462b      	mov	r3, r5
 800212e:	f04f 0000 	mov.w	r0, #0
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	0159      	lsls	r1, r3, #5
 8002138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800213c:	0150      	lsls	r0, r2, #5
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4621      	mov	r1, r4
 8002144:	1a51      	subs	r1, r2, r1
 8002146:	6139      	str	r1, [r7, #16]
 8002148:	4629      	mov	r1, r5
 800214a:	eb63 0301 	sbc.w	r3, r3, r1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800215c:	4659      	mov	r1, fp
 800215e:	018b      	lsls	r3, r1, #6
 8002160:	4651      	mov	r1, sl
 8002162:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002166:	4651      	mov	r1, sl
 8002168:	018a      	lsls	r2, r1, #6
 800216a:	4651      	mov	r1, sl
 800216c:	ebb2 0801 	subs.w	r8, r2, r1
 8002170:	4659      	mov	r1, fp
 8002172:	eb63 0901 	sbc.w	r9, r3, r1
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800218a:	4690      	mov	r8, r2
 800218c:	4699      	mov	r9, r3
 800218e:	4623      	mov	r3, r4
 8002190:	eb18 0303 	adds.w	r3, r8, r3
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	462b      	mov	r3, r5
 8002198:	eb49 0303 	adc.w	r3, r9, r3
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021aa:	4629      	mov	r1, r5
 80021ac:	024b      	lsls	r3, r1, #9
 80021ae:	4621      	mov	r1, r4
 80021b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021b4:	4621      	mov	r1, r4
 80021b6:	024a      	lsls	r2, r1, #9
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021be:	2200      	movs	r2, #0
 80021c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021c8:	f7fe f85a 	bl	8000280 <__aeabi_uldivmod>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4613      	mov	r3, r2
 80021d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021d4:	e058      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d6:	4b38      	ldr	r3, [pc, #224]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	099b      	lsrs	r3, r3, #6
 80021dc:	2200      	movs	r2, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	4611      	mov	r1, r2
 80021e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021e6:	623b      	str	r3, [r7, #32]
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021f0:	4642      	mov	r2, r8
 80021f2:	464b      	mov	r3, r9
 80021f4:	f04f 0000 	mov.w	r0, #0
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	0159      	lsls	r1, r3, #5
 80021fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002202:	0150      	lsls	r0, r2, #5
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4641      	mov	r1, r8
 800220a:	ebb2 0a01 	subs.w	sl, r2, r1
 800220e:	4649      	mov	r1, r9
 8002210:	eb63 0b01 	sbc.w	fp, r3, r1
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002220:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002224:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002228:	ebb2 040a 	subs.w	r4, r2, sl
 800222c:	eb63 050b 	sbc.w	r5, r3, fp
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	00eb      	lsls	r3, r5, #3
 800223a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800223e:	00e2      	lsls	r2, r4, #3
 8002240:	4614      	mov	r4, r2
 8002242:	461d      	mov	r5, r3
 8002244:	4643      	mov	r3, r8
 8002246:	18e3      	adds	r3, r4, r3
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	464b      	mov	r3, r9
 800224c:	eb45 0303 	adc.w	r3, r5, r3
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800225e:	4629      	mov	r1, r5
 8002260:	028b      	lsls	r3, r1, #10
 8002262:	4621      	mov	r1, r4
 8002264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002268:	4621      	mov	r1, r4
 800226a:	028a      	lsls	r2, r1, #10
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002272:	2200      	movs	r2, #0
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	61fa      	str	r2, [r7, #28]
 8002278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800227c:	f7fe f800 	bl	8000280 <__aeabi_uldivmod>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4613      	mov	r3, r2
 8002286:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	3301      	adds	r3, #1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002298:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800229a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022a2:	e002      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x204>)
 80022a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3750      	adds	r7, #80	@ 0x50
 80022b0:	46bd      	mov	sp, r7
 80022b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	00f42400 	.word	0x00f42400
 80022c0:	007a1200 	.word	0x007a1200

080022c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000000 	.word	0x20000000

080022dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022e0:	f7ff fff0 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4903      	ldr	r1, [pc, #12]	@ (8002300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	08005190 	.word	0x08005190

08002304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002308:	f7ff ffdc 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0b5b      	lsrs	r3, r3, #13
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4903      	ldr	r1, [pc, #12]	@ (8002328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	08005190 	.word	0x08005190

0800232c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	220f      	movs	r2, #15
 800233a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_RCC_GetClockConfig+0x5c>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_RCC_GetClockConfig+0x5c>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <HAL_RCC_GetClockConfig+0x5c>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <HAL_RCC_GetClockConfig+0x5c>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	08db      	lsrs	r3, r3, #3
 8002366:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800236e:	4b07      	ldr	r3, [pc, #28]	@ (800238c <HAL_RCC_GetClockConfig+0x60>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0207 	and.w	r2, r3, #7
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	601a      	str	r2, [r3, #0]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40023c00 	.word	0x40023c00

08002390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e041      	b.n	8002426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f839 	bl	800242e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f000 f9c0 	bl	8002754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d001      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e04e      	b.n	80024fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a23      	ldr	r2, [pc, #140]	@ (8002508 <HAL_TIM_Base_Start_IT+0xc4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d022      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x80>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002486:	d01d      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x80>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1f      	ldr	r2, [pc, #124]	@ (800250c <HAL_TIM_Base_Start_IT+0xc8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d018      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x80>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1e      	ldr	r2, [pc, #120]	@ (8002510 <HAL_TIM_Base_Start_IT+0xcc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x80>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002514 <HAL_TIM_Base_Start_IT+0xd0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00e      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x80>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002518 <HAL_TIM_Base_Start_IT+0xd4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x80>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a19      	ldr	r2, [pc, #100]	@ (800251c <HAL_TIM_Base_Start_IT+0xd8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x80>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a18      	ldr	r2, [pc, #96]	@ (8002520 <HAL_TIM_Base_Start_IT+0xdc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d111      	bne.n	80024e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d010      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e6:	e007      	b.n	80024f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000
 800250c:	40000400 	.word	0x40000400
 8002510:	40000800 	.word	0x40000800
 8002514:	40000c00 	.word	0x40000c00
 8002518:	40010400 	.word	0x40010400
 800251c:	40014000 	.word	0x40014000
 8002520:	40001800 	.word	0x40001800

08002524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d020      	beq.n	8002588 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01b      	beq.n	8002588 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0202 	mvn.w	r2, #2
 8002558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8d2 	bl	8002718 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8c4 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f8d5 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d020      	beq.n	80025d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01b      	beq.n	80025d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0204 	mvn.w	r2, #4
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8ac 	bl	8002718 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f89e 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f8af 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d020      	beq.n	8002620 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01b      	beq.n	8002620 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0208 	mvn.w	r2, #8
 80025f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2204      	movs	r2, #4
 80025f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f886 	bl	8002718 <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f878 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f889 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d020      	beq.n	800266c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01b      	beq.n	800266c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0210 	mvn.w	r2, #16
 800263c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2208      	movs	r2, #8
 8002642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f860 	bl	8002718 <HAL_TIM_IC_CaptureCallback>
 8002658:	e005      	b.n	8002666 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f852 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f863 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0201 	mvn.w	r2, #1
 8002688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe f91a 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f906 	bl	80028c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f834 	bl	8002740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0220 	mvn.w	r2, #32
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8d8 	bl	80028ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a46      	ldr	r2, [pc, #280]	@ (8002880 <TIM_Base_SetConfig+0x12c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d013      	beq.n	8002794 <TIM_Base_SetConfig+0x40>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002772:	d00f      	beq.n	8002794 <TIM_Base_SetConfig+0x40>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a43      	ldr	r2, [pc, #268]	@ (8002884 <TIM_Base_SetConfig+0x130>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00b      	beq.n	8002794 <TIM_Base_SetConfig+0x40>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a42      	ldr	r2, [pc, #264]	@ (8002888 <TIM_Base_SetConfig+0x134>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d007      	beq.n	8002794 <TIM_Base_SetConfig+0x40>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a41      	ldr	r2, [pc, #260]	@ (800288c <TIM_Base_SetConfig+0x138>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d003      	beq.n	8002794 <TIM_Base_SetConfig+0x40>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a40      	ldr	r2, [pc, #256]	@ (8002890 <TIM_Base_SetConfig+0x13c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d108      	bne.n	80027a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800279a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a35      	ldr	r2, [pc, #212]	@ (8002880 <TIM_Base_SetConfig+0x12c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d02b      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b4:	d027      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a32      	ldr	r2, [pc, #200]	@ (8002884 <TIM_Base_SetConfig+0x130>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d023      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a31      	ldr	r2, [pc, #196]	@ (8002888 <TIM_Base_SetConfig+0x134>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01f      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a30      	ldr	r2, [pc, #192]	@ (800288c <TIM_Base_SetConfig+0x138>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01b      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002890 <TIM_Base_SetConfig+0x13c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d017      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002894 <TIM_Base_SetConfig+0x140>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002898 <TIM_Base_SetConfig+0x144>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00f      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a2c      	ldr	r2, [pc, #176]	@ (800289c <TIM_Base_SetConfig+0x148>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00b      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a2b      	ldr	r2, [pc, #172]	@ (80028a0 <TIM_Base_SetConfig+0x14c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a2a      	ldr	r2, [pc, #168]	@ (80028a4 <TIM_Base_SetConfig+0x150>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d003      	beq.n	8002806 <TIM_Base_SetConfig+0xb2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a29      	ldr	r2, [pc, #164]	@ (80028a8 <TIM_Base_SetConfig+0x154>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d108      	bne.n	8002818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800280c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a10      	ldr	r2, [pc, #64]	@ (8002880 <TIM_Base_SetConfig+0x12c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d003      	beq.n	800284c <TIM_Base_SetConfig+0xf8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a12      	ldr	r2, [pc, #72]	@ (8002890 <TIM_Base_SetConfig+0x13c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d103      	bne.n	8002854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d105      	bne.n	8002872 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f023 0201 	bic.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]
  }
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800
 800288c:	40000c00 	.word	0x40000c00
 8002890:	40010400 	.word	0x40010400
 8002894:	40014000 	.word	0x40014000
 8002898:	40014400 	.word	0x40014400
 800289c:	40014800 	.word	0x40014800
 80028a0:	40001800 	.word	0x40001800
 80028a4:	40001c00 	.word	0x40001c00
 80028a8:	40002000 	.word	0x40002000

080028ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e042      	b.n	800296c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe f86a 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	@ 0x24
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f973 	bl	8002c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800292c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800293c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800294c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	@ 0x28
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b20      	cmp	r3, #32
 8002992:	d175      	bne.n	8002a80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_UART_Transmit+0x2c>
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e06e      	b.n	8002a82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2221      	movs	r2, #33	@ 0x21
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b2:	f7fe f999 	bl	8000ce8 <HAL_GetTick>
 80029b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029cc:	d108      	bne.n	80029e0 <HAL_UART_Transmit+0x6c>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	e003      	b.n	80029e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029e8:	e02e      	b.n	8002a48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2180      	movs	r1, #128	@ 0x80
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f848 	bl	8002a8a <UART_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e03a      	b.n	8002a82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10b      	bne.n	8002a2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	3302      	adds	r3, #2
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	e007      	b.n	8002a3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	3301      	adds	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1cb      	bne.n	80029ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2140      	movs	r1, #64	@ 0x40
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f814 	bl	8002a8a <UART_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e006      	b.n	8002a82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9a:	e03b      	b.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aa2:	d037      	beq.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa4:	f7fe f920 	bl	8000ce8 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	6a3a      	ldr	r2, [r7, #32]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d302      	bcc.n	8002aba <UART_WaitOnFlagUntilTimeout+0x30>
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e03a      	b.n	8002b34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d023      	beq.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b80      	cmp	r3, #128	@ 0x80
 8002ad0:	d020      	beq.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b40      	cmp	r3, #64	@ 0x40
 8002ad6:	d01d      	beq.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d116      	bne.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f81d 	bl	8002b3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2208      	movs	r2, #8
 8002b06:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e00f      	b.n	8002b34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d0b4      	beq.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b095      	sub	sp, #84	@ 0x54
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	330c      	adds	r3, #12
 8002b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4e:	e853 3f00 	ldrex	r3, [r3]
 8002b52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	330c      	adds	r3, #12
 8002b62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b64:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b6c:	e841 2300 	strex	r3, r2, [r1]
 8002b70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e5      	bne.n	8002b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3314      	adds	r3, #20
 8002b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	e853 3f00 	ldrex	r3, [r3]
 8002b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3314      	adds	r3, #20
 8002b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ba0:	e841 2300 	strex	r3, r2, [r1]
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e5      	bne.n	8002b78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d119      	bne.n	8002be8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	e853 3f00 	ldrex	r3, [r3]
 8002bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f023 0310 	bic.w	r3, r3, #16
 8002bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bd4:	61ba      	str	r2, [r7, #24]
 8002bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	6979      	ldr	r1, [r7, #20]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	613b      	str	r3, [r7, #16]
   return(result);
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e5      	bne.n	8002bb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bf6:	bf00      	nop
 8002bf8:	3754      	adds	r7, #84	@ 0x54
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b0c0      	sub	sp, #256	@ 0x100
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c20:	68d9      	ldr	r1, [r3, #12]
 8002c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	ea40 0301 	orr.w	r3, r0, r1
 8002c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c5c:	f021 010c 	bic.w	r1, r1, #12
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7e:	6999      	ldr	r1, [r3, #24]
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	ea40 0301 	orr.w	r3, r0, r1
 8002c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b8f      	ldr	r3, [pc, #572]	@ (8002ed0 <UART_SetConfig+0x2cc>)
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d005      	beq.n	8002ca4 <UART_SetConfig+0xa0>
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ed4 <UART_SetConfig+0x2d0>)
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d104      	bne.n	8002cae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7ff fb2e 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8002ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002cac:	e003      	b.n	8002cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cae:	f7ff fb15 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8002cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cc0:	f040 810c 	bne.w	8002edc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002cce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	462b      	mov	r3, r5
 8002cda:	1891      	adds	r1, r2, r2
 8002cdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002cde:	415b      	adcs	r3, r3
 8002ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	eb12 0801 	adds.w	r8, r2, r1
 8002cec:	4629      	mov	r1, r5
 8002cee:	eb43 0901 	adc.w	r9, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d06:	4690      	mov	r8, r2
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb18 0303 	adds.w	r3, r8, r3
 8002d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d14:	462b      	mov	r3, r5
 8002d16:	eb49 0303 	adc.w	r3, r9, r3
 8002d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d32:	460b      	mov	r3, r1
 8002d34:	18db      	adds	r3, r3, r3
 8002d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d38:	4613      	mov	r3, r2
 8002d3a:	eb42 0303 	adc.w	r3, r2, r3
 8002d3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d48:	f7fd fa9a 	bl	8000280 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4b61      	ldr	r3, [pc, #388]	@ (8002ed8 <UART_SetConfig+0x2d4>)
 8002d52:	fba3 2302 	umull	r2, r3, r3, r2
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	011c      	lsls	r4, r3, #4
 8002d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	1891      	adds	r1, r2, r2
 8002d72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d74:	415b      	adcs	r3, r3
 8002d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d82:	4649      	mov	r1, r9
 8002d84:	eb43 0b01 	adc.w	fp, r3, r1
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d9c:	4692      	mov	sl, r2
 8002d9e:	469b      	mov	fp, r3
 8002da0:	4643      	mov	r3, r8
 8002da2:	eb1a 0303 	adds.w	r3, sl, r3
 8002da6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002daa:	464b      	mov	r3, r9
 8002dac:	eb4b 0303 	adc.w	r3, fp, r3
 8002db0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	18db      	adds	r3, r3, r3
 8002dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dce:	4613      	mov	r3, r2
 8002dd0:	eb42 0303 	adc.w	r3, r2, r3
 8002dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002dde:	f7fd fa4f 	bl	8000280 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed8 <UART_SetConfig+0x2d4>)
 8002dea:	fba3 2301 	umull	r2, r3, r3, r1
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2264      	movs	r2, #100	@ 0x64
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	1acb      	subs	r3, r1, r3
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dfe:	4b36      	ldr	r3, [pc, #216]	@ (8002ed8 <UART_SetConfig+0x2d4>)
 8002e00:	fba3 2302 	umull	r2, r3, r3, r2
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e0c:	441c      	add	r4, r3
 8002e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	1891      	adds	r1, r2, r2
 8002e26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e30:	4641      	mov	r1, r8
 8002e32:	1851      	adds	r1, r2, r1
 8002e34:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e36:	4649      	mov	r1, r9
 8002e38:	414b      	adcs	r3, r1
 8002e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e48:	4659      	mov	r1, fp
 8002e4a:	00cb      	lsls	r3, r1, #3
 8002e4c:	4651      	mov	r1, sl
 8002e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e52:	4651      	mov	r1, sl
 8002e54:	00ca      	lsls	r2, r1, #3
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4642      	mov	r2, r8
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e64:	464b      	mov	r3, r9
 8002e66:	460a      	mov	r2, r1
 8002e68:	eb42 0303 	adc.w	r3, r2, r3
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e84:	460b      	mov	r3, r1
 8002e86:	18db      	adds	r3, r3, r3
 8002e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	eb42 0303 	adc.w	r3, r2, r3
 8002e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e9a:	f7fd f9f1 	bl	8000280 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <UART_SetConfig+0x2d4>)
 8002ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	2164      	movs	r1, #100	@ 0x64
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	3332      	adds	r3, #50	@ 0x32
 8002eb6:	4a08      	ldr	r2, [pc, #32]	@ (8002ed8 <UART_SetConfig+0x2d4>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	f003 0207 	and.w	r2, r3, #7
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4422      	add	r2, r4
 8002eca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ecc:	e106      	b.n	80030dc <UART_SetConfig+0x4d8>
 8002ece:	bf00      	nop
 8002ed0:	40011000 	.word	0x40011000
 8002ed4:	40011400 	.word	0x40011400
 8002ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002eee:	4642      	mov	r2, r8
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	1891      	adds	r1, r2, r2
 8002ef4:	6239      	str	r1, [r7, #32]
 8002ef6:	415b      	adcs	r3, r3
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002efe:	4641      	mov	r1, r8
 8002f00:	1854      	adds	r4, r2, r1
 8002f02:	4649      	mov	r1, r9
 8002f04:	eb43 0501 	adc.w	r5, r3, r1
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	00eb      	lsls	r3, r5, #3
 8002f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f16:	00e2      	lsls	r2, r4, #3
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	18e3      	adds	r3, r4, r3
 8002f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f24:	464b      	mov	r3, r9
 8002f26:	eb45 0303 	adc.w	r3, r5, r3
 8002f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	008b      	lsls	r3, r1, #2
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f54:	4621      	mov	r1, r4
 8002f56:	008a      	lsls	r2, r1, #2
 8002f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f5c:	f7fd f990 	bl	8000280 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4b60      	ldr	r3, [pc, #384]	@ (80030e8 <UART_SetConfig+0x4e4>)
 8002f66:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	011c      	lsls	r4, r3, #4
 8002f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f80:	4642      	mov	r2, r8
 8002f82:	464b      	mov	r3, r9
 8002f84:	1891      	adds	r1, r2, r2
 8002f86:	61b9      	str	r1, [r7, #24]
 8002f88:	415b      	adcs	r3, r3
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f90:	4641      	mov	r1, r8
 8002f92:	1851      	adds	r1, r2, r1
 8002f94:	6139      	str	r1, [r7, #16]
 8002f96:	4649      	mov	r1, r9
 8002f98:	414b      	adcs	r3, r1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa8:	4659      	mov	r1, fp
 8002faa:	00cb      	lsls	r3, r1, #3
 8002fac:	4651      	mov	r1, sl
 8002fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	00ca      	lsls	r2, r1, #3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4642      	mov	r2, r8
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	460a      	mov	r2, r1
 8002fc8:	eb42 0303 	adc.w	r3, r2, r3
 8002fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fe8:	4649      	mov	r1, r9
 8002fea:	008b      	lsls	r3, r1, #2
 8002fec:	4641      	mov	r1, r8
 8002fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	008a      	lsls	r2, r1, #2
 8002ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ffa:	f7fd f941 	bl	8000280 <__aeabi_uldivmod>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4611      	mov	r1, r2
 8003004:	4b38      	ldr	r3, [pc, #224]	@ (80030e8 <UART_SetConfig+0x4e4>)
 8003006:	fba3 2301 	umull	r2, r3, r3, r1
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2264      	movs	r2, #100	@ 0x64
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	1acb      	subs	r3, r1, r3
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	3332      	adds	r3, #50	@ 0x32
 8003018:	4a33      	ldr	r2, [pc, #204]	@ (80030e8 <UART_SetConfig+0x4e4>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003024:	441c      	add	r4, r3
 8003026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800302a:	2200      	movs	r2, #0
 800302c:	673b      	str	r3, [r7, #112]	@ 0x70
 800302e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	1891      	adds	r1, r2, r2
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	415b      	adcs	r3, r3
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003044:	4641      	mov	r1, r8
 8003046:	1851      	adds	r1, r2, r1
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	4649      	mov	r1, r9
 800304c:	414b      	adcs	r3, r1
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800305c:	4659      	mov	r1, fp
 800305e:	00cb      	lsls	r3, r1, #3
 8003060:	4651      	mov	r1, sl
 8003062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003066:	4651      	mov	r1, sl
 8003068:	00ca      	lsls	r2, r1, #3
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	4603      	mov	r3, r0
 8003070:	4642      	mov	r2, r8
 8003072:	189b      	adds	r3, r3, r2
 8003074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003076:	464b      	mov	r3, r9
 8003078:	460a      	mov	r2, r1
 800307a:	eb42 0303 	adc.w	r3, r2, r3
 800307e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	663b      	str	r3, [r7, #96]	@ 0x60
 800308a:	667a      	str	r2, [r7, #100]	@ 0x64
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003098:	4649      	mov	r1, r9
 800309a:	008b      	lsls	r3, r1, #2
 800309c:	4641      	mov	r1, r8
 800309e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a2:	4641      	mov	r1, r8
 80030a4:	008a      	lsls	r2, r1, #2
 80030a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80030aa:	f7fd f8e9 	bl	8000280 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <UART_SetConfig+0x4e4>)
 80030b4:	fba3 1302 	umull	r1, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	2164      	movs	r1, #100	@ 0x64
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	3332      	adds	r3, #50	@ 0x32
 80030c6:	4a08      	ldr	r2, [pc, #32]	@ (80030e8 <UART_SetConfig+0x4e4>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	f003 020f 	and.w	r2, r3, #15
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4422      	add	r2, r4
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	bf00      	nop
 80030de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030e2:	46bd      	mov	sp, r7
 80030e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e8:	51eb851f 	.word	0x51eb851f

080030ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030fe:	2b84      	cmp	r3, #132	@ 0x84
 8003100:	d005      	beq.n	800310e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003102:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	3303      	adds	r3, #3
 800310c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003120:	f000 fb7c 	bl	800381c <vTaskStartScheduler>
  
  return osOK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	bd80      	pop	{r7, pc}

0800312a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800312a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312c:	b089      	sub	sp, #36	@ 0x24
 800312e:	af04      	add	r7, sp, #16
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <osThreadCreate+0x54>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01c      	beq.n	800317e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685c      	ldr	r4, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691e      	ldr	r6, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff ffc8 	bl	80030ec <makeFreeRtosPriority>
 800315c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003166:	9202      	str	r2, [sp, #8]
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	9100      	str	r1, [sp, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4632      	mov	r2, r6
 8003170:	4629      	mov	r1, r5
 8003172:	4620      	mov	r0, r4
 8003174:	f000 f8ed 	bl	8003352 <xTaskCreateStatic>
 8003178:	4603      	mov	r3, r0
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e01c      	b.n	80031b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685c      	ldr	r4, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800318a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ffaa 	bl	80030ec <makeFreeRtosPriority>
 8003198:	4602      	mov	r2, r0
 800319a:	f107 030c 	add.w	r3, r7, #12
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	9200      	str	r2, [sp, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	4632      	mov	r2, r6
 80031a6:	4629      	mov	r1, r5
 80031a8:	4620      	mov	r0, r4
 80031aa:	f000 f932 	bl	8003412 <xTaskCreate>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d001      	beq.n	80031b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e000      	b.n	80031ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80031b8:	68fb      	ldr	r3, [r7, #12]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <osDelay+0x16>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	e000      	b.n	80031da <osDelay+0x18>
 80031d8:	2301      	movs	r3, #1
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fae8 	bl	80037b0 <vTaskDelay>
  
  return osOK;
 80031e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f103 0208 	add.w	r2, r3, #8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003202:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f103 0208 	add.w	r2, r3, #8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f103 0208 	add.w	r2, r3, #8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	601a      	str	r2, [r3, #0]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032a2:	d103      	bne.n	80032ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e00c      	b.n	80032c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3308      	adds	r3, #8
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e002      	b.n	80032ba <vListInsert+0x2e>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d2f6      	bcs.n	80032b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	601a      	str	r2, [r3, #0]
}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6892      	ldr	r2, [r2, #8]
 8003314:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6852      	ldr	r2, [r2, #4]
 800331e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	429a      	cmp	r2, r3
 8003328:	d103      	bne.n	8003332 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1e5a      	subs	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003352:	b580      	push	{r7, lr}
 8003354:	b08e      	sub	sp, #56	@ 0x38
 8003356:	af04      	add	r7, sp, #16
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10b      	bne.n	800337e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	e7fd      	b.n	800337a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800337e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <xTaskCreateStatic+0x4a>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	61fb      	str	r3, [r7, #28]
}
 8003396:	bf00      	nop
 8003398:	bf00      	nop
 800339a:	e7fd      	b.n	8003398 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800339c:	23a0      	movs	r3, #160	@ 0xa0
 800339e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80033a4:	d00b      	beq.n	80033be <xTaskCreateStatic+0x6c>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	61bb      	str	r3, [r7, #24]
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	e7fd      	b.n	80033ba <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01e      	beq.n	8003404 <xTaskCreateStatic+0xb2>
 80033c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033de:	2300      	movs	r3, #0
 80033e0:	9303      	str	r3, [sp, #12]
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	9302      	str	r3, [sp, #8]
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f850 	bl	800349c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033fe:	f000 f8ed 	bl	80035dc <prvAddNewTaskToReadyList>
 8003402:	e001      	b.n	8003408 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003408:	697b      	ldr	r3, [r7, #20]
	}
 800340a:	4618      	mov	r0, r3
 800340c:	3728      	adds	r7, #40	@ 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003412:	b580      	push	{r7, lr}
 8003414:	b08c      	sub	sp, #48	@ 0x30
 8003416:	af04      	add	r7, sp, #16
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4618      	mov	r0, r3
 8003428:	f000 ff8e 	bl	8004348 <pvPortMalloc>
 800342c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00e      	beq.n	8003452 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003434:	20a0      	movs	r0, #160	@ 0xa0
 8003436:	f000 ff87 	bl	8004348 <pvPortMalloc>
 800343a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30
 8003448:	e005      	b.n	8003456 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800344a:	6978      	ldr	r0, [r7, #20]
 800344c:	f001 f84a 	bl	80044e4 <vPortFree>
 8003450:	e001      	b.n	8003456 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d017      	beq.n	800348c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	2300      	movs	r3, #0
 8003468:	9303      	str	r3, [sp, #12]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	9302      	str	r3, [sp, #8]
 800346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f80e 	bl	800349c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003480:	69f8      	ldr	r0, [r7, #28]
 8003482:	f000 f8ab 	bl	80035dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003486:	2301      	movs	r3, #1
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	e002      	b.n	8003492 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800348c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003490:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003492:	69bb      	ldr	r3, [r7, #24]
	}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034b4:	3b01      	subs	r3, #1
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f023 0307 	bic.w	r3, r3, #7
 80034c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	617b      	str	r3, [r7, #20]
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	e7fd      	b.n	80034e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01f      	beq.n	800352c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	e012      	b.n	8003518 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	4413      	add	r3, r2
 80034f8:	7819      	ldrb	r1, [r3, #0]
 80034fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	4413      	add	r3, r2
 8003500:	3334      	adds	r3, #52	@ 0x34
 8003502:	460a      	mov	r2, r1
 8003504:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	4413      	add	r3, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	d9e9      	bls.n	80034f2 <prvInitialiseNewTask+0x56>
 800351e:	e000      	b.n	8003522 <prvInitialiseNewTask+0x86>
			{
				break;
 8003520:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800352a:	e003      	b.n	8003534 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	2b06      	cmp	r3, #6
 8003538:	d901      	bls.n	800353e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800353a:	2306      	movs	r3, #6
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003542:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003548:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	2200      	movs	r2, #0
 800354e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	3304      	adds	r3, #4
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fe68 	bl	800322a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	3318      	adds	r3, #24
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fe63 	bl	800322a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003568:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356c:	f1c3 0207 	rsb	r2, r3, #7
 8003570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003572:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	2200      	movs	r2, #0
 800357e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003584:	2200      	movs	r2, #0
 8003586:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	334c      	adds	r3, #76	@ 0x4c
 800358e:	224c      	movs	r2, #76	@ 0x4c
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 f8e6 	bl	8004764 <memset>
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	4a0d      	ldr	r2, [pc, #52]	@ (80035d0 <prvInitialiseNewTask+0x134>)
 800359c:	651a      	str	r2, [r3, #80]	@ 0x50
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	4a0c      	ldr	r2, [pc, #48]	@ (80035d4 <prvInitialiseNewTask+0x138>)
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	4a0c      	ldr	r2, [pc, #48]	@ (80035d8 <prvInitialiseNewTask+0x13c>)
 80035a8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	68f9      	ldr	r1, [r7, #12]
 80035ae:	69b8      	ldr	r0, [r7, #24]
 80035b0:	f000 fcba 	bl	8003f28 <pxPortInitialiseStack>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035c6:	bf00      	nop
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20004154 	.word	0x20004154
 80035d4:	200041bc 	.word	0x200041bc
 80035d8:	20004224 	.word	0x20004224

080035dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035e4:	f000 fdd0 	bl	8004188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <prvAddNewTaskToReadyList+0xb8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	4a29      	ldr	r2, [pc, #164]	@ (8003694 <prvAddNewTaskToReadyList+0xb8>)
 80035f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035f2:	4b29      	ldr	r3, [pc, #164]	@ (8003698 <prvAddNewTaskToReadyList+0xbc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035fa:	4a27      	ldr	r2, [pc, #156]	@ (8003698 <prvAddNewTaskToReadyList+0xbc>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003600:	4b24      	ldr	r3, [pc, #144]	@ (8003694 <prvAddNewTaskToReadyList+0xb8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d110      	bne.n	800362a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003608:	f000 fb64 	bl	8003cd4 <prvInitialiseTaskLists>
 800360c:	e00d      	b.n	800362a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800360e:	4b23      	ldr	r3, [pc, #140]	@ (800369c <prvAddNewTaskToReadyList+0xc0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003616:	4b20      	ldr	r3, [pc, #128]	@ (8003698 <prvAddNewTaskToReadyList+0xbc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	429a      	cmp	r2, r3
 8003622:	d802      	bhi.n	800362a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003624:	4a1c      	ldr	r2, [pc, #112]	@ (8003698 <prvAddNewTaskToReadyList+0xbc>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800362a:	4b1d      	ldr	r3, [pc, #116]	@ (80036a0 <prvAddNewTaskToReadyList+0xc4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	4a1b      	ldr	r2, [pc, #108]	@ (80036a0 <prvAddNewTaskToReadyList+0xc4>)
 8003632:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	2201      	movs	r2, #1
 800363a:	409a      	lsls	r2, r3
 800363c:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <prvAddNewTaskToReadyList+0xc8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4313      	orrs	r3, r2
 8003642:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <prvAddNewTaskToReadyList+0xc8>)
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4a15      	ldr	r2, [pc, #84]	@ (80036a8 <prvAddNewTaskToReadyList+0xcc>)
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f7ff fdf1 	bl	8003244 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003662:	f000 fdc3 	bl	80041ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <prvAddNewTaskToReadyList+0xc0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00e      	beq.n	800368c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800366e:	4b0a      	ldr	r3, [pc, #40]	@ (8003698 <prvAddNewTaskToReadyList+0xbc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	429a      	cmp	r2, r3
 800367a:	d207      	bcs.n	800368c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <prvAddNewTaskToReadyList+0xd0>)
 800367e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000500 	.word	0x20000500
 8003698:	20000400 	.word	0x20000400
 800369c:	2000050c 	.word	0x2000050c
 80036a0:	2000051c 	.word	0x2000051c
 80036a4:	20000508 	.word	0x20000508
 80036a8:	20000404 	.word	0x20000404
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	@ 0x28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <vTaskDelayUntil+0x2c>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	617b      	str	r3, [r7, #20]
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <vTaskDelayUntil+0x4a>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	613b      	str	r3, [r7, #16]
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	e7fd      	b.n	80036f6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80036fa:	4b2a      	ldr	r3, [pc, #168]	@ (80037a4 <vTaskDelayUntil+0xf4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <vTaskDelayUntil+0x6a>
	__asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	60fb      	str	r3, [r7, #12]
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	e7fd      	b.n	8003716 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800371a:	f000 f8e9 	bl	80038f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800371e:	4b22      	ldr	r3, [pc, #136]	@ (80037a8 <vTaskDelayUntil+0xf8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	4413      	add	r3, r2
 800372c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a3a      	ldr	r2, [r7, #32]
 8003734:	429a      	cmp	r2, r3
 8003736:	d20b      	bcs.n	8003750 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	429a      	cmp	r2, r3
 8003740:	d211      	bcs.n	8003766 <vTaskDelayUntil+0xb6>
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	429a      	cmp	r2, r3
 8003748:	d90d      	bls.n	8003766 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800374a:	2301      	movs	r3, #1
 800374c:	627b      	str	r3, [r7, #36]	@ 0x24
 800374e:	e00a      	b.n	8003766 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	429a      	cmp	r2, r3
 8003758:	d303      	bcc.n	8003762 <vTaskDelayUntil+0xb2>
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	429a      	cmp	r2, r3
 8003760:	d901      	bls.n	8003766 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003762:	2301      	movs	r3, #1
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d006      	beq.n	8003780 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fb6e 	bl	8003e5c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003780:	f000 f8c4 	bl	800390c <xTaskResumeAll>
 8003784:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d107      	bne.n	800379c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800378c:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <vTaskDelayUntil+0xfc>)
 800378e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800379c:	bf00      	nop
 800379e:	3728      	adds	r7, #40	@ 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000528 	.word	0x20000528
 80037a8:	20000504 	.word	0x20000504
 80037ac:	e000ed04 	.word	0xe000ed04

080037b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d018      	beq.n	80037f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037c2:	4b14      	ldr	r3, [pc, #80]	@ (8003814 <vTaskDelay+0x64>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <vTaskDelay+0x32>
	__asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	60bb      	str	r3, [r7, #8]
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	e7fd      	b.n	80037de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037e2:	f000 f885 	bl	80038f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037e6:	2100      	movs	r1, #0
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fb37 	bl	8003e5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037ee:	f000 f88d 	bl	800390c <xTaskResumeAll>
 80037f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80037fa:	4b07      	ldr	r3, [pc, #28]	@ (8003818 <vTaskDelay+0x68>)
 80037fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000528 	.word	0x20000528
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	@ 0x28
 8003820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800382a:	463a      	mov	r2, r7
 800382c:	1d39      	adds	r1, r7, #4
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	4618      	mov	r0, r3
 8003834:	f7fc fe9c 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	9202      	str	r2, [sp, #8]
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	2300      	movs	r3, #0
 8003848:	460a      	mov	r2, r1
 800384a:	4921      	ldr	r1, [pc, #132]	@ (80038d0 <vTaskStartScheduler+0xb4>)
 800384c:	4821      	ldr	r0, [pc, #132]	@ (80038d4 <vTaskStartScheduler+0xb8>)
 800384e:	f7ff fd80 	bl	8003352 <xTaskCreateStatic>
 8003852:	4603      	mov	r3, r0
 8003854:	4a20      	ldr	r2, [pc, #128]	@ (80038d8 <vTaskStartScheduler+0xbc>)
 8003856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003858:	4b1f      	ldr	r3, [pc, #124]	@ (80038d8 <vTaskStartScheduler+0xbc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003860:	2301      	movs	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e001      	b.n	800386a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d11b      	bne.n	80038a8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	613b      	str	r3, [r7, #16]
}
 8003882:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003884:	4b15      	ldr	r3, [pc, #84]	@ (80038dc <vTaskStartScheduler+0xc0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	334c      	adds	r3, #76	@ 0x4c
 800388a:	4a15      	ldr	r2, [pc, #84]	@ (80038e0 <vTaskStartScheduler+0xc4>)
 800388c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <vTaskStartScheduler+0xc8>)
 8003890:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003894:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003896:	4b14      	ldr	r3, [pc, #80]	@ (80038e8 <vTaskStartScheduler+0xcc>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800389c:	4b13      	ldr	r3, [pc, #76]	@ (80038ec <vTaskStartScheduler+0xd0>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038a2:	f000 fbcd 	bl	8004040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038a6:	e00f      	b.n	80038c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ae:	d10b      	bne.n	80038c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	60fb      	str	r3, [r7, #12]
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	e7fd      	b.n	80038c4 <vTaskStartScheduler+0xa8>
}
 80038c8:	bf00      	nop
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	08005178 	.word	0x08005178
 80038d4:	08003ca5 	.word	0x08003ca5
 80038d8:	20000524 	.word	0x20000524
 80038dc:	20000400 	.word	0x20000400
 80038e0:	20000010 	.word	0x20000010
 80038e4:	20000520 	.word	0x20000520
 80038e8:	2000050c 	.word	0x2000050c
 80038ec:	20000504 	.word	0x20000504

080038f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038f4:	4b04      	ldr	r3, [pc, #16]	@ (8003908 <vTaskSuspendAll+0x18>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	4a03      	ldr	r2, [pc, #12]	@ (8003908 <vTaskSuspendAll+0x18>)
 80038fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	20000528 	.word	0x20000528

0800390c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800391a:	4b42      	ldr	r3, [pc, #264]	@ (8003a24 <xTaskResumeAll+0x118>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <xTaskResumeAll+0x2e>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	603b      	str	r3, [r7, #0]
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	e7fd      	b.n	8003936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800393a:	f000 fc25 	bl	8004188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800393e:	4b39      	ldr	r3, [pc, #228]	@ (8003a24 <xTaskResumeAll+0x118>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3b01      	subs	r3, #1
 8003944:	4a37      	ldr	r2, [pc, #220]	@ (8003a24 <xTaskResumeAll+0x118>)
 8003946:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003948:	4b36      	ldr	r3, [pc, #216]	@ (8003a24 <xTaskResumeAll+0x118>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d161      	bne.n	8003a14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003950:	4b35      	ldr	r3, [pc, #212]	@ (8003a28 <xTaskResumeAll+0x11c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05d      	beq.n	8003a14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003958:	e02e      	b.n	80039b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800395a:	4b34      	ldr	r3, [pc, #208]	@ (8003a2c <xTaskResumeAll+0x120>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3318      	adds	r3, #24
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fcc9 	bl	80032fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3304      	adds	r3, #4
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fcc4 	bl	80032fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397a:	2201      	movs	r2, #1
 800397c:	409a      	lsls	r2, r3
 800397e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a30 <xTaskResumeAll+0x124>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	4a2a      	ldr	r2, [pc, #168]	@ (8003a30 <xTaskResumeAll+0x124>)
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4a27      	ldr	r2, [pc, #156]	@ (8003a34 <xTaskResumeAll+0x128>)
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f7ff fc50 	bl	8003244 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a8:	4b23      	ldr	r3, [pc, #140]	@ (8003a38 <xTaskResumeAll+0x12c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039b2:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <xTaskResumeAll+0x130>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039b8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a2c <xTaskResumeAll+0x120>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1cc      	bne.n	800395a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039c6:	f000 fa29 	bl	8003e1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003a40 <xTaskResumeAll+0x134>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d010      	beq.n	80039f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039d6:	f000 f847 	bl	8003a68 <xTaskIncrementTick>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80039e0:	4b16      	ldr	r3, [pc, #88]	@ (8003a3c <xTaskResumeAll+0x130>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f1      	bne.n	80039d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80039f2:	4b13      	ldr	r3, [pc, #76]	@ (8003a40 <xTaskResumeAll+0x134>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039f8:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <xTaskResumeAll+0x130>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a04:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <xTaskResumeAll+0x138>)
 8003a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a14:	f000 fbea 	bl	80041ec <vPortExitCritical>

	return xAlreadyYielded;
 8003a18:	68bb      	ldr	r3, [r7, #8]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000528 	.word	0x20000528
 8003a28:	20000500 	.word	0x20000500
 8003a2c:	200004c0 	.word	0x200004c0
 8003a30:	20000508 	.word	0x20000508
 8003a34:	20000404 	.word	0x20000404
 8003a38:	20000400 	.word	0x20000400
 8003a3c:	20000514 	.word	0x20000514
 8003a40:	20000510 	.word	0x20000510
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <xTaskGetTickCount+0x1c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a54:	687b      	ldr	r3, [r7, #4]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000504 	.word	0x20000504

08003a68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a72:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb0 <xTaskIncrementTick+0x148>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f040 808f 	bne.w	8003b9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8003bb4 <xTaskIncrementTick+0x14c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a84:	4a4b      	ldr	r2, [pc, #300]	@ (8003bb4 <xTaskIncrementTick+0x14c>)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d121      	bne.n	8003ad4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a90:	4b49      	ldr	r3, [pc, #292]	@ (8003bb8 <xTaskIncrementTick+0x150>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	603b      	str	r3, [r7, #0]
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	e7fd      	b.n	8003aae <xTaskIncrementTick+0x46>
 8003ab2:	4b41      	ldr	r3, [pc, #260]	@ (8003bb8 <xTaskIncrementTick+0x150>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	4b40      	ldr	r3, [pc, #256]	@ (8003bbc <xTaskIncrementTick+0x154>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb8 <xTaskIncrementTick+0x150>)
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4a3e      	ldr	r2, [pc, #248]	@ (8003bbc <xTaskIncrementTick+0x154>)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc0 <xTaskIncrementTick+0x158>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc0 <xTaskIncrementTick+0x158>)
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	f000 f9a4 	bl	8003e1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc4 <xTaskIncrementTick+0x15c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d348      	bcc.n	8003b70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ade:	4b36      	ldr	r3, [pc, #216]	@ (8003bb8 <xTaskIncrementTick+0x150>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d104      	bne.n	8003af2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae8:	4b36      	ldr	r3, [pc, #216]	@ (8003bc4 <xTaskIncrementTick+0x15c>)
 8003aea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003aee:	601a      	str	r2, [r3, #0]
					break;
 8003af0:	e03e      	b.n	8003b70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af2:	4b31      	ldr	r3, [pc, #196]	@ (8003bb8 <xTaskIncrementTick+0x150>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d203      	bcs.n	8003b12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc4 <xTaskIncrementTick+0x15c>)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b10:	e02e      	b.n	8003b70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff fbf1 	bl	80032fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	3318      	adds	r3, #24
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fbe8 	bl	80032fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	2201      	movs	r2, #1
 8003b34:	409a      	lsls	r2, r3
 8003b36:	4b24      	ldr	r3, [pc, #144]	@ (8003bc8 <xTaskIncrementTick+0x160>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	4a22      	ldr	r2, [pc, #136]	@ (8003bc8 <xTaskIncrementTick+0x160>)
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bcc <xTaskIncrementTick+0x164>)
 8003b4e:	441a      	add	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4619      	mov	r1, r3
 8003b56:	4610      	mov	r0, r2
 8003b58:	f7ff fb74 	bl	8003244 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b60:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd0 <xTaskIncrementTick+0x168>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d3b9      	bcc.n	8003ade <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b6e:	e7b6      	b.n	8003ade <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b70:	4b17      	ldr	r3, [pc, #92]	@ (8003bd0 <xTaskIncrementTick+0x168>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b76:	4915      	ldr	r1, [pc, #84]	@ (8003bcc <xTaskIncrementTick+0x164>)
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d901      	bls.n	8003b8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b8c:	4b11      	ldr	r3, [pc, #68]	@ (8003bd4 <xTaskIncrementTick+0x16c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e004      	b.n	8003ba4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <xTaskIncrementTick+0x170>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd8 <xTaskIncrementTick+0x170>)
 8003ba2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ba4:	697b      	ldr	r3, [r7, #20]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000528 	.word	0x20000528
 8003bb4:	20000504 	.word	0x20000504
 8003bb8:	200004b8 	.word	0x200004b8
 8003bbc:	200004bc 	.word	0x200004bc
 8003bc0:	20000518 	.word	0x20000518
 8003bc4:	20000520 	.word	0x20000520
 8003bc8:	20000508 	.word	0x20000508
 8003bcc:	20000404 	.word	0x20000404
 8003bd0:	20000400 	.word	0x20000400
 8003bd4:	20000514 	.word	0x20000514
 8003bd8:	20000510 	.word	0x20000510

08003bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003be2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <vTaskSwitchContext+0xb0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bea:	4b29      	ldr	r3, [pc, #164]	@ (8003c90 <vTaskSwitchContext+0xb4>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bf0:	e045      	b.n	8003c7e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003bf2:	4b27      	ldr	r3, [pc, #156]	@ (8003c90 <vTaskSwitchContext+0xb4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf8:	4b26      	ldr	r3, [pc, #152]	@ (8003c94 <vTaskSwitchContext+0xb8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	fab3 f383 	clz	r3, r3
 8003c04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c06:	7afb      	ldrb	r3, [r7, #11]
 8003c08:	f1c3 031f 	rsb	r3, r3, #31
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	4922      	ldr	r1, [pc, #136]	@ (8003c98 <vTaskSwitchContext+0xbc>)
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	607b      	str	r3, [r7, #4]
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	e7fd      	b.n	8003c36 <vTaskSwitchContext+0x5a>
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4a14      	ldr	r2, [pc, #80]	@ (8003c98 <vTaskSwitchContext+0xbc>)
 8003c46:	4413      	add	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d104      	bne.n	8003c6a <vTaskSwitchContext+0x8e>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a0a      	ldr	r2, [pc, #40]	@ (8003c9c <vTaskSwitchContext+0xc0>)
 8003c72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c74:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <vTaskSwitchContext+0xc0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	334c      	adds	r3, #76	@ 0x4c
 8003c7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ca0 <vTaskSwitchContext+0xc4>)
 8003c7c:	6013      	str	r3, [r2, #0]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000528 	.word	0x20000528
 8003c90:	20000514 	.word	0x20000514
 8003c94:	20000508 	.word	0x20000508
 8003c98:	20000404 	.word	0x20000404
 8003c9c:	20000400 	.word	0x20000400
 8003ca0:	20000010 	.word	0x20000010

08003ca4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003cac:	f000 f852 	bl	8003d54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cb0:	4b06      	ldr	r3, [pc, #24]	@ (8003ccc <prvIdleTask+0x28>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d9f9      	bls.n	8003cac <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cb8:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <prvIdleTask+0x2c>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cc8:	e7f0      	b.n	8003cac <prvIdleTask+0x8>
 8003cca:	bf00      	nop
 8003ccc:	20000404 	.word	0x20000404
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cda:	2300      	movs	r3, #0
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	e00c      	b.n	8003cfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4a12      	ldr	r2, [pc, #72]	@ (8003d34 <prvInitialiseTaskLists+0x60>)
 8003cec:	4413      	add	r3, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fa7b 	bl	80031ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d9ef      	bls.n	8003ce0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d00:	480d      	ldr	r0, [pc, #52]	@ (8003d38 <prvInitialiseTaskLists+0x64>)
 8003d02:	f7ff fa72 	bl	80031ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d06:	480d      	ldr	r0, [pc, #52]	@ (8003d3c <prvInitialiseTaskLists+0x68>)
 8003d08:	f7ff fa6f 	bl	80031ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d0c:	480c      	ldr	r0, [pc, #48]	@ (8003d40 <prvInitialiseTaskLists+0x6c>)
 8003d0e:	f7ff fa6c 	bl	80031ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d12:	480c      	ldr	r0, [pc, #48]	@ (8003d44 <prvInitialiseTaskLists+0x70>)
 8003d14:	f7ff fa69 	bl	80031ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d18:	480b      	ldr	r0, [pc, #44]	@ (8003d48 <prvInitialiseTaskLists+0x74>)
 8003d1a:	f7ff fa66 	bl	80031ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <prvInitialiseTaskLists+0x78>)
 8003d20:	4a05      	ldr	r2, [pc, #20]	@ (8003d38 <prvInitialiseTaskLists+0x64>)
 8003d22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d24:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <prvInitialiseTaskLists+0x7c>)
 8003d26:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <prvInitialiseTaskLists+0x68>)
 8003d28:	601a      	str	r2, [r3, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000404 	.word	0x20000404
 8003d38:	20000490 	.word	0x20000490
 8003d3c:	200004a4 	.word	0x200004a4
 8003d40:	200004c0 	.word	0x200004c0
 8003d44:	200004d4 	.word	0x200004d4
 8003d48:	200004ec 	.word	0x200004ec
 8003d4c:	200004b8 	.word	0x200004b8
 8003d50:	200004bc 	.word	0x200004bc

08003d54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d5a:	e019      	b.n	8003d90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d5c:	f000 fa14 	bl	8004188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d60:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <prvCheckTasksWaitingTermination+0x50>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fac6 	bl	80032fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d72:	4b0d      	ldr	r3, [pc, #52]	@ (8003da8 <prvCheckTasksWaitingTermination+0x54>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	4a0b      	ldr	r2, [pc, #44]	@ (8003da8 <prvCheckTasksWaitingTermination+0x54>)
 8003d7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <prvCheckTasksWaitingTermination+0x58>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	4a0a      	ldr	r2, [pc, #40]	@ (8003dac <prvCheckTasksWaitingTermination+0x58>)
 8003d84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d86:	f000 fa31 	bl	80041ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f810 	bl	8003db0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <prvCheckTasksWaitingTermination+0x58>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e1      	bne.n	8003d5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	200004d4 	.word	0x200004d4
 8003da8:	20000500 	.word	0x20000500
 8003dac:	200004e8 	.word	0x200004e8

08003db0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	334c      	adds	r3, #76	@ 0x4c
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fcd9 	bl	8004774 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d108      	bne.n	8003dde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fb87 	bl	80044e4 <vPortFree>
				vPortFree( pxTCB );
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fb84 	bl	80044e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ddc:	e019      	b.n	8003e12 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d103      	bne.n	8003df0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fb7b 	bl	80044e4 <vPortFree>
	}
 8003dee:	e010      	b.n	8003e12 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d00b      	beq.n	8003e12 <prvDeleteTCB+0x62>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	60fb      	str	r3, [r7, #12]
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	e7fd      	b.n	8003e0e <prvDeleteTCB+0x5e>
	}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e22:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <prvResetNextTaskUnblockTime+0x38>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <prvResetNextTaskUnblockTime+0x3c>)
 8003e2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e34:	e008      	b.n	8003e48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e36:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <prvResetNextTaskUnblockTime+0x38>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4a04      	ldr	r2, [pc, #16]	@ (8003e58 <prvResetNextTaskUnblockTime+0x3c>)
 8003e46:	6013      	str	r3, [r2, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	200004b8 	.word	0x200004b8
 8003e58:	20000520 	.word	0x20000520

08003e5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e66:	4b29      	ldr	r3, [pc, #164]	@ (8003f0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e6c:	4b28      	ldr	r3, [pc, #160]	@ (8003f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fa43 	bl	80032fe <uxListRemove>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e7e:	4b24      	ldr	r3, [pc, #144]	@ (8003f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	2201      	movs	r2, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	4b21      	ldr	r3, [pc, #132]	@ (8003f14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4013      	ands	r3, r2
 8003e92:	4a20      	ldr	r2, [pc, #128]	@ (8003f14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e9c:	d10a      	bne.n	8003eb4 <prvAddCurrentTaskToDelayedList+0x58>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	481a      	ldr	r0, [pc, #104]	@ (8003f18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003eae:	f7ff f9c9 	bl	8003244 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003eb2:	e026      	b.n	8003f02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ebc:	4b14      	ldr	r3, [pc, #80]	@ (8003f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d209      	bcs.n	8003ee0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ecc:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f7ff f9d7 	bl	800328c <vListInsert>
}
 8003ede:	e010      	b.n	8003f02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f7ff f9cd 	bl	800328c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d202      	bcs.n	8003f02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003efc:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6013      	str	r3, [r2, #0]
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000504 	.word	0x20000504
 8003f10:	20000400 	.word	0x20000400
 8003f14:	20000508 	.word	0x20000508
 8003f18:	200004ec 	.word	0x200004ec
 8003f1c:	200004bc 	.word	0x200004bc
 8003f20:	200004b8 	.word	0x200004b8
 8003f24:	20000520 	.word	0x20000520

08003f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3b04      	subs	r3, #4
 8003f38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3b04      	subs	r3, #4
 8003f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 0201 	bic.w	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b04      	subs	r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f58:	4a0c      	ldr	r2, [pc, #48]	@ (8003f8c <pxPortInitialiseStack+0x64>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3b14      	subs	r3, #20
 8003f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b04      	subs	r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f06f 0202 	mvn.w	r2, #2
 8003f76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3b20      	subs	r3, #32
 8003f7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	08003f91 	.word	0x08003f91

08003f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f9a:	4b13      	ldr	r3, [pc, #76]	@ (8003fe8 <prvTaskExitError+0x58>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa2:	d00b      	beq.n	8003fbc <prvTaskExitError+0x2c>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	60fb      	str	r3, [r7, #12]
}
 8003fb6:	bf00      	nop
 8003fb8:	bf00      	nop
 8003fba:	e7fd      	b.n	8003fb8 <prvTaskExitError+0x28>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	60bb      	str	r3, [r7, #8]
}
 8003fce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003fd0:	bf00      	nop
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0fc      	beq.n	8003fd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	00000000 	.word	0x00000000

08003ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ff0:	4b07      	ldr	r3, [pc, #28]	@ (8004010 <pxCurrentTCBConst2>)
 8003ff2:	6819      	ldr	r1, [r3, #0]
 8003ff4:	6808      	ldr	r0, [r1, #0]
 8003ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ffa:	f380 8809 	msr	PSP, r0
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f380 8811 	msr	BASEPRI, r0
 800400a:	4770      	bx	lr
 800400c:	f3af 8000 	nop.w

08004010 <pxCurrentTCBConst2>:
 8004010:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop

08004018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004018:	4808      	ldr	r0, [pc, #32]	@ (800403c <prvPortStartFirstTask+0x24>)
 800401a:	6800      	ldr	r0, [r0, #0]
 800401c:	6800      	ldr	r0, [r0, #0]
 800401e:	f380 8808 	msr	MSP, r0
 8004022:	f04f 0000 	mov.w	r0, #0
 8004026:	f380 8814 	msr	CONTROL, r0
 800402a:	b662      	cpsie	i
 800402c:	b661      	cpsie	f
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	df00      	svc	0
 8004038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800403a:	bf00      	nop
 800403c:	e000ed08 	.word	0xe000ed08

08004040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004046:	4b47      	ldr	r3, [pc, #284]	@ (8004164 <xPortStartScheduler+0x124>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a47      	ldr	r2, [pc, #284]	@ (8004168 <xPortStartScheduler+0x128>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d10b      	bne.n	8004068 <xPortStartScheduler+0x28>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	613b      	str	r3, [r7, #16]
}
 8004062:	bf00      	nop
 8004064:	bf00      	nop
 8004066:	e7fd      	b.n	8004064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004068:	4b3e      	ldr	r3, [pc, #248]	@ (8004164 <xPortStartScheduler+0x124>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3f      	ldr	r2, [pc, #252]	@ (800416c <xPortStartScheduler+0x12c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10b      	bne.n	800408a <xPortStartScheduler+0x4a>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	60fb      	str	r3, [r7, #12]
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	e7fd      	b.n	8004086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800408a:	4b39      	ldr	r3, [pc, #228]	@ (8004170 <xPortStartScheduler+0x130>)
 800408c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	22ff      	movs	r2, #255	@ 0xff
 800409a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	4b31      	ldr	r3, [pc, #196]	@ (8004174 <xPortStartScheduler+0x134>)
 80040b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040b2:	4b31      	ldr	r3, [pc, #196]	@ (8004178 <xPortStartScheduler+0x138>)
 80040b4:	2207      	movs	r2, #7
 80040b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040b8:	e009      	b.n	80040ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80040ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004178 <xPortStartScheduler+0x138>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3b01      	subs	r3, #1
 80040c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004178 <xPortStartScheduler+0x138>)
 80040c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d6:	2b80      	cmp	r3, #128	@ 0x80
 80040d8:	d0ef      	beq.n	80040ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040da:	4b27      	ldr	r3, [pc, #156]	@ (8004178 <xPortStartScheduler+0x138>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f1c3 0307 	rsb	r3, r3, #7
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d00b      	beq.n	80040fe <xPortStartScheduler+0xbe>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	60bb      	str	r3, [r7, #8]
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	e7fd      	b.n	80040fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004178 <xPortStartScheduler+0x138>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	4a1c      	ldr	r2, [pc, #112]	@ (8004178 <xPortStartScheduler+0x138>)
 8004106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004108:	4b1b      	ldr	r3, [pc, #108]	@ (8004178 <xPortStartScheduler+0x138>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004110:	4a19      	ldr	r2, [pc, #100]	@ (8004178 <xPortStartScheduler+0x138>)
 8004112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800411c:	4b17      	ldr	r3, [pc, #92]	@ (800417c <xPortStartScheduler+0x13c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a16      	ldr	r2, [pc, #88]	@ (800417c <xPortStartScheduler+0x13c>)
 8004122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004128:	4b14      	ldr	r3, [pc, #80]	@ (800417c <xPortStartScheduler+0x13c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a13      	ldr	r2, [pc, #76]	@ (800417c <xPortStartScheduler+0x13c>)
 800412e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004134:	f000 f8da 	bl	80042ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004138:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <xPortStartScheduler+0x140>)
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800413e:	f000 f8f9 	bl	8004334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004142:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <xPortStartScheduler+0x144>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a0f      	ldr	r2, [pc, #60]	@ (8004184 <xPortStartScheduler+0x144>)
 8004148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800414c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800414e:	f7ff ff63 	bl	8004018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004152:	f7ff fd43 	bl	8003bdc <vTaskSwitchContext>
	prvTaskExitError();
 8004156:	f7ff ff1b 	bl	8003f90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	e000ed00 	.word	0xe000ed00
 8004168:	410fc271 	.word	0x410fc271
 800416c:	410fc270 	.word	0x410fc270
 8004170:	e000e400 	.word	0xe000e400
 8004174:	2000052c 	.word	0x2000052c
 8004178:	20000530 	.word	0x20000530
 800417c:	e000ed20 	.word	0xe000ed20
 8004180:	2000000c 	.word	0x2000000c
 8004184:	e000ef34 	.word	0xe000ef34

08004188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	607b      	str	r3, [r7, #4]
}
 80041a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041a2:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <vPortEnterCritical+0x5c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	4a0e      	ldr	r2, [pc, #56]	@ (80041e4 <vPortEnterCritical+0x5c>)
 80041aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041ac:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <vPortEnterCritical+0x5c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d110      	bne.n	80041d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <vPortEnterCritical+0x60>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	603b      	str	r3, [r7, #0]
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <vPortEnterCritical+0x4a>
	}
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	2000000c 	.word	0x2000000c
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041f2:	4b12      	ldr	r3, [pc, #72]	@ (800423c <vPortExitCritical+0x50>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <vPortExitCritical+0x26>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	607b      	str	r3, [r7, #4]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004212:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <vPortExitCritical+0x50>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3b01      	subs	r3, #1
 8004218:	4a08      	ldr	r2, [pc, #32]	@ (800423c <vPortExitCritical+0x50>)
 800421a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800421c:	4b07      	ldr	r3, [pc, #28]	@ (800423c <vPortExitCritical+0x50>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <vPortExitCritical+0x44>
 8004224:	2300      	movs	r3, #0
 8004226:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800422e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	2000000c 	.word	0x2000000c

08004240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004240:	f3ef 8009 	mrs	r0, PSP
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <pxCurrentTCBConst>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	f01e 0f10 	tst.w	lr, #16
 8004250:	bf08      	it	eq
 8004252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425a:	6010      	str	r0, [r2, #0]
 800425c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004264:	f380 8811 	msr	BASEPRI, r0
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f7ff fcb4 	bl	8003bdc <vTaskSwitchContext>
 8004274:	f04f 0000 	mov.w	r0, #0
 8004278:	f380 8811 	msr	BASEPRI, r0
 800427c:	bc09      	pop	{r0, r3}
 800427e:	6819      	ldr	r1, [r3, #0]
 8004280:	6808      	ldr	r0, [r1, #0]
 8004282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004286:	f01e 0f10 	tst.w	lr, #16
 800428a:	bf08      	it	eq
 800428c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004290:	f380 8809 	msr	PSP, r0
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	f3af 8000 	nop.w

080042a0 <pxCurrentTCBConst>:
 80042a0:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop

080042a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	607b      	str	r3, [r7, #4]
}
 80042c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042c2:	f7ff fbd1 	bl	8003a68 <xTaskIncrementTick>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042cc:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <SysTick_Handler+0x40>)
 80042ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f383 8811 	msr	BASEPRI, r3
}
 80042de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <vPortSetupTimerInterrupt+0x34>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <vPortSetupTimerInterrupt+0x38>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <vPortSetupTimerInterrupt+0x3c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a0a      	ldr	r2, [pc, #40]	@ (800432c <vPortSetupTimerInterrupt+0x40>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	4a09      	ldr	r2, [pc, #36]	@ (8004330 <vPortSetupTimerInterrupt+0x44>)
 800430a:	3b01      	subs	r3, #1
 800430c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800430e:	4b04      	ldr	r3, [pc, #16]	@ (8004320 <vPortSetupTimerInterrupt+0x34>)
 8004310:	2207      	movs	r2, #7
 8004312:	601a      	str	r2, [r3, #0]
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	e000e010 	.word	0xe000e010
 8004324:	e000e018 	.word	0xe000e018
 8004328:	20000000 	.word	0x20000000
 800432c:	10624dd3 	.word	0x10624dd3
 8004330:	e000e014 	.word	0xe000e014

08004334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004344 <vPortEnableVFP+0x10>
 8004338:	6801      	ldr	r1, [r0, #0]
 800433a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800433e:	6001      	str	r1, [r0, #0]
 8004340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004342:	bf00      	nop
 8004344:	e000ed88 	.word	0xe000ed88

08004348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	@ 0x28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004354:	f7ff facc 	bl	80038f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004358:	4b5c      	ldr	r3, [pc, #368]	@ (80044cc <pvPortMalloc+0x184>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004360:	f000 f924 	bl	80045ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004364:	4b5a      	ldr	r3, [pc, #360]	@ (80044d0 <pvPortMalloc+0x188>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 8095 	bne.w	800449c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01e      	beq.n	80043b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004378:	2208      	movs	r2, #8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	2b00      	cmp	r3, #0
 8004388:	d015      	beq.n	80043b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f023 0307 	bic.w	r3, r3, #7
 8004390:	3308      	adds	r3, #8
 8004392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <pvPortMalloc+0x6e>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	617b      	str	r3, [r7, #20]
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	e7fd      	b.n	80043b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d06f      	beq.n	800449c <pvPortMalloc+0x154>
 80043bc:	4b45      	ldr	r3, [pc, #276]	@ (80044d4 <pvPortMalloc+0x18c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d86a      	bhi.n	800449c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043c6:	4b44      	ldr	r3, [pc, #272]	@ (80044d8 <pvPortMalloc+0x190>)
 80043c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043ca:	4b43      	ldr	r3, [pc, #268]	@ (80044d8 <pvPortMalloc+0x190>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043d0:	e004      	b.n	80043dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d903      	bls.n	80043ee <pvPortMalloc+0xa6>
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f1      	bne.n	80043d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043ee:	4b37      	ldr	r3, [pc, #220]	@ (80044cc <pvPortMalloc+0x184>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d051      	beq.n	800449c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2208      	movs	r2, #8
 80043fe:	4413      	add	r3, r2
 8004400:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	1ad2      	subs	r2, r2, r3
 8004412:	2308      	movs	r3, #8
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	429a      	cmp	r2, r3
 8004418:	d920      	bls.n	800445c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800441a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <pvPortMalloc+0xfc>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	613b      	str	r3, [r7, #16]
}
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	e7fd      	b.n	8004440 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1ad2      	subs	r2, r2, r3
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004456:	69b8      	ldr	r0, [r7, #24]
 8004458:	f000 f90a 	bl	8004670 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800445c:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <pvPortMalloc+0x18c>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	4a1b      	ldr	r2, [pc, #108]	@ (80044d4 <pvPortMalloc+0x18c>)
 8004468:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800446a:	4b1a      	ldr	r3, [pc, #104]	@ (80044d4 <pvPortMalloc+0x18c>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b1b      	ldr	r3, [pc, #108]	@ (80044dc <pvPortMalloc+0x194>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d203      	bcs.n	800447e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004476:	4b17      	ldr	r3, [pc, #92]	@ (80044d4 <pvPortMalloc+0x18c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a18      	ldr	r2, [pc, #96]	@ (80044dc <pvPortMalloc+0x194>)
 800447c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	4b13      	ldr	r3, [pc, #76]	@ (80044d0 <pvPortMalloc+0x188>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	431a      	orrs	r2, r3
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004492:	4b13      	ldr	r3, [pc, #76]	@ (80044e0 <pvPortMalloc+0x198>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3301      	adds	r3, #1
 8004498:	4a11      	ldr	r2, [pc, #68]	@ (80044e0 <pvPortMalloc+0x198>)
 800449a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800449c:	f7ff fa36 	bl	800390c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <pvPortMalloc+0x17a>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	60fb      	str	r3, [r7, #12]
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	e7fd      	b.n	80044be <pvPortMalloc+0x176>
	return pvReturn;
 80044c2:	69fb      	ldr	r3, [r7, #28]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3728      	adds	r7, #40	@ 0x28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	2000413c 	.word	0x2000413c
 80044d0:	20004150 	.word	0x20004150
 80044d4:	20004140 	.word	0x20004140
 80044d8:	20004134 	.word	0x20004134
 80044dc:	20004144 	.word	0x20004144
 80044e0:	20004148 	.word	0x20004148

080044e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d04f      	beq.n	8004596 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044f6:	2308      	movs	r3, #8
 80044f8:	425b      	negs	r3, r3
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4413      	add	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4b25      	ldr	r3, [pc, #148]	@ (80045a0 <vPortFree+0xbc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10b      	bne.n	800452a <vPortFree+0x46>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	60fb      	str	r3, [r7, #12]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <vPortFree+0x66>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60bb      	str	r3, [r7, #8]
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	e7fd      	b.n	8004546 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	4b14      	ldr	r3, [pc, #80]	@ (80045a0 <vPortFree+0xbc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01e      	beq.n	8004596 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d11a      	bne.n	8004596 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	4b0e      	ldr	r3, [pc, #56]	@ (80045a0 <vPortFree+0xbc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	43db      	mvns	r3, r3
 800456a:	401a      	ands	r2, r3
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004570:	f7ff f9be 	bl	80038f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <vPortFree+0xc0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4413      	add	r3, r2
 800457e:	4a09      	ldr	r2, [pc, #36]	@ (80045a4 <vPortFree+0xc0>)
 8004580:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004582:	6938      	ldr	r0, [r7, #16]
 8004584:	f000 f874 	bl	8004670 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004588:	4b07      	ldr	r3, [pc, #28]	@ (80045a8 <vPortFree+0xc4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	4a06      	ldr	r2, [pc, #24]	@ (80045a8 <vPortFree+0xc4>)
 8004590:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004592:	f7ff f9bb 	bl	800390c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004596:	bf00      	nop
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20004150 	.word	0x20004150
 80045a4:	20004140 	.word	0x20004140
 80045a8:	2000414c 	.word	0x2000414c

080045ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045b2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80045b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045b8:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <prvHeapInit+0xac>)
 80045ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3307      	adds	r3, #7
 80045ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0307 	bic.w	r3, r3, #7
 80045d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	4a1f      	ldr	r2, [pc, #124]	@ (8004658 <prvHeapInit+0xac>)
 80045dc:	4413      	add	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045e4:	4a1d      	ldr	r2, [pc, #116]	@ (800465c <prvHeapInit+0xb0>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045ea:	4b1c      	ldr	r3, [pc, #112]	@ (800465c <prvHeapInit+0xb0>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	4413      	add	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045f8:	2208      	movs	r2, #8
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0307 	bic.w	r3, r3, #7
 8004606:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <prvHeapInit+0xb4>)
 800460c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800460e:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <prvHeapInit+0xb4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004616:	4b12      	ldr	r3, [pc, #72]	@ (8004660 <prvHeapInit+0xb4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	1ad2      	subs	r2, r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800462c:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <prvHeapInit+0xb4>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4a0a      	ldr	r2, [pc, #40]	@ (8004664 <prvHeapInit+0xb8>)
 800463a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4a09      	ldr	r2, [pc, #36]	@ (8004668 <prvHeapInit+0xbc>)
 8004642:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004644:	4b09      	ldr	r3, [pc, #36]	@ (800466c <prvHeapInit+0xc0>)
 8004646:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800464a:	601a      	str	r2, [r3, #0]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	20000534 	.word	0x20000534
 800465c:	20004134 	.word	0x20004134
 8004660:	2000413c 	.word	0x2000413c
 8004664:	20004144 	.word	0x20004144
 8004668:	20004140 	.word	0x20004140
 800466c:	20004150 	.word	0x20004150

08004670 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004678:	4b28      	ldr	r3, [pc, #160]	@ (800471c <prvInsertBlockIntoFreeList+0xac>)
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e002      	b.n	8004684 <prvInsertBlockIntoFreeList+0x14>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d8f7      	bhi.n	800467e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	4413      	add	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d108      	bne.n	80046b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	441a      	add	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	441a      	add	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d118      	bne.n	80046f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <prvInsertBlockIntoFreeList+0xb0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d00d      	beq.n	80046ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e008      	b.n	8004700 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <prvInsertBlockIntoFreeList+0xb0>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e003      	b.n	8004700 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d002      	beq.n	800470e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20004134 	.word	0x20004134
 8004720:	2000413c 	.word	0x2000413c

08004724 <siprintf>:
 8004724:	b40e      	push	{r1, r2, r3}
 8004726:	b500      	push	{lr}
 8004728:	b09c      	sub	sp, #112	@ 0x70
 800472a:	ab1d      	add	r3, sp, #116	@ 0x74
 800472c:	9002      	str	r0, [sp, #8]
 800472e:	9006      	str	r0, [sp, #24]
 8004730:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004734:	4809      	ldr	r0, [pc, #36]	@ (800475c <siprintf+0x38>)
 8004736:	9107      	str	r1, [sp, #28]
 8004738:	9104      	str	r1, [sp, #16]
 800473a:	4909      	ldr	r1, [pc, #36]	@ (8004760 <siprintf+0x3c>)
 800473c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004740:	9105      	str	r1, [sp, #20]
 8004742:	6800      	ldr	r0, [r0, #0]
 8004744:	9301      	str	r3, [sp, #4]
 8004746:	a902      	add	r1, sp, #8
 8004748:	f000 f9f8 	bl	8004b3c <_svfiprintf_r>
 800474c:	9b02      	ldr	r3, [sp, #8]
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	b01c      	add	sp, #112	@ 0x70
 8004754:	f85d eb04 	ldr.w	lr, [sp], #4
 8004758:	b003      	add	sp, #12
 800475a:	4770      	bx	lr
 800475c:	20000010 	.word	0x20000010
 8004760:	ffff0208 	.word	0xffff0208

08004764 <memset>:
 8004764:	4402      	add	r2, r0
 8004766:	4603      	mov	r3, r0
 8004768:	4293      	cmp	r3, r2
 800476a:	d100      	bne.n	800476e <memset+0xa>
 800476c:	4770      	bx	lr
 800476e:	f803 1b01 	strb.w	r1, [r3], #1
 8004772:	e7f9      	b.n	8004768 <memset+0x4>

08004774 <_reclaim_reent>:
 8004774:	4b29      	ldr	r3, [pc, #164]	@ (800481c <_reclaim_reent+0xa8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4283      	cmp	r3, r0
 800477a:	b570      	push	{r4, r5, r6, lr}
 800477c:	4604      	mov	r4, r0
 800477e:	d04b      	beq.n	8004818 <_reclaim_reent+0xa4>
 8004780:	69c3      	ldr	r3, [r0, #28]
 8004782:	b1ab      	cbz	r3, 80047b0 <_reclaim_reent+0x3c>
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	b16b      	cbz	r3, 80047a4 <_reclaim_reent+0x30>
 8004788:	2500      	movs	r5, #0
 800478a:	69e3      	ldr	r3, [r4, #28]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	5959      	ldr	r1, [r3, r5]
 8004790:	2900      	cmp	r1, #0
 8004792:	d13b      	bne.n	800480c <_reclaim_reent+0x98>
 8004794:	3504      	adds	r5, #4
 8004796:	2d80      	cmp	r5, #128	@ 0x80
 8004798:	d1f7      	bne.n	800478a <_reclaim_reent+0x16>
 800479a:	69e3      	ldr	r3, [r4, #28]
 800479c:	4620      	mov	r0, r4
 800479e:	68d9      	ldr	r1, [r3, #12]
 80047a0:	f000 f878 	bl	8004894 <_free_r>
 80047a4:	69e3      	ldr	r3, [r4, #28]
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	b111      	cbz	r1, 80047b0 <_reclaim_reent+0x3c>
 80047aa:	4620      	mov	r0, r4
 80047ac:	f000 f872 	bl	8004894 <_free_r>
 80047b0:	6961      	ldr	r1, [r4, #20]
 80047b2:	b111      	cbz	r1, 80047ba <_reclaim_reent+0x46>
 80047b4:	4620      	mov	r0, r4
 80047b6:	f000 f86d 	bl	8004894 <_free_r>
 80047ba:	69e1      	ldr	r1, [r4, #28]
 80047bc:	b111      	cbz	r1, 80047c4 <_reclaim_reent+0x50>
 80047be:	4620      	mov	r0, r4
 80047c0:	f000 f868 	bl	8004894 <_free_r>
 80047c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80047c6:	b111      	cbz	r1, 80047ce <_reclaim_reent+0x5a>
 80047c8:	4620      	mov	r0, r4
 80047ca:	f000 f863 	bl	8004894 <_free_r>
 80047ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047d0:	b111      	cbz	r1, 80047d8 <_reclaim_reent+0x64>
 80047d2:	4620      	mov	r0, r4
 80047d4:	f000 f85e 	bl	8004894 <_free_r>
 80047d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80047da:	b111      	cbz	r1, 80047e2 <_reclaim_reent+0x6e>
 80047dc:	4620      	mov	r0, r4
 80047de:	f000 f859 	bl	8004894 <_free_r>
 80047e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80047e4:	b111      	cbz	r1, 80047ec <_reclaim_reent+0x78>
 80047e6:	4620      	mov	r0, r4
 80047e8:	f000 f854 	bl	8004894 <_free_r>
 80047ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80047ee:	b111      	cbz	r1, 80047f6 <_reclaim_reent+0x82>
 80047f0:	4620      	mov	r0, r4
 80047f2:	f000 f84f 	bl	8004894 <_free_r>
 80047f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80047f8:	b111      	cbz	r1, 8004800 <_reclaim_reent+0x8c>
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 f84a 	bl	8004894 <_free_r>
 8004800:	6a23      	ldr	r3, [r4, #32]
 8004802:	b14b      	cbz	r3, 8004818 <_reclaim_reent+0xa4>
 8004804:	4620      	mov	r0, r4
 8004806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800480a:	4718      	bx	r3
 800480c:	680e      	ldr	r6, [r1, #0]
 800480e:	4620      	mov	r0, r4
 8004810:	f000 f840 	bl	8004894 <_free_r>
 8004814:	4631      	mov	r1, r6
 8004816:	e7bb      	b.n	8004790 <_reclaim_reent+0x1c>
 8004818:	bd70      	pop	{r4, r5, r6, pc}
 800481a:	bf00      	nop
 800481c:	20000010 	.word	0x20000010

08004820 <__errno>:
 8004820:	4b01      	ldr	r3, [pc, #4]	@ (8004828 <__errno+0x8>)
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000010 	.word	0x20000010

0800482c <__libc_init_array>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	4d0d      	ldr	r5, [pc, #52]	@ (8004864 <__libc_init_array+0x38>)
 8004830:	4c0d      	ldr	r4, [pc, #52]	@ (8004868 <__libc_init_array+0x3c>)
 8004832:	1b64      	subs	r4, r4, r5
 8004834:	10a4      	asrs	r4, r4, #2
 8004836:	2600      	movs	r6, #0
 8004838:	42a6      	cmp	r6, r4
 800483a:	d109      	bne.n	8004850 <__libc_init_array+0x24>
 800483c:	4d0b      	ldr	r5, [pc, #44]	@ (800486c <__libc_init_array+0x40>)
 800483e:	4c0c      	ldr	r4, [pc, #48]	@ (8004870 <__libc_init_array+0x44>)
 8004840:	f000 fc66 	bl	8005110 <_init>
 8004844:	1b64      	subs	r4, r4, r5
 8004846:	10a4      	asrs	r4, r4, #2
 8004848:	2600      	movs	r6, #0
 800484a:	42a6      	cmp	r6, r4
 800484c:	d105      	bne.n	800485a <__libc_init_array+0x2e>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	f855 3b04 	ldr.w	r3, [r5], #4
 8004854:	4798      	blx	r3
 8004856:	3601      	adds	r6, #1
 8004858:	e7ee      	b.n	8004838 <__libc_init_array+0xc>
 800485a:	f855 3b04 	ldr.w	r3, [r5], #4
 800485e:	4798      	blx	r3
 8004860:	3601      	adds	r6, #1
 8004862:	e7f2      	b.n	800484a <__libc_init_array+0x1e>
 8004864:	080051d4 	.word	0x080051d4
 8004868:	080051d4 	.word	0x080051d4
 800486c:	080051d4 	.word	0x080051d4
 8004870:	080051d8 	.word	0x080051d8

08004874 <__retarget_lock_acquire_recursive>:
 8004874:	4770      	bx	lr

08004876 <__retarget_lock_release_recursive>:
 8004876:	4770      	bx	lr

08004878 <memcpy>:
 8004878:	440a      	add	r2, r1
 800487a:	4291      	cmp	r1, r2
 800487c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004880:	d100      	bne.n	8004884 <memcpy+0xc>
 8004882:	4770      	bx	lr
 8004884:	b510      	push	{r4, lr}
 8004886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800488a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800488e:	4291      	cmp	r1, r2
 8004890:	d1f9      	bne.n	8004886 <memcpy+0xe>
 8004892:	bd10      	pop	{r4, pc}

08004894 <_free_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4605      	mov	r5, r0
 8004898:	2900      	cmp	r1, #0
 800489a:	d041      	beq.n	8004920 <_free_r+0x8c>
 800489c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a0:	1f0c      	subs	r4, r1, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bfb8      	it	lt
 80048a6:	18e4      	addlt	r4, r4, r3
 80048a8:	f000 f8e0 	bl	8004a6c <__malloc_lock>
 80048ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004924 <_free_r+0x90>)
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	b933      	cbnz	r3, 80048c0 <_free_r+0x2c>
 80048b2:	6063      	str	r3, [r4, #4]
 80048b4:	6014      	str	r4, [r2, #0]
 80048b6:	4628      	mov	r0, r5
 80048b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048bc:	f000 b8dc 	b.w	8004a78 <__malloc_unlock>
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	d908      	bls.n	80048d6 <_free_r+0x42>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	1821      	adds	r1, r4, r0
 80048c8:	428b      	cmp	r3, r1
 80048ca:	bf01      	itttt	eq
 80048cc:	6819      	ldreq	r1, [r3, #0]
 80048ce:	685b      	ldreq	r3, [r3, #4]
 80048d0:	1809      	addeq	r1, r1, r0
 80048d2:	6021      	streq	r1, [r4, #0]
 80048d4:	e7ed      	b.n	80048b2 <_free_r+0x1e>
 80048d6:	461a      	mov	r2, r3
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b10b      	cbz	r3, 80048e0 <_free_r+0x4c>
 80048dc:	42a3      	cmp	r3, r4
 80048de:	d9fa      	bls.n	80048d6 <_free_r+0x42>
 80048e0:	6811      	ldr	r1, [r2, #0]
 80048e2:	1850      	adds	r0, r2, r1
 80048e4:	42a0      	cmp	r0, r4
 80048e6:	d10b      	bne.n	8004900 <_free_r+0x6c>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	4401      	add	r1, r0
 80048ec:	1850      	adds	r0, r2, r1
 80048ee:	4283      	cmp	r3, r0
 80048f0:	6011      	str	r1, [r2, #0]
 80048f2:	d1e0      	bne.n	80048b6 <_free_r+0x22>
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	6053      	str	r3, [r2, #4]
 80048fa:	4408      	add	r0, r1
 80048fc:	6010      	str	r0, [r2, #0]
 80048fe:	e7da      	b.n	80048b6 <_free_r+0x22>
 8004900:	d902      	bls.n	8004908 <_free_r+0x74>
 8004902:	230c      	movs	r3, #12
 8004904:	602b      	str	r3, [r5, #0]
 8004906:	e7d6      	b.n	80048b6 <_free_r+0x22>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	1821      	adds	r1, r4, r0
 800490c:	428b      	cmp	r3, r1
 800490e:	bf04      	itt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	6063      	str	r3, [r4, #4]
 8004916:	bf04      	itt	eq
 8004918:	1809      	addeq	r1, r1, r0
 800491a:	6021      	streq	r1, [r4, #0]
 800491c:	6054      	str	r4, [r2, #4]
 800491e:	e7ca      	b.n	80048b6 <_free_r+0x22>
 8004920:	bd38      	pop	{r3, r4, r5, pc}
 8004922:	bf00      	nop
 8004924:	20004298 	.word	0x20004298

08004928 <sbrk_aligned>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	4e0f      	ldr	r6, [pc, #60]	@ (8004968 <sbrk_aligned+0x40>)
 800492c:	460c      	mov	r4, r1
 800492e:	6831      	ldr	r1, [r6, #0]
 8004930:	4605      	mov	r5, r0
 8004932:	b911      	cbnz	r1, 800493a <sbrk_aligned+0x12>
 8004934:	f000 fba6 	bl	8005084 <_sbrk_r>
 8004938:	6030      	str	r0, [r6, #0]
 800493a:	4621      	mov	r1, r4
 800493c:	4628      	mov	r0, r5
 800493e:	f000 fba1 	bl	8005084 <_sbrk_r>
 8004942:	1c43      	adds	r3, r0, #1
 8004944:	d103      	bne.n	800494e <sbrk_aligned+0x26>
 8004946:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800494a:	4620      	mov	r0, r4
 800494c:	bd70      	pop	{r4, r5, r6, pc}
 800494e:	1cc4      	adds	r4, r0, #3
 8004950:	f024 0403 	bic.w	r4, r4, #3
 8004954:	42a0      	cmp	r0, r4
 8004956:	d0f8      	beq.n	800494a <sbrk_aligned+0x22>
 8004958:	1a21      	subs	r1, r4, r0
 800495a:	4628      	mov	r0, r5
 800495c:	f000 fb92 	bl	8005084 <_sbrk_r>
 8004960:	3001      	adds	r0, #1
 8004962:	d1f2      	bne.n	800494a <sbrk_aligned+0x22>
 8004964:	e7ef      	b.n	8004946 <sbrk_aligned+0x1e>
 8004966:	bf00      	nop
 8004968:	20004294 	.word	0x20004294

0800496c <_malloc_r>:
 800496c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004970:	1ccd      	adds	r5, r1, #3
 8004972:	f025 0503 	bic.w	r5, r5, #3
 8004976:	3508      	adds	r5, #8
 8004978:	2d0c      	cmp	r5, #12
 800497a:	bf38      	it	cc
 800497c:	250c      	movcc	r5, #12
 800497e:	2d00      	cmp	r5, #0
 8004980:	4606      	mov	r6, r0
 8004982:	db01      	blt.n	8004988 <_malloc_r+0x1c>
 8004984:	42a9      	cmp	r1, r5
 8004986:	d904      	bls.n	8004992 <_malloc_r+0x26>
 8004988:	230c      	movs	r3, #12
 800498a:	6033      	str	r3, [r6, #0]
 800498c:	2000      	movs	r0, #0
 800498e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004992:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a68 <_malloc_r+0xfc>
 8004996:	f000 f869 	bl	8004a6c <__malloc_lock>
 800499a:	f8d8 3000 	ldr.w	r3, [r8]
 800499e:	461c      	mov	r4, r3
 80049a0:	bb44      	cbnz	r4, 80049f4 <_malloc_r+0x88>
 80049a2:	4629      	mov	r1, r5
 80049a4:	4630      	mov	r0, r6
 80049a6:	f7ff ffbf 	bl	8004928 <sbrk_aligned>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	4604      	mov	r4, r0
 80049ae:	d158      	bne.n	8004a62 <_malloc_r+0xf6>
 80049b0:	f8d8 4000 	ldr.w	r4, [r8]
 80049b4:	4627      	mov	r7, r4
 80049b6:	2f00      	cmp	r7, #0
 80049b8:	d143      	bne.n	8004a42 <_malloc_r+0xd6>
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	d04b      	beq.n	8004a56 <_malloc_r+0xea>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	4639      	mov	r1, r7
 80049c2:	4630      	mov	r0, r6
 80049c4:	eb04 0903 	add.w	r9, r4, r3
 80049c8:	f000 fb5c 	bl	8005084 <_sbrk_r>
 80049cc:	4581      	cmp	r9, r0
 80049ce:	d142      	bne.n	8004a56 <_malloc_r+0xea>
 80049d0:	6821      	ldr	r1, [r4, #0]
 80049d2:	1a6d      	subs	r5, r5, r1
 80049d4:	4629      	mov	r1, r5
 80049d6:	4630      	mov	r0, r6
 80049d8:	f7ff ffa6 	bl	8004928 <sbrk_aligned>
 80049dc:	3001      	adds	r0, #1
 80049de:	d03a      	beq.n	8004a56 <_malloc_r+0xea>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	442b      	add	r3, r5
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	f8d8 3000 	ldr.w	r3, [r8]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	bb62      	cbnz	r2, 8004a48 <_malloc_r+0xdc>
 80049ee:	f8c8 7000 	str.w	r7, [r8]
 80049f2:	e00f      	b.n	8004a14 <_malloc_r+0xa8>
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	1b52      	subs	r2, r2, r5
 80049f8:	d420      	bmi.n	8004a3c <_malloc_r+0xd0>
 80049fa:	2a0b      	cmp	r2, #11
 80049fc:	d917      	bls.n	8004a2e <_malloc_r+0xc2>
 80049fe:	1961      	adds	r1, r4, r5
 8004a00:	42a3      	cmp	r3, r4
 8004a02:	6025      	str	r5, [r4, #0]
 8004a04:	bf18      	it	ne
 8004a06:	6059      	strne	r1, [r3, #4]
 8004a08:	6863      	ldr	r3, [r4, #4]
 8004a0a:	bf08      	it	eq
 8004a0c:	f8c8 1000 	streq.w	r1, [r8]
 8004a10:	5162      	str	r2, [r4, r5]
 8004a12:	604b      	str	r3, [r1, #4]
 8004a14:	4630      	mov	r0, r6
 8004a16:	f000 f82f 	bl	8004a78 <__malloc_unlock>
 8004a1a:	f104 000b 	add.w	r0, r4, #11
 8004a1e:	1d23      	adds	r3, r4, #4
 8004a20:	f020 0007 	bic.w	r0, r0, #7
 8004a24:	1ac2      	subs	r2, r0, r3
 8004a26:	bf1c      	itt	ne
 8004a28:	1a1b      	subne	r3, r3, r0
 8004a2a:	50a3      	strne	r3, [r4, r2]
 8004a2c:	e7af      	b.n	800498e <_malloc_r+0x22>
 8004a2e:	6862      	ldr	r2, [r4, #4]
 8004a30:	42a3      	cmp	r3, r4
 8004a32:	bf0c      	ite	eq
 8004a34:	f8c8 2000 	streq.w	r2, [r8]
 8004a38:	605a      	strne	r2, [r3, #4]
 8004a3a:	e7eb      	b.n	8004a14 <_malloc_r+0xa8>
 8004a3c:	4623      	mov	r3, r4
 8004a3e:	6864      	ldr	r4, [r4, #4]
 8004a40:	e7ae      	b.n	80049a0 <_malloc_r+0x34>
 8004a42:	463c      	mov	r4, r7
 8004a44:	687f      	ldr	r7, [r7, #4]
 8004a46:	e7b6      	b.n	80049b6 <_malloc_r+0x4a>
 8004a48:	461a      	mov	r2, r3
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	42a3      	cmp	r3, r4
 8004a4e:	d1fb      	bne.n	8004a48 <_malloc_r+0xdc>
 8004a50:	2300      	movs	r3, #0
 8004a52:	6053      	str	r3, [r2, #4]
 8004a54:	e7de      	b.n	8004a14 <_malloc_r+0xa8>
 8004a56:	230c      	movs	r3, #12
 8004a58:	6033      	str	r3, [r6, #0]
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f000 f80c 	bl	8004a78 <__malloc_unlock>
 8004a60:	e794      	b.n	800498c <_malloc_r+0x20>
 8004a62:	6005      	str	r5, [r0, #0]
 8004a64:	e7d6      	b.n	8004a14 <_malloc_r+0xa8>
 8004a66:	bf00      	nop
 8004a68:	20004298 	.word	0x20004298

08004a6c <__malloc_lock>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	@ (8004a74 <__malloc_lock+0x8>)
 8004a6e:	f7ff bf01 	b.w	8004874 <__retarget_lock_acquire_recursive>
 8004a72:	bf00      	nop
 8004a74:	20004290 	.word	0x20004290

08004a78 <__malloc_unlock>:
 8004a78:	4801      	ldr	r0, [pc, #4]	@ (8004a80 <__malloc_unlock+0x8>)
 8004a7a:	f7ff befc 	b.w	8004876 <__retarget_lock_release_recursive>
 8004a7e:	bf00      	nop
 8004a80:	20004290 	.word	0x20004290

08004a84 <__ssputs_r>:
 8004a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	688e      	ldr	r6, [r1, #8]
 8004a8a:	461f      	mov	r7, r3
 8004a8c:	42be      	cmp	r6, r7
 8004a8e:	680b      	ldr	r3, [r1, #0]
 8004a90:	4682      	mov	sl, r0
 8004a92:	460c      	mov	r4, r1
 8004a94:	4690      	mov	r8, r2
 8004a96:	d82d      	bhi.n	8004af4 <__ssputs_r+0x70>
 8004a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004aa0:	d026      	beq.n	8004af0 <__ssputs_r+0x6c>
 8004aa2:	6965      	ldr	r5, [r4, #20]
 8004aa4:	6909      	ldr	r1, [r1, #16]
 8004aa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004aaa:	eba3 0901 	sub.w	r9, r3, r1
 8004aae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ab2:	1c7b      	adds	r3, r7, #1
 8004ab4:	444b      	add	r3, r9
 8004ab6:	106d      	asrs	r5, r5, #1
 8004ab8:	429d      	cmp	r5, r3
 8004aba:	bf38      	it	cc
 8004abc:	461d      	movcc	r5, r3
 8004abe:	0553      	lsls	r3, r2, #21
 8004ac0:	d527      	bpl.n	8004b12 <__ssputs_r+0x8e>
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	f7ff ff52 	bl	800496c <_malloc_r>
 8004ac8:	4606      	mov	r6, r0
 8004aca:	b360      	cbz	r0, 8004b26 <__ssputs_r+0xa2>
 8004acc:	6921      	ldr	r1, [r4, #16]
 8004ace:	464a      	mov	r2, r9
 8004ad0:	f7ff fed2 	bl	8004878 <memcpy>
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	6126      	str	r6, [r4, #16]
 8004ae2:	6165      	str	r5, [r4, #20]
 8004ae4:	444e      	add	r6, r9
 8004ae6:	eba5 0509 	sub.w	r5, r5, r9
 8004aea:	6026      	str	r6, [r4, #0]
 8004aec:	60a5      	str	r5, [r4, #8]
 8004aee:	463e      	mov	r6, r7
 8004af0:	42be      	cmp	r6, r7
 8004af2:	d900      	bls.n	8004af6 <__ssputs_r+0x72>
 8004af4:	463e      	mov	r6, r7
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	4632      	mov	r2, r6
 8004afa:	4641      	mov	r1, r8
 8004afc:	f000 faa8 	bl	8005050 <memmove>
 8004b00:	68a3      	ldr	r3, [r4, #8]
 8004b02:	1b9b      	subs	r3, r3, r6
 8004b04:	60a3      	str	r3, [r4, #8]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	4433      	add	r3, r6
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b12:	462a      	mov	r2, r5
 8004b14:	f000 fac6 	bl	80050a4 <_realloc_r>
 8004b18:	4606      	mov	r6, r0
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d1e0      	bne.n	8004ae0 <__ssputs_r+0x5c>
 8004b1e:	6921      	ldr	r1, [r4, #16]
 8004b20:	4650      	mov	r0, sl
 8004b22:	f7ff feb7 	bl	8004894 <_free_r>
 8004b26:	230c      	movs	r3, #12
 8004b28:	f8ca 3000 	str.w	r3, [sl]
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b38:	e7e9      	b.n	8004b0e <__ssputs_r+0x8a>
	...

08004b3c <_svfiprintf_r>:
 8004b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b40:	4698      	mov	r8, r3
 8004b42:	898b      	ldrh	r3, [r1, #12]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	b09d      	sub	sp, #116	@ 0x74
 8004b48:	4607      	mov	r7, r0
 8004b4a:	460d      	mov	r5, r1
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	d510      	bpl.n	8004b72 <_svfiprintf_r+0x36>
 8004b50:	690b      	ldr	r3, [r1, #16]
 8004b52:	b973      	cbnz	r3, 8004b72 <_svfiprintf_r+0x36>
 8004b54:	2140      	movs	r1, #64	@ 0x40
 8004b56:	f7ff ff09 	bl	800496c <_malloc_r>
 8004b5a:	6028      	str	r0, [r5, #0]
 8004b5c:	6128      	str	r0, [r5, #16]
 8004b5e:	b930      	cbnz	r0, 8004b6e <_svfiprintf_r+0x32>
 8004b60:	230c      	movs	r3, #12
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b68:	b01d      	add	sp, #116	@ 0x74
 8004b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6e:	2340      	movs	r3, #64	@ 0x40
 8004b70:	616b      	str	r3, [r5, #20]
 8004b72:	2300      	movs	r3, #0
 8004b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b76:	2320      	movs	r3, #32
 8004b78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b80:	2330      	movs	r3, #48	@ 0x30
 8004b82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d20 <_svfiprintf_r+0x1e4>
 8004b86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b8a:	f04f 0901 	mov.w	r9, #1
 8004b8e:	4623      	mov	r3, r4
 8004b90:	469a      	mov	sl, r3
 8004b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b96:	b10a      	cbz	r2, 8004b9c <_svfiprintf_r+0x60>
 8004b98:	2a25      	cmp	r2, #37	@ 0x25
 8004b9a:	d1f9      	bne.n	8004b90 <_svfiprintf_r+0x54>
 8004b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8004ba0:	d00b      	beq.n	8004bba <_svfiprintf_r+0x7e>
 8004ba2:	465b      	mov	r3, fp
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	4638      	mov	r0, r7
 8004baa:	f7ff ff6b 	bl	8004a84 <__ssputs_r>
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f000 80a7 	beq.w	8004d02 <_svfiprintf_r+0x1c6>
 8004bb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bb6:	445a      	add	r2, fp
 8004bb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bba:	f89a 3000 	ldrb.w	r3, [sl]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 809f 	beq.w	8004d02 <_svfiprintf_r+0x1c6>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bce:	f10a 0a01 	add.w	sl, sl, #1
 8004bd2:	9304      	str	r3, [sp, #16]
 8004bd4:	9307      	str	r3, [sp, #28]
 8004bd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bda:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bdc:	4654      	mov	r4, sl
 8004bde:	2205      	movs	r2, #5
 8004be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be4:	484e      	ldr	r0, [pc, #312]	@ (8004d20 <_svfiprintf_r+0x1e4>)
 8004be6:	f7fb fafb 	bl	80001e0 <memchr>
 8004bea:	9a04      	ldr	r2, [sp, #16]
 8004bec:	b9d8      	cbnz	r0, 8004c26 <_svfiprintf_r+0xea>
 8004bee:	06d0      	lsls	r0, r2, #27
 8004bf0:	bf44      	itt	mi
 8004bf2:	2320      	movmi	r3, #32
 8004bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bf8:	0711      	lsls	r1, r2, #28
 8004bfa:	bf44      	itt	mi
 8004bfc:	232b      	movmi	r3, #43	@ 0x2b
 8004bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c02:	f89a 3000 	ldrb.w	r3, [sl]
 8004c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c08:	d015      	beq.n	8004c36 <_svfiprintf_r+0xfa>
 8004c0a:	9a07      	ldr	r2, [sp, #28]
 8004c0c:	4654      	mov	r4, sl
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f04f 0c0a 	mov.w	ip, #10
 8004c14:	4621      	mov	r1, r4
 8004c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c1a:	3b30      	subs	r3, #48	@ 0x30
 8004c1c:	2b09      	cmp	r3, #9
 8004c1e:	d94b      	bls.n	8004cb8 <_svfiprintf_r+0x17c>
 8004c20:	b1b0      	cbz	r0, 8004c50 <_svfiprintf_r+0x114>
 8004c22:	9207      	str	r2, [sp, #28]
 8004c24:	e014      	b.n	8004c50 <_svfiprintf_r+0x114>
 8004c26:	eba0 0308 	sub.w	r3, r0, r8
 8004c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	9304      	str	r3, [sp, #16]
 8004c32:	46a2      	mov	sl, r4
 8004c34:	e7d2      	b.n	8004bdc <_svfiprintf_r+0xa0>
 8004c36:	9b03      	ldr	r3, [sp, #12]
 8004c38:	1d19      	adds	r1, r3, #4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	9103      	str	r1, [sp, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bfbb      	ittet	lt
 8004c42:	425b      	neglt	r3, r3
 8004c44:	f042 0202 	orrlt.w	r2, r2, #2
 8004c48:	9307      	strge	r3, [sp, #28]
 8004c4a:	9307      	strlt	r3, [sp, #28]
 8004c4c:	bfb8      	it	lt
 8004c4e:	9204      	strlt	r2, [sp, #16]
 8004c50:	7823      	ldrb	r3, [r4, #0]
 8004c52:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c54:	d10a      	bne.n	8004c6c <_svfiprintf_r+0x130>
 8004c56:	7863      	ldrb	r3, [r4, #1]
 8004c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c5a:	d132      	bne.n	8004cc2 <_svfiprintf_r+0x186>
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	1d1a      	adds	r2, r3, #4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	9203      	str	r2, [sp, #12]
 8004c64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c68:	3402      	adds	r4, #2
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d30 <_svfiprintf_r+0x1f4>
 8004c70:	7821      	ldrb	r1, [r4, #0]
 8004c72:	2203      	movs	r2, #3
 8004c74:	4650      	mov	r0, sl
 8004c76:	f7fb fab3 	bl	80001e0 <memchr>
 8004c7a:	b138      	cbz	r0, 8004c8c <_svfiprintf_r+0x150>
 8004c7c:	9b04      	ldr	r3, [sp, #16]
 8004c7e:	eba0 000a 	sub.w	r0, r0, sl
 8004c82:	2240      	movs	r2, #64	@ 0x40
 8004c84:	4082      	lsls	r2, r0
 8004c86:	4313      	orrs	r3, r2
 8004c88:	3401      	adds	r4, #1
 8004c8a:	9304      	str	r3, [sp, #16]
 8004c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c90:	4824      	ldr	r0, [pc, #144]	@ (8004d24 <_svfiprintf_r+0x1e8>)
 8004c92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c96:	2206      	movs	r2, #6
 8004c98:	f7fb faa2 	bl	80001e0 <memchr>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d036      	beq.n	8004d0e <_svfiprintf_r+0x1d2>
 8004ca0:	4b21      	ldr	r3, [pc, #132]	@ (8004d28 <_svfiprintf_r+0x1ec>)
 8004ca2:	bb1b      	cbnz	r3, 8004cec <_svfiprintf_r+0x1b0>
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	3307      	adds	r3, #7
 8004ca8:	f023 0307 	bic.w	r3, r3, #7
 8004cac:	3308      	adds	r3, #8
 8004cae:	9303      	str	r3, [sp, #12]
 8004cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb2:	4433      	add	r3, r6
 8004cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cb6:	e76a      	b.n	8004b8e <_svfiprintf_r+0x52>
 8004cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	e7a8      	b.n	8004c14 <_svfiprintf_r+0xd8>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	3401      	adds	r4, #1
 8004cc6:	9305      	str	r3, [sp, #20]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f04f 0c0a 	mov.w	ip, #10
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd4:	3a30      	subs	r2, #48	@ 0x30
 8004cd6:	2a09      	cmp	r2, #9
 8004cd8:	d903      	bls.n	8004ce2 <_svfiprintf_r+0x1a6>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0c6      	beq.n	8004c6c <_svfiprintf_r+0x130>
 8004cde:	9105      	str	r1, [sp, #20]
 8004ce0:	e7c4      	b.n	8004c6c <_svfiprintf_r+0x130>
 8004ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e7f0      	b.n	8004cce <_svfiprintf_r+0x192>
 8004cec:	ab03      	add	r3, sp, #12
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8004d2c <_svfiprintf_r+0x1f0>)
 8004cf4:	a904      	add	r1, sp, #16
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	f3af 8000 	nop.w
 8004cfc:	1c42      	adds	r2, r0, #1
 8004cfe:	4606      	mov	r6, r0
 8004d00:	d1d6      	bne.n	8004cb0 <_svfiprintf_r+0x174>
 8004d02:	89ab      	ldrh	r3, [r5, #12]
 8004d04:	065b      	lsls	r3, r3, #25
 8004d06:	f53f af2d 	bmi.w	8004b64 <_svfiprintf_r+0x28>
 8004d0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d0c:	e72c      	b.n	8004b68 <_svfiprintf_r+0x2c>
 8004d0e:	ab03      	add	r3, sp, #12
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	462a      	mov	r2, r5
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <_svfiprintf_r+0x1f0>)
 8004d16:	a904      	add	r1, sp, #16
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f000 f879 	bl	8004e10 <_printf_i>
 8004d1e:	e7ed      	b.n	8004cfc <_svfiprintf_r+0x1c0>
 8004d20:	08005198 	.word	0x08005198
 8004d24:	080051a2 	.word	0x080051a2
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	08004a85 	.word	0x08004a85
 8004d30:	0800519e 	.word	0x0800519e

08004d34 <_printf_common>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	4616      	mov	r6, r2
 8004d3a:	4698      	mov	r8, r3
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bfb8      	it	lt
 8004d48:	4613      	movlt	r3, r2
 8004d4a:	6033      	str	r3, [r6, #0]
 8004d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d50:	4607      	mov	r7, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	b10a      	cbz	r2, 8004d5a <_printf_common+0x26>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	0699      	lsls	r1, r3, #26
 8004d5e:	bf42      	ittt	mi
 8004d60:	6833      	ldrmi	r3, [r6, #0]
 8004d62:	3302      	addmi	r3, #2
 8004d64:	6033      	strmi	r3, [r6, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	f015 0506 	ands.w	r5, r5, #6
 8004d6c:	d106      	bne.n	8004d7c <_printf_common+0x48>
 8004d6e:	f104 0a19 	add.w	sl, r4, #25
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	6832      	ldr	r2, [r6, #0]
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	dc26      	bgt.n	8004dca <_printf_common+0x96>
 8004d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d80:	6822      	ldr	r2, [r4, #0]
 8004d82:	3b00      	subs	r3, #0
 8004d84:	bf18      	it	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	d42b      	bmi.n	8004de4 <_printf_common+0xb0>
 8004d8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d90:	4641      	mov	r1, r8
 8004d92:	4638      	mov	r0, r7
 8004d94:	47c8      	blx	r9
 8004d96:	3001      	adds	r0, #1
 8004d98:	d01e      	beq.n	8004dd8 <_printf_common+0xa4>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	f003 0306 	and.w	r3, r3, #6
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	bf02      	ittt	eq
 8004da6:	68e5      	ldreq	r5, [r4, #12]
 8004da8:	6833      	ldreq	r3, [r6, #0]
 8004daa:	1aed      	subeq	r5, r5, r3
 8004dac:	68a3      	ldr	r3, [r4, #8]
 8004dae:	bf0c      	ite	eq
 8004db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db4:	2500      	movne	r5, #0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bfc4      	itt	gt
 8004dba:	1a9b      	subgt	r3, r3, r2
 8004dbc:	18ed      	addgt	r5, r5, r3
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	341a      	adds	r4, #26
 8004dc2:	42b5      	cmp	r5, r6
 8004dc4:	d11a      	bne.n	8004dfc <_printf_common+0xc8>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e008      	b.n	8004ddc <_printf_common+0xa8>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4652      	mov	r2, sl
 8004dce:	4641      	mov	r1, r8
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	47c8      	blx	r9
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d103      	bne.n	8004de0 <_printf_common+0xac>
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	3501      	adds	r5, #1
 8004de2:	e7c6      	b.n	8004d72 <_printf_common+0x3e>
 8004de4:	18e1      	adds	r1, r4, r3
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	2030      	movs	r0, #48	@ 0x30
 8004dea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dee:	4422      	add	r2, r4
 8004df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004df8:	3302      	adds	r3, #2
 8004dfa:	e7c7      	b.n	8004d8c <_printf_common+0x58>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4622      	mov	r2, r4
 8004e00:	4641      	mov	r1, r8
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c8      	blx	r9
 8004e06:	3001      	adds	r0, #1
 8004e08:	d0e6      	beq.n	8004dd8 <_printf_common+0xa4>
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7d9      	b.n	8004dc2 <_printf_common+0x8e>
	...

08004e10 <_printf_i>:
 8004e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	7e0f      	ldrb	r7, [r1, #24]
 8004e16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e18:	2f78      	cmp	r7, #120	@ 0x78
 8004e1a:	4691      	mov	r9, r2
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	469a      	mov	sl, r3
 8004e22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e26:	d807      	bhi.n	8004e38 <_printf_i+0x28>
 8004e28:	2f62      	cmp	r7, #98	@ 0x62
 8004e2a:	d80a      	bhi.n	8004e42 <_printf_i+0x32>
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	f000 80d2 	beq.w	8004fd6 <_printf_i+0x1c6>
 8004e32:	2f58      	cmp	r7, #88	@ 0x58
 8004e34:	f000 80b9 	beq.w	8004faa <_printf_i+0x19a>
 8004e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e40:	e03a      	b.n	8004eb8 <_printf_i+0xa8>
 8004e42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e46:	2b15      	cmp	r3, #21
 8004e48:	d8f6      	bhi.n	8004e38 <_printf_i+0x28>
 8004e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8004e50 <_printf_i+0x40>)
 8004e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e50:	08004ea9 	.word	0x08004ea9
 8004e54:	08004ebd 	.word	0x08004ebd
 8004e58:	08004e39 	.word	0x08004e39
 8004e5c:	08004e39 	.word	0x08004e39
 8004e60:	08004e39 	.word	0x08004e39
 8004e64:	08004e39 	.word	0x08004e39
 8004e68:	08004ebd 	.word	0x08004ebd
 8004e6c:	08004e39 	.word	0x08004e39
 8004e70:	08004e39 	.word	0x08004e39
 8004e74:	08004e39 	.word	0x08004e39
 8004e78:	08004e39 	.word	0x08004e39
 8004e7c:	08004fbd 	.word	0x08004fbd
 8004e80:	08004ee7 	.word	0x08004ee7
 8004e84:	08004f77 	.word	0x08004f77
 8004e88:	08004e39 	.word	0x08004e39
 8004e8c:	08004e39 	.word	0x08004e39
 8004e90:	08004fdf 	.word	0x08004fdf
 8004e94:	08004e39 	.word	0x08004e39
 8004e98:	08004ee7 	.word	0x08004ee7
 8004e9c:	08004e39 	.word	0x08004e39
 8004ea0:	08004e39 	.word	0x08004e39
 8004ea4:	08004f7f 	.word	0x08004f7f
 8004ea8:	6833      	ldr	r3, [r6, #0]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6032      	str	r2, [r6, #0]
 8004eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004eb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e09d      	b.n	8004ff8 <_printf_i+0x1e8>
 8004ebc:	6833      	ldr	r3, [r6, #0]
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	1d19      	adds	r1, r3, #4
 8004ec2:	6031      	str	r1, [r6, #0]
 8004ec4:	0606      	lsls	r6, r0, #24
 8004ec6:	d501      	bpl.n	8004ecc <_printf_i+0xbc>
 8004ec8:	681d      	ldr	r5, [r3, #0]
 8004eca:	e003      	b.n	8004ed4 <_printf_i+0xc4>
 8004ecc:	0645      	lsls	r5, r0, #25
 8004ece:	d5fb      	bpl.n	8004ec8 <_printf_i+0xb8>
 8004ed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ed4:	2d00      	cmp	r5, #0
 8004ed6:	da03      	bge.n	8004ee0 <_printf_i+0xd0>
 8004ed8:	232d      	movs	r3, #45	@ 0x2d
 8004eda:	426d      	negs	r5, r5
 8004edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ee0:	4859      	ldr	r0, [pc, #356]	@ (8005048 <_printf_i+0x238>)
 8004ee2:	230a      	movs	r3, #10
 8004ee4:	e011      	b.n	8004f0a <_printf_i+0xfa>
 8004ee6:	6821      	ldr	r1, [r4, #0]
 8004ee8:	6833      	ldr	r3, [r6, #0]
 8004eea:	0608      	lsls	r0, r1, #24
 8004eec:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ef0:	d402      	bmi.n	8004ef8 <_printf_i+0xe8>
 8004ef2:	0649      	lsls	r1, r1, #25
 8004ef4:	bf48      	it	mi
 8004ef6:	b2ad      	uxthmi	r5, r5
 8004ef8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004efa:	4853      	ldr	r0, [pc, #332]	@ (8005048 <_printf_i+0x238>)
 8004efc:	6033      	str	r3, [r6, #0]
 8004efe:	bf14      	ite	ne
 8004f00:	230a      	movne	r3, #10
 8004f02:	2308      	moveq	r3, #8
 8004f04:	2100      	movs	r1, #0
 8004f06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f0a:	6866      	ldr	r6, [r4, #4]
 8004f0c:	60a6      	str	r6, [r4, #8]
 8004f0e:	2e00      	cmp	r6, #0
 8004f10:	bfa2      	ittt	ge
 8004f12:	6821      	ldrge	r1, [r4, #0]
 8004f14:	f021 0104 	bicge.w	r1, r1, #4
 8004f18:	6021      	strge	r1, [r4, #0]
 8004f1a:	b90d      	cbnz	r5, 8004f20 <_printf_i+0x110>
 8004f1c:	2e00      	cmp	r6, #0
 8004f1e:	d04b      	beq.n	8004fb8 <_printf_i+0x1a8>
 8004f20:	4616      	mov	r6, r2
 8004f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f26:	fb03 5711 	mls	r7, r3, r1, r5
 8004f2a:	5dc7      	ldrb	r7, [r0, r7]
 8004f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f30:	462f      	mov	r7, r5
 8004f32:	42bb      	cmp	r3, r7
 8004f34:	460d      	mov	r5, r1
 8004f36:	d9f4      	bls.n	8004f22 <_printf_i+0x112>
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d10b      	bne.n	8004f54 <_printf_i+0x144>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	07df      	lsls	r7, r3, #31
 8004f40:	d508      	bpl.n	8004f54 <_printf_i+0x144>
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	6861      	ldr	r1, [r4, #4]
 8004f46:	4299      	cmp	r1, r3
 8004f48:	bfde      	ittt	le
 8004f4a:	2330      	movle	r3, #48	@ 0x30
 8004f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f50:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f54:	1b92      	subs	r2, r2, r6
 8004f56:	6122      	str	r2, [r4, #16]
 8004f58:	f8cd a000 	str.w	sl, [sp]
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	aa03      	add	r2, sp, #12
 8004f60:	4621      	mov	r1, r4
 8004f62:	4640      	mov	r0, r8
 8004f64:	f7ff fee6 	bl	8004d34 <_printf_common>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d14a      	bne.n	8005002 <_printf_i+0x1f2>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f70:	b004      	add	sp, #16
 8004f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f043 0320 	orr.w	r3, r3, #32
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	4833      	ldr	r0, [pc, #204]	@ (800504c <_printf_i+0x23c>)
 8004f80:	2778      	movs	r7, #120	@ 0x78
 8004f82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	6831      	ldr	r1, [r6, #0]
 8004f8a:	061f      	lsls	r7, r3, #24
 8004f8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f90:	d402      	bmi.n	8004f98 <_printf_i+0x188>
 8004f92:	065f      	lsls	r7, r3, #25
 8004f94:	bf48      	it	mi
 8004f96:	b2ad      	uxthmi	r5, r5
 8004f98:	6031      	str	r1, [r6, #0]
 8004f9a:	07d9      	lsls	r1, r3, #31
 8004f9c:	bf44      	itt	mi
 8004f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8004fa2:	6023      	strmi	r3, [r4, #0]
 8004fa4:	b11d      	cbz	r5, 8004fae <_printf_i+0x19e>
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	e7ac      	b.n	8004f04 <_printf_i+0xf4>
 8004faa:	4827      	ldr	r0, [pc, #156]	@ (8005048 <_printf_i+0x238>)
 8004fac:	e7e9      	b.n	8004f82 <_printf_i+0x172>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	f023 0320 	bic.w	r3, r3, #32
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	e7f6      	b.n	8004fa6 <_printf_i+0x196>
 8004fb8:	4616      	mov	r6, r2
 8004fba:	e7bd      	b.n	8004f38 <_printf_i+0x128>
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	6961      	ldr	r1, [r4, #20]
 8004fc2:	1d18      	adds	r0, r3, #4
 8004fc4:	6030      	str	r0, [r6, #0]
 8004fc6:	062e      	lsls	r6, r5, #24
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	d501      	bpl.n	8004fd0 <_printf_i+0x1c0>
 8004fcc:	6019      	str	r1, [r3, #0]
 8004fce:	e002      	b.n	8004fd6 <_printf_i+0x1c6>
 8004fd0:	0668      	lsls	r0, r5, #25
 8004fd2:	d5fb      	bpl.n	8004fcc <_printf_i+0x1bc>
 8004fd4:	8019      	strh	r1, [r3, #0]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6123      	str	r3, [r4, #16]
 8004fda:	4616      	mov	r6, r2
 8004fdc:	e7bc      	b.n	8004f58 <_printf_i+0x148>
 8004fde:	6833      	ldr	r3, [r6, #0]
 8004fe0:	1d1a      	adds	r2, r3, #4
 8004fe2:	6032      	str	r2, [r6, #0]
 8004fe4:	681e      	ldr	r6, [r3, #0]
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7fb f8f8 	bl	80001e0 <memchr>
 8004ff0:	b108      	cbz	r0, 8004ff6 <_printf_i+0x1e6>
 8004ff2:	1b80      	subs	r0, r0, r6
 8004ff4:	6060      	str	r0, [r4, #4]
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005000:	e7aa      	b.n	8004f58 <_printf_i+0x148>
 8005002:	6923      	ldr	r3, [r4, #16]
 8005004:	4632      	mov	r2, r6
 8005006:	4649      	mov	r1, r9
 8005008:	4640      	mov	r0, r8
 800500a:	47d0      	blx	sl
 800500c:	3001      	adds	r0, #1
 800500e:	d0ad      	beq.n	8004f6c <_printf_i+0x15c>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	079b      	lsls	r3, r3, #30
 8005014:	d413      	bmi.n	800503e <_printf_i+0x22e>
 8005016:	68e0      	ldr	r0, [r4, #12]
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	4298      	cmp	r0, r3
 800501c:	bfb8      	it	lt
 800501e:	4618      	movlt	r0, r3
 8005020:	e7a6      	b.n	8004f70 <_printf_i+0x160>
 8005022:	2301      	movs	r3, #1
 8005024:	4632      	mov	r2, r6
 8005026:	4649      	mov	r1, r9
 8005028:	4640      	mov	r0, r8
 800502a:	47d0      	blx	sl
 800502c:	3001      	adds	r0, #1
 800502e:	d09d      	beq.n	8004f6c <_printf_i+0x15c>
 8005030:	3501      	adds	r5, #1
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	9903      	ldr	r1, [sp, #12]
 8005036:	1a5b      	subs	r3, r3, r1
 8005038:	42ab      	cmp	r3, r5
 800503a:	dcf2      	bgt.n	8005022 <_printf_i+0x212>
 800503c:	e7eb      	b.n	8005016 <_printf_i+0x206>
 800503e:	2500      	movs	r5, #0
 8005040:	f104 0619 	add.w	r6, r4, #25
 8005044:	e7f5      	b.n	8005032 <_printf_i+0x222>
 8005046:	bf00      	nop
 8005048:	080051a9 	.word	0x080051a9
 800504c:	080051ba 	.word	0x080051ba

08005050 <memmove>:
 8005050:	4288      	cmp	r0, r1
 8005052:	b510      	push	{r4, lr}
 8005054:	eb01 0402 	add.w	r4, r1, r2
 8005058:	d902      	bls.n	8005060 <memmove+0x10>
 800505a:	4284      	cmp	r4, r0
 800505c:	4623      	mov	r3, r4
 800505e:	d807      	bhi.n	8005070 <memmove+0x20>
 8005060:	1e43      	subs	r3, r0, #1
 8005062:	42a1      	cmp	r1, r4
 8005064:	d008      	beq.n	8005078 <memmove+0x28>
 8005066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800506a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800506e:	e7f8      	b.n	8005062 <memmove+0x12>
 8005070:	4402      	add	r2, r0
 8005072:	4601      	mov	r1, r0
 8005074:	428a      	cmp	r2, r1
 8005076:	d100      	bne.n	800507a <memmove+0x2a>
 8005078:	bd10      	pop	{r4, pc}
 800507a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800507e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005082:	e7f7      	b.n	8005074 <memmove+0x24>

08005084 <_sbrk_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4d06      	ldr	r5, [pc, #24]	@ (80050a0 <_sbrk_r+0x1c>)
 8005088:	2300      	movs	r3, #0
 800508a:	4604      	mov	r4, r0
 800508c:	4608      	mov	r0, r1
 800508e:	602b      	str	r3, [r5, #0]
 8005090:	f7fb fd82 	bl	8000b98 <_sbrk>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d102      	bne.n	800509e <_sbrk_r+0x1a>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	b103      	cbz	r3, 800509e <_sbrk_r+0x1a>
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	bd38      	pop	{r3, r4, r5, pc}
 80050a0:	2000428c 	.word	0x2000428c

080050a4 <_realloc_r>:
 80050a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a8:	4680      	mov	r8, r0
 80050aa:	4615      	mov	r5, r2
 80050ac:	460c      	mov	r4, r1
 80050ae:	b921      	cbnz	r1, 80050ba <_realloc_r+0x16>
 80050b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b4:	4611      	mov	r1, r2
 80050b6:	f7ff bc59 	b.w	800496c <_malloc_r>
 80050ba:	b92a      	cbnz	r2, 80050c8 <_realloc_r+0x24>
 80050bc:	f7ff fbea 	bl	8004894 <_free_r>
 80050c0:	2400      	movs	r4, #0
 80050c2:	4620      	mov	r0, r4
 80050c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c8:	f000 f81a 	bl	8005100 <_malloc_usable_size_r>
 80050cc:	4285      	cmp	r5, r0
 80050ce:	4606      	mov	r6, r0
 80050d0:	d802      	bhi.n	80050d8 <_realloc_r+0x34>
 80050d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80050d6:	d8f4      	bhi.n	80050c2 <_realloc_r+0x1e>
 80050d8:	4629      	mov	r1, r5
 80050da:	4640      	mov	r0, r8
 80050dc:	f7ff fc46 	bl	800496c <_malloc_r>
 80050e0:	4607      	mov	r7, r0
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d0ec      	beq.n	80050c0 <_realloc_r+0x1c>
 80050e6:	42b5      	cmp	r5, r6
 80050e8:	462a      	mov	r2, r5
 80050ea:	4621      	mov	r1, r4
 80050ec:	bf28      	it	cs
 80050ee:	4632      	movcs	r2, r6
 80050f0:	f7ff fbc2 	bl	8004878 <memcpy>
 80050f4:	4621      	mov	r1, r4
 80050f6:	4640      	mov	r0, r8
 80050f8:	f7ff fbcc 	bl	8004894 <_free_r>
 80050fc:	463c      	mov	r4, r7
 80050fe:	e7e0      	b.n	80050c2 <_realloc_r+0x1e>

08005100 <_malloc_usable_size_r>:
 8005100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005104:	1f18      	subs	r0, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	bfbc      	itt	lt
 800510a:	580b      	ldrlt	r3, [r1, r0]
 800510c:	18c0      	addlt	r0, r0, r3
 800510e:	4770      	bx	lr

08005110 <_init>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	bf00      	nop
 8005114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005116:	bc08      	pop	{r3}
 8005118:	469e      	mov	lr, r3
 800511a:	4770      	bx	lr

0800511c <_fini>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr
