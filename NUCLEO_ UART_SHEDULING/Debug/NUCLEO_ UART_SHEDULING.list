
NUCLEO_ UART_SHEDULING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004120  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080042f0  080042f0  000052f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004364  08004364  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004364  08004364  00005364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800436c  0800436c  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800436c  0800436c  0000536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004370  08004370  00005370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004374  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004230  20000060  080043d4  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004290  080043d4  00006290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138bd  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c98  00000000  00000000  0001994d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d36  00000000  00000000  0001d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235c3  00000000  00000000  0001e416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013095  00000000  00000000  000419d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8f19  00000000  00000000  00054a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  0012d9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00132360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042d8 	.word	0x080042d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080042d8 	.word	0x080042d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	@ (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	@ (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	@ 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	2000007c 	.word	0x2000007c
 8000540:	2000011c 	.word	0x2000011c

08000544 <vTaskBusyWait>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vTaskBusyWait(int count)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	for(int i = 0 ; i < count ; i++)
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	e003      	b.n	800055a <vTaskBusyWait+0x16>
		__NOP();
 8000552:	bf00      	nop
	for(int i = 0 ; i < count ; i++)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	429a      	cmp	r2, r3
 8000560:	dbf7      	blt.n	8000552 <vTaskBusyWait+0xe>
}
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <vHighPriorityTask>:
	}
	vTaskDelete(NULL);
}

void vHighPriorityTask(void *pvParam)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	char *pcMessage = (char *)pvParam;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	60bb      	str	r3, [r7, #8]
	for(int i = 1 ; i <= 9 ; i++)
 800057c:	2301      	movs	r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e01b      	b.n	80005ba <vHighPriorityTask+0x4a>
	{
		portENTER_CRITICAL();
 8000582:	f003 fb01 	bl	8003b88 <vPortEnterCritical>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8000586:	68b8      	ldr	r0, [r7, #8]
 8000588:	f7ff fe42 	bl	8000210 <strlen>
 800058c:	4603      	mov	r3, r0
 800058e:	b29a      	uxth	r2, r3
 8000590:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000594:	68b9      	ldr	r1, [r7, #8]
 8000596:	480e      	ldr	r0, [pc, #56]	@ (80005d0 <vHighPriorityTask+0x60>)
 8000598:	f001 fee8 	bl	800236c <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 800059c:	f003 fb26 	bl	8003bec <vPortExitCritical>
		vTaskBusyWait(5000);
 80005a0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005a4:	f7ff ffce 	bl	8000544 <vTaskBusyWait>
		if(i == 4)
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	d102      	bne.n	80005b4 <vHighPriorityTask+0x44>
			vTaskDelay(5 / portTICK_RATE_MS);
 80005ae:	2005      	movs	r0, #5
 80005b0:	f002 fe0a 	bl	80031c8 <vTaskDelay>
	for(int i = 1 ; i <= 9 ; i++)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b09      	cmp	r3, #9
 80005be:	dde0      	ble.n	8000582 <vHighPriorityTask+0x12>
	}
	vTaskDelete(NULL);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f002 fd71 	bl	80030a8 <vTaskDelete>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000364 	.word	0x20000364

080005d4 <vLowPriorityTask>:

void vLowPriorityTask(void *pvParam)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	char *pcMessage = (char *)pvParam;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	60bb      	str	r3, [r7, #8]
	for(int i = 1 ; i <= 9 ; i++)
 80005e0:	2301      	movs	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e015      	b.n	8000612 <vLowPriorityTask+0x3e>
	{
		portENTER_CRITICAL();
 80005e6:	f003 facf 	bl	8003b88 <vPortEnterCritical>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 80005ea:	68b8      	ldr	r0, [r7, #8]
 80005ec:	f7ff fe10 	bl	8000210 <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	480b      	ldr	r0, [pc, #44]	@ (8000628 <vLowPriorityTask+0x54>)
 80005fc:	f001 feb6 	bl	800236c <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 8000600:	f003 faf4 	bl	8003bec <vPortExitCritical>
		vTaskBusyWait(5000);
 8000604:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000608:	f7ff ff9c 	bl	8000544 <vTaskBusyWait>
	for(int i = 1 ; i <= 9 ; i++)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3301      	adds	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b09      	cmp	r3, #9
 8000616:	dde6      	ble.n	80005e6 <vLowPriorityTask+0x12>
	}
	vTaskDelete(NULL);
 8000618:	2000      	movs	r0, #0
 800061a:	f002 fd45 	bl	80030a8 <vTaskDelete>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000364 	.word	0x20000364

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b08c      	sub	sp, #48	@ 0x30
 8000630:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	BaseType_t xRet;
	char *pcMessage = "This is UART Demo\r\n";
 8000632:	4b26      	ldr	r3, [pc, #152]	@ (80006cc <main+0xa0>)
 8000634:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fad5 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f85b 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f91b 	bl	8000878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f8ef 	bl	8000824 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000646:	f000 f8c3 	bl	80007d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 800064a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800064c:	f7ff fde0 	bl	8000210 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000658:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800065a:	481d      	ldr	r0, [pc, #116]	@ (80006d0 <main+0xa4>)
 800065c:	f001 fe86 	bl	800236c <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <main+0xa8>)
 8000662:	1d3c      	adds	r4, r7, #4
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fa53 	bl	8002b22 <osThreadCreate>
 800067c:	4603      	mov	r3, r0
 800067e:	4a16      	ldr	r2, [pc, #88]	@ (80006d8 <main+0xac>)
 8000680:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xRet = xTaskCreate(vHighPriorityTask, "HP", configMINIMAL_STACK_SIZE, "HP\r\n", 5, NULL);
 8000682:	2300      	movs	r3, #0
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2305      	movs	r3, #5
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <main+0xb0>)
 800068c:	2280      	movs	r2, #128	@ 0x80
 800068e:	4914      	ldr	r1, [pc, #80]	@ (80006e0 <main+0xb4>)
 8000690:	4814      	ldr	r0, [pc, #80]	@ (80006e4 <main+0xb8>)
 8000692:	f002 fbba 	bl	8002e0a <xTaskCreate>
 8000696:	6238      	str	r0, [r7, #32]
  if(xRet != pdTRUE)
 8000698:	6a3b      	ldr	r3, [r7, #32]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d001      	beq.n	80006a2 <main+0x76>
	  Error_Handler();
 800069e:	f000 f91f 	bl	80008e0 <Error_Handler>
  xRet = xTaskCreate(vLowPriorityTask, "LP", configMINIMAL_STACK_SIZE, "LP\r\n", 3, NULL);
 80006a2:	2300      	movs	r3, #0
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2303      	movs	r3, #3
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <main+0xbc>)
 80006ac:	2280      	movs	r2, #128	@ 0x80
 80006ae:	490f      	ldr	r1, [pc, #60]	@ (80006ec <main+0xc0>)
 80006b0:	480f      	ldr	r0, [pc, #60]	@ (80006f0 <main+0xc4>)
 80006b2:	f002 fbaa 	bl	8002e0a <xTaskCreate>
 80006b6:	6238      	str	r0, [r7, #32]
  if(xRet != pdTRUE)
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d001      	beq.n	80006c2 <main+0x96>
	  Error_Handler();
 80006be:	f000 f90f 	bl	80008e0 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c2:	f002 fa27 	bl	8002b14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c6:	bf00      	nop
 80006c8:	e7fd      	b.n	80006c6 <main+0x9a>
 80006ca:	bf00      	nop
 80006cc:	080042f0 	.word	0x080042f0
 80006d0:	20000364 	.word	0x20000364
 80006d4:	08004328 	.word	0x08004328
 80006d8:	200003ac 	.word	0x200003ac
 80006dc:	08004304 	.word	0x08004304
 80006e0:	0800430c 	.word	0x0800430c
 80006e4:	08000571 	.word	0x08000571
 80006e8:	08004310 	.word	0x08004310
 80006ec:	08004318 	.word	0x08004318
 80006f0:	080005d5 	.word	0x080005d5

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	@ 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2234      	movs	r2, #52	@ 0x34
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fd0e 	bl	8004124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b2a      	ldr	r3, [pc, #168]	@ (80007c8 <SystemClock_Config+0xd4>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	4a29      	ldr	r2, [pc, #164]	@ (80007c8 <SystemClock_Config+0xd4>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	@ 0x40
 8000728:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <SystemClock_Config+0xd4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <SystemClock_Config+0xd8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000740:	4a22      	ldr	r2, [pc, #136]	@ (80007cc <SystemClock_Config+0xd8>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <SystemClock_Config+0xd8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000768:	2310      	movs	r3, #16
 800076a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800076c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000770:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000772:	2304      	movs	r3, #4
 8000774:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f862 	bl	800184c <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800078e:	f000 f8a7 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2302      	movs	r3, #2
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2102      	movs	r1, #2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fcd0 	bl	8001154 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ba:	f000 f891 	bl	80008e0 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	@ 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_USART1_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <MX_USART1_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_USART1_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_USART1_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_USART1_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_USART1_UART_Init+0x4c>)
 8000808:	f001 fd60 	bl	80022cc <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f865 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000031c 	.word	0x2000031c
 8000820:	40011000 	.word	0x40011000

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	@ (8000874 <MX_USART2_UART_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800085c:	f001 fd36 	bl	80022cc <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000866:	f000 f83b 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000364 	.word	0x20000364
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_GPIO_Init+0x30>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a08      	ldr	r2, [pc, #32]	@ (80008a8 <MX_GPIO_Init+0x30>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_GPIO_Init+0x30>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f002 f980 	bl	8002bba <osDelay>
 80008ba:	e7fb      	b.n	80008b4 <StartDefaultTask+0x8>

080008bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d101      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ce:	f000 f9ab 	bl	8000c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40010000 	.word	0x40010000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <Error_Handler+0x8>

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_MspInit+0x54>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	4a11      	ldr	r2, [pc, #68]	@ (8000940 <HAL_MspInit+0x54>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000900:	6453      	str	r3, [r2, #68]	@ 0x44
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <HAL_MspInit+0x54>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <HAL_MspInit+0x54>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	@ 0x40
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	f06f 0001 	mvn.w	r0, #1
 8000932:	f000 fa51 	bl	8000dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	@ 0x30
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a32      	ldr	r2, [pc, #200]	@ (8000a2c <HAL_UART_MspInit+0xe8>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12d      	bne.n	80009c2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	4b31      	ldr	r3, [pc, #196]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	4a30      	ldr	r2, [pc, #192]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6453      	str	r3, [r2, #68]	@ 0x44
 8000976:	4b2e      	ldr	r3, [pc, #184]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a29      	ldr	r2, [pc, #164]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b27      	ldr	r3, [pc, #156]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800099e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b0:	2307      	movs	r3, #7
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	481e      	ldr	r0, [pc, #120]	@ (8000a34 <HAL_UART_MspInit+0xf0>)
 80009bc:	f000 fa36 	bl	8000e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c0:	e030      	b.n	8000a24 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a38 <HAL_UART_MspInit+0xf4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d12b      	bne.n	8000a24 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	4a16      	ldr	r2, [pc, #88]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009da:	6413      	str	r3, [r2, #64]	@ 0x40
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <HAL_UART_MspInit+0xec>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a04:	230c      	movs	r3, #12
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a14:	2307      	movs	r3, #7
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <HAL_UART_MspInit+0xf0>)
 8000a20:	f000 fa04 	bl	8000e2c <HAL_GPIO_Init>
}
 8000a24:	bf00      	nop
 8000a26:	3730      	adds	r7, #48	@ 0x30
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40011000 	.word	0x40011000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40004400 	.word	0x40004400

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	@ 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <HAL_InitTick+0xd0>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a54:	4a2d      	ldr	r2, [pc, #180]	@ (8000b0c <HAL_InitTick+0xd0>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <HAL_InitTick+0xd0>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a68:	f107 020c 	add.w	r2, r7, #12
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fc88 	bl	8001388 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a78:	f000 fc72 	bl	8001360 <HAL_RCC_GetPCLK2Freq>
 8000a7c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a80:	4a23      	ldr	r2, [pc, #140]	@ (8000b10 <HAL_InitTick+0xd4>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	0c9b      	lsrs	r3, r3, #18
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <HAL_InitTick+0xd8>)
 8000a8e:	4a22      	ldr	r2, [pc, #136]	@ (8000b18 <HAL_InitTick+0xdc>)
 8000a90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a92:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <HAL_InitTick+0xd8>)
 8000a94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b14 <HAL_InitTick+0xd8>)
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_InitTick+0xd8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <HAL_InitTick+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_InitTick+0xd8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ab2:	4818      	ldr	r0, [pc, #96]	@ (8000b14 <HAL_InitTick+0xd8>)
 8000ab4:	f001 f968 	bl	8001d88 <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000abe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d11b      	bne.n	8000afe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ac6:	4813      	ldr	r0, [pc, #76]	@ (8000b14 <HAL_InitTick+0xd8>)
 8000ac8:	f001 f9b8 	bl	8001e3c <HAL_TIM_Base_Start_IT>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d111      	bne.n	8000afe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ada:	2019      	movs	r0, #25
 8000adc:	f000 f998 	bl	8000e10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	d808      	bhi.n	8000af8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	2019      	movs	r0, #25
 8000aec:	f000 f974 	bl	8000dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <HAL_InitTick+0xe0>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e002      	b.n	8000afe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000afe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3730      	adds	r7, #48	@ 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	200003b0 	.word	0x200003b0
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <NMI_Handler+0x4>

08000b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <MemManage_Handler+0x4>

08000b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b5e:	f001 f9dd 	bl	8001f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200003b0 	.word	0x200003b0

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b94:	f7ff ffea 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f003 fb0f 	bl	80041e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fd33 	bl	800062c <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bd4:	08004374 	.word	0x08004374
  ldr r2, =_sbss
 8000bd8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bdc:	20004290 	.word	0x20004290

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f8d8 	bl	8000dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	200f      	movs	r0, #15
 8000c14:	f7ff ff12 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe68 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	200003f8 	.word	0x200003f8

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	@ (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200003f8 	.word	0x200003f8

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	@ (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	@ (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	@ (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	@ 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ff4c 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dea:	f7ff ff61 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000dee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	6978      	ldr	r0, [r7, #20]
 8000df6:	f7ff ffb1 	bl	8000d5c <NVIC_EncodePriority>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff80 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff54 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e165      	b.n	8001114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8154 	bne.w	800110e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d017      	beq.n	8000f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d123      	bne.n	8000f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80ae 	beq.w	800110e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800112c <HAL_GPIO_Init+0x300>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	4a5c      	ldr	r2, [pc, #368]	@ (800112c <HAL_GPIO_Init+0x300>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc2:	4b5a      	ldr	r3, [pc, #360]	@ (800112c <HAL_GPIO_Init+0x300>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a58      	ldr	r2, [pc, #352]	@ (8001130 <HAL_GPIO_Init+0x304>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8001134 <HAL_GPIO_Init+0x308>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d025      	beq.n	8001046 <HAL_GPIO_Init+0x21a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4e      	ldr	r2, [pc, #312]	@ (8001138 <HAL_GPIO_Init+0x30c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d01f      	beq.n	8001042 <HAL_GPIO_Init+0x216>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4d      	ldr	r2, [pc, #308]	@ (800113c <HAL_GPIO_Init+0x310>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x212>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4c      	ldr	r2, [pc, #304]	@ (8001140 <HAL_GPIO_Init+0x314>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x20e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4b      	ldr	r2, [pc, #300]	@ (8001144 <HAL_GPIO_Init+0x318>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x20a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4a      	ldr	r2, [pc, #296]	@ (8001148 <HAL_GPIO_Init+0x31c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x206>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a49      	ldr	r2, [pc, #292]	@ (800114c <HAL_GPIO_Init+0x320>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x202>
 800102a:	2306      	movs	r3, #6
 800102c:	e00c      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 800102e:	2307      	movs	r3, #7
 8001030:	e00a      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 8001036:	2304      	movs	r3, #4
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x21c>
 8001046:	2300      	movs	r3, #0
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001058:	4935      	ldr	r1, [pc, #212]	@ (8001130 <HAL_GPIO_Init+0x304>)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	4b3a      	ldr	r3, [pc, #232]	@ (8001150 <HAL_GPIO_Init+0x324>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108a:	4a31      	ldr	r2, [pc, #196]	@ (8001150 <HAL_GPIO_Init+0x324>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001090:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <HAL_GPIO_Init+0x324>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b4:	4a26      	ldr	r2, [pc, #152]	@ (8001150 <HAL_GPIO_Init+0x324>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ba:	4b25      	ldr	r3, [pc, #148]	@ (8001150 <HAL_GPIO_Init+0x324>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010de:	4a1c      	ldr	r2, [pc, #112]	@ (8001150 <HAL_GPIO_Init+0x324>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <HAL_GPIO_Init+0x324>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001108:	4a11      	ldr	r2, [pc, #68]	@ (8001150 <HAL_GPIO_Init+0x324>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b0f      	cmp	r3, #15
 8001118:	f67f ae96 	bls.w	8000e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	@ 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40013c00 	.word	0x40013c00

08001154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0cc      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001168:	4b68      	ldr	r3, [pc, #416]	@ (800130c <HAL_RCC_ClockConfig+0x1b8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d90c      	bls.n	8001190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	4b65      	ldr	r3, [pc, #404]	@ (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117e:	4b63      	ldr	r3, [pc, #396]	@ (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d001      	beq.n	8001190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0b8      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a8:	4b59      	ldr	r3, [pc, #356]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4a58      	ldr	r2, [pc, #352]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c0:	4b53      	ldr	r3, [pc, #332]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4a52      	ldr	r2, [pc, #328]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011cc:	4b50      	ldr	r3, [pc, #320]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	494d      	ldr	r1, [pc, #308]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d044      	beq.n	8001274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b47      	ldr	r3, [pc, #284]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d119      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e07f      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d003      	beq.n	8001212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800120e:	2b03      	cmp	r3, #3
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001212:	4b3f      	ldr	r3, [pc, #252]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06f      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001222:	4b3b      	ldr	r3, [pc, #236]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e067      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001232:	4b37      	ldr	r3, [pc, #220]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f023 0203 	bic.w	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4934      	ldr	r1, [pc, #208]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	4313      	orrs	r3, r2
 8001242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001244:	f7ff fd04 	bl	8000c50 <HAL_GetTick>
 8001248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124a:	e00a      	b.n	8001262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124c:	f7ff fd00 	bl	8000c50 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e04f      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001262:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 020c 	and.w	r2, r3, #12
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	429a      	cmp	r2, r3
 8001272:	d1eb      	bne.n	800124c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001274:	4b25      	ldr	r3, [pc, #148]	@ (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d20c      	bcs.n	800129c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b22      	ldr	r3, [pc, #136]	@ (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128a:	4b20      	ldr	r3, [pc, #128]	@ (800130c <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e032      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4916      	ldr	r1, [pc, #88]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	490e      	ldr	r1, [pc, #56]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012da:	f000 f887 	bl	80013ec <HAL_RCC_GetSysClockFreq>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	490a      	ldr	r1, [pc, #40]	@ (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	5ccb      	ldrb	r3, [r1, r3]
 80012ee:	fa22 f303 	lsr.w	r3, r2, r3
 80012f2:	4a09      	ldr	r2, [pc, #36]	@ (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_RCC_ClockConfig+0x1c8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fb9e 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00
 8001310:	40023800 	.word	0x40023800
 8001314:	0800434c 	.word	0x0800434c
 8001318:	20000000 	.word	0x20000000
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <HAL_RCC_GetHCLKFreq+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000000 	.word	0x20000000

08001338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800133c:	f7ff fff0 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001340:	4602      	mov	r2, r0
 8001342:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	0a9b      	lsrs	r3, r3, #10
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	4903      	ldr	r1, [pc, #12]	@ (800135c <HAL_RCC_GetPCLK1Freq+0x24>)
 800134e:	5ccb      	ldrb	r3, [r1, r3]
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	0800435c 	.word	0x0800435c

08001360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001364:	f7ff ffdc 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001368:	4602      	mov	r2, r0
 800136a:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	0b5b      	lsrs	r3, r3, #13
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	4903      	ldr	r1, [pc, #12]	@ (8001384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001376:	5ccb      	ldrb	r3, [r1, r3]
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	0800435c 	.word	0x0800435c

08001388 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	220f      	movs	r2, #15
 8001396:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <HAL_RCC_GetClockConfig+0x60>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 020f 	and.w	r2, r3, #15
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f0:	b0ae      	sub	sp, #184	@ 0xb8
 80013f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001412:	4bcb      	ldr	r3, [pc, #812]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x354>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b0c      	cmp	r3, #12
 800141c:	f200 8206 	bhi.w	800182c <HAL_RCC_GetSysClockFreq+0x440>
 8001420:	a201      	add	r2, pc, #4	@ (adr r2, 8001428 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	0800145d 	.word	0x0800145d
 800142c:	0800182d 	.word	0x0800182d
 8001430:	0800182d 	.word	0x0800182d
 8001434:	0800182d 	.word	0x0800182d
 8001438:	08001465 	.word	0x08001465
 800143c:	0800182d 	.word	0x0800182d
 8001440:	0800182d 	.word	0x0800182d
 8001444:	0800182d 	.word	0x0800182d
 8001448:	0800146d 	.word	0x0800146d
 800144c:	0800182d 	.word	0x0800182d
 8001450:	0800182d 	.word	0x0800182d
 8001454:	0800182d 	.word	0x0800182d
 8001458:	0800165d 	.word	0x0800165d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800145c:	4bb9      	ldr	r3, [pc, #740]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x358>)
 800145e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001462:	e1e7      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001464:	4bb8      	ldr	r3, [pc, #736]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800146a:	e1e3      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800146c:	4bb4      	ldr	r3, [pc, #720]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x354>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001474:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001478:	4bb1      	ldr	r3, [pc, #708]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x354>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d071      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001484:	4bae      	ldr	r3, [pc, #696]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x354>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	2200      	movs	r2, #0
 800148c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001490:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001494:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800149c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014aa:	4622      	mov	r2, r4
 80014ac:	462b      	mov	r3, r5
 80014ae:	f04f 0000 	mov.w	r0, #0
 80014b2:	f04f 0100 	mov.w	r1, #0
 80014b6:	0159      	lsls	r1, r3, #5
 80014b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014bc:	0150      	lsls	r0, r2, #5
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4621      	mov	r1, r4
 80014c4:	1a51      	subs	r1, r2, r1
 80014c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80014c8:	4629      	mov	r1, r5
 80014ca:	eb63 0301 	sbc.w	r3, r3, r1
 80014ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014dc:	4649      	mov	r1, r9
 80014de:	018b      	lsls	r3, r1, #6
 80014e0:	4641      	mov	r1, r8
 80014e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014e6:	4641      	mov	r1, r8
 80014e8:	018a      	lsls	r2, r1, #6
 80014ea:	4641      	mov	r1, r8
 80014ec:	1a51      	subs	r1, r2, r1
 80014ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014f0:	4649      	mov	r1, r9
 80014f2:	eb63 0301 	sbc.w	r3, r3, r1
 80014f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001504:	4649      	mov	r1, r9
 8001506:	00cb      	lsls	r3, r1, #3
 8001508:	4641      	mov	r1, r8
 800150a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800150e:	4641      	mov	r1, r8
 8001510:	00ca      	lsls	r2, r1, #3
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	4603      	mov	r3, r0
 8001518:	4622      	mov	r2, r4
 800151a:	189b      	adds	r3, r3, r2
 800151c:	633b      	str	r3, [r7, #48]	@ 0x30
 800151e:	462b      	mov	r3, r5
 8001520:	460a      	mov	r2, r1
 8001522:	eb42 0303 	adc.w	r3, r2, r3
 8001526:	637b      	str	r3, [r7, #52]	@ 0x34
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001534:	4629      	mov	r1, r5
 8001536:	024b      	lsls	r3, r1, #9
 8001538:	4621      	mov	r1, r4
 800153a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800153e:	4621      	mov	r1, r4
 8001540:	024a      	lsls	r2, r1, #9
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800154a:	2200      	movs	r2, #0
 800154c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001550:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001554:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001558:	f7fe fe62 	bl	8000220 <__aeabi_uldivmod>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4613      	mov	r3, r2
 8001562:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001566:	e067      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001568:	4b75      	ldr	r3, [pc, #468]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x354>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	2200      	movs	r2, #0
 8001570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001574:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001578:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800157c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001580:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001582:	2300      	movs	r3, #0
 8001584:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001586:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800158a:	4622      	mov	r2, r4
 800158c:	462b      	mov	r3, r5
 800158e:	f04f 0000 	mov.w	r0, #0
 8001592:	f04f 0100 	mov.w	r1, #0
 8001596:	0159      	lsls	r1, r3, #5
 8001598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800159c:	0150      	lsls	r0, r2, #5
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4621      	mov	r1, r4
 80015a4:	1a51      	subs	r1, r2, r1
 80015a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015a8:	4629      	mov	r1, r5
 80015aa:	eb63 0301 	sbc.w	r3, r3, r1
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015bc:	4649      	mov	r1, r9
 80015be:	018b      	lsls	r3, r1, #6
 80015c0:	4641      	mov	r1, r8
 80015c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015c6:	4641      	mov	r1, r8
 80015c8:	018a      	lsls	r2, r1, #6
 80015ca:	4641      	mov	r1, r8
 80015cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80015d0:	4649      	mov	r1, r9
 80015d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015ea:	4692      	mov	sl, r2
 80015ec:	469b      	mov	fp, r3
 80015ee:	4623      	mov	r3, r4
 80015f0:	eb1a 0303 	adds.w	r3, sl, r3
 80015f4:	623b      	str	r3, [r7, #32]
 80015f6:	462b      	mov	r3, r5
 80015f8:	eb4b 0303 	adc.w	r3, fp, r3
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800160a:	4629      	mov	r1, r5
 800160c:	028b      	lsls	r3, r1, #10
 800160e:	4621      	mov	r1, r4
 8001610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001614:	4621      	mov	r1, r4
 8001616:	028a      	lsls	r2, r1, #10
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001620:	2200      	movs	r2, #0
 8001622:	673b      	str	r3, [r7, #112]	@ 0x70
 8001624:	677a      	str	r2, [r7, #116]	@ 0x74
 8001626:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800162a:	f7fe fdf9 	bl	8000220 <__aeabi_uldivmod>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4613      	mov	r3, r2
 8001634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001638:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x354>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	0c1b      	lsrs	r3, r3, #16
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	3301      	adds	r3, #1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800164a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800164e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800165a:	e0eb      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165c:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x354>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001668:	4b35      	ldr	r3, [pc, #212]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x354>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d06b      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001674:	4b32      	ldr	r3, [pc, #200]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x354>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	2200      	movs	r2, #0
 800167c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800167e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001680:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001686:	663b      	str	r3, [r7, #96]	@ 0x60
 8001688:	2300      	movs	r3, #0
 800168a:	667b      	str	r3, [r7, #100]	@ 0x64
 800168c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001690:	4622      	mov	r2, r4
 8001692:	462b      	mov	r3, r5
 8001694:	f04f 0000 	mov.w	r0, #0
 8001698:	f04f 0100 	mov.w	r1, #0
 800169c:	0159      	lsls	r1, r3, #5
 800169e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a2:	0150      	lsls	r0, r2, #5
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4621      	mov	r1, r4
 80016aa:	1a51      	subs	r1, r2, r1
 80016ac:	61b9      	str	r1, [r7, #24]
 80016ae:	4629      	mov	r1, r5
 80016b0:	eb63 0301 	sbc.w	r3, r3, r1
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016c2:	4659      	mov	r1, fp
 80016c4:	018b      	lsls	r3, r1, #6
 80016c6:	4651      	mov	r1, sl
 80016c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016cc:	4651      	mov	r1, sl
 80016ce:	018a      	lsls	r2, r1, #6
 80016d0:	4651      	mov	r1, sl
 80016d2:	ebb2 0801 	subs.w	r8, r2, r1
 80016d6:	4659      	mov	r1, fp
 80016d8:	eb63 0901 	sbc.w	r9, r3, r1
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016f0:	4690      	mov	r8, r2
 80016f2:	4699      	mov	r9, r3
 80016f4:	4623      	mov	r3, r4
 80016f6:	eb18 0303 	adds.w	r3, r8, r3
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	462b      	mov	r3, r5
 80016fe:	eb49 0303 	adc.w	r3, r9, r3
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001710:	4629      	mov	r1, r5
 8001712:	024b      	lsls	r3, r1, #9
 8001714:	4621      	mov	r1, r4
 8001716:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800171a:	4621      	mov	r1, r4
 800171c:	024a      	lsls	r2, r1, #9
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001726:	2200      	movs	r2, #0
 8001728:	65bb      	str	r3, [r7, #88]	@ 0x58
 800172a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800172c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001730:	f7fe fd76 	bl	8000220 <__aeabi_uldivmod>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4613      	mov	r3, r2
 800173a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800173e:	e065      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x420>
 8001740:	40023800 	.word	0x40023800
 8001744:	00f42400 	.word	0x00f42400
 8001748:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174c:	4b3d      	ldr	r3, [pc, #244]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x458>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	2200      	movs	r2, #0
 8001754:	4618      	mov	r0, r3
 8001756:	4611      	mov	r1, r2
 8001758:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800175c:	653b      	str	r3, [r7, #80]	@ 0x50
 800175e:	2300      	movs	r3, #0
 8001760:	657b      	str	r3, [r7, #84]	@ 0x54
 8001762:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001766:	4642      	mov	r2, r8
 8001768:	464b      	mov	r3, r9
 800176a:	f04f 0000 	mov.w	r0, #0
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	0159      	lsls	r1, r3, #5
 8001774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001778:	0150      	lsls	r0, r2, #5
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4641      	mov	r1, r8
 8001780:	1a51      	subs	r1, r2, r1
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	4649      	mov	r1, r9
 8001786:	eb63 0301 	sbc.w	r3, r3, r1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001798:	4659      	mov	r1, fp
 800179a:	018b      	lsls	r3, r1, #6
 800179c:	4651      	mov	r1, sl
 800179e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a2:	4651      	mov	r1, sl
 80017a4:	018a      	lsls	r2, r1, #6
 80017a6:	4651      	mov	r1, sl
 80017a8:	1a54      	subs	r4, r2, r1
 80017aa:	4659      	mov	r1, fp
 80017ac:	eb63 0501 	sbc.w	r5, r3, r1
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	00eb      	lsls	r3, r5, #3
 80017ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017be:	00e2      	lsls	r2, r4, #3
 80017c0:	4614      	mov	r4, r2
 80017c2:	461d      	mov	r5, r3
 80017c4:	4643      	mov	r3, r8
 80017c6:	18e3      	adds	r3, r4, r3
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	464b      	mov	r3, r9
 80017cc:	eb45 0303 	adc.w	r3, r5, r3
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017de:	4629      	mov	r1, r5
 80017e0:	028b      	lsls	r3, r1, #10
 80017e2:	4621      	mov	r1, r4
 80017e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e8:	4621      	mov	r1, r4
 80017ea:	028a      	lsls	r2, r1, #10
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017f4:	2200      	movs	r2, #0
 80017f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017fe:	f7fe fd0f 	bl	8000220 <__aeabi_uldivmod>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4613      	mov	r3, r2
 8001808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x458>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	0f1b      	lsrs	r3, r3, #28
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800181a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800181e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800182a:	e003      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x45c>)
 800182e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001832:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001838:	4618      	mov	r0, r3
 800183a:	37b8      	adds	r7, #184	@ 0xb8
 800183c:	46bd      	mov	sp, r7
 800183e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	00f42400 	.word	0x00f42400

0800184c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e28d      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8083 	beq.w	8001972 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800186c:	4b94      	ldr	r3, [pc, #592]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b04      	cmp	r3, #4
 8001876:	d019      	beq.n	80018ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001878:	4b91      	ldr	r3, [pc, #580]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001880:	2b08      	cmp	r3, #8
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001884:	4b8e      	ldr	r3, [pc, #568]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001890:	d00c      	beq.n	80018ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001892:	4b8b      	ldr	r3, [pc, #556]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d112      	bne.n	80018c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189e:	4b88      	ldr	r3, [pc, #544]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018aa:	d10b      	bne.n	80018c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	4b84      	ldr	r3, [pc, #528]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d05b      	beq.n	8001970 <HAL_RCC_OscConfig+0x124>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d157      	bne.n	8001970 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e25a      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018cc:	d106      	bne.n	80018dc <HAL_RCC_OscConfig+0x90>
 80018ce:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e01d      	b.n	8001918 <HAL_RCC_OscConfig+0xcc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0xb4>
 80018e6:	4b76      	ldr	r3, [pc, #472]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a75      	ldr	r2, [pc, #468]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b73      	ldr	r3, [pc, #460]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a72      	ldr	r2, [pc, #456]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0xcc>
 8001900:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a6b      	ldr	r2, [pc, #428]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff f996 	bl	8000c50 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff f992 	bl	8000c50 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	@ 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e21f      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b61      	ldr	r3, [pc, #388]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0xdc>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff f982 	bl	8000c50 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff f97e 	bl	8000c50 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	@ 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e20b      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	4b57      	ldr	r3, [pc, #348]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x104>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d06f      	beq.n	8001a5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800197e:	4b50      	ldr	r3, [pc, #320]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b00      	cmp	r3, #0
 8001988:	d017      	beq.n	80019ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800198a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001992:	2b08      	cmp	r3, #8
 8001994:	d105      	bne.n	80019a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001996:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a2:	4b47      	ldr	r3, [pc, #284]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d11c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ae:	4b44      	ldr	r3, [pc, #272]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d116      	bne.n	80019e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_RCC_OscConfig+0x186>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e1d3      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4937      	ldr	r1, [pc, #220]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	e03a      	b.n	8001a5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f0:	4b34      	ldr	r3, [pc, #208]	@ (8001ac4 <HAL_RCC_OscConfig+0x278>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff f92b 	bl	8000c50 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff f927 	bl	8000c50 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e1b4      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4b28      	ldr	r3, [pc, #160]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4925      	ldr	r1, [pc, #148]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
 8001a30:	e015      	b.n	8001a5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a32:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <HAL_RCC_OscConfig+0x278>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f90a 	bl	8000c50 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff f906 	bl	8000c50 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e193      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d036      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d016      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f8ea 	bl	8000c50 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff f8e6 	bl	8000c50 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e173      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x234>
 8001a9e:	e01b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa0:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f8d3 	bl	8000c50 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	e00e      	b.n	8001acc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aae:	f7ff f8cf 	bl	8000c50 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d907      	bls.n	8001acc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e15c      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	42470000 	.word	0x42470000
 8001ac8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	4b8a      	ldr	r3, [pc, #552]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1ea      	bne.n	8001aae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8097 	beq.w	8001c14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aea:	4b83      	ldr	r3, [pc, #524]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10f      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b06:	4b7c      	ldr	r3, [pc, #496]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	4b79      	ldr	r3, [pc, #484]	@ (8001cfc <HAL_RCC_OscConfig+0x4b0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d118      	bne.n	8001b54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	4b76      	ldr	r3, [pc, #472]	@ (8001cfc <HAL_RCC_OscConfig+0x4b0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a75      	ldr	r2, [pc, #468]	@ (8001cfc <HAL_RCC_OscConfig+0x4b0>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f88f 	bl	8000c50 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff f88b 	bl	8000c50 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e118      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b6c      	ldr	r3, [pc, #432]	@ (8001cfc <HAL_RCC_OscConfig+0x4b0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x31e>
 8001b5c:	4b66      	ldr	r3, [pc, #408]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b60:	4a65      	ldr	r2, [pc, #404]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b68:	e01c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x358>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x340>
 8001b72:	4b61      	ldr	r3, [pc, #388]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b76:	4a60      	ldr	r2, [pc, #384]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x358>
 8001b8c:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b90:	4a59      	ldr	r2, [pc, #356]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b98:	4b57      	ldr	r3, [pc, #348]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9c:	4a56      	ldr	r2, [pc, #344]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	f023 0304 	bic.w	r3, r3, #4
 8001ba2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d015      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff f850 	bl	8000c50 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7ff f84c 	bl	8000c50 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e0d7      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0ee      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x368>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f83a 	bl	8000c50 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff f836 	bl	8000c50 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0c1      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf6:	4b40      	ldr	r3, [pc, #256]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ee      	bne.n	8001be0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c08:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80ad 	beq.w	8001d78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c1e:	4b36      	ldr	r3, [pc, #216]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d060      	beq.n	8001cec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d145      	bne.n	8001cbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b33      	ldr	r3, [pc, #204]	@ (8001d00 <HAL_RCC_OscConfig+0x4b4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f80a 	bl	8000c50 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f806 	bl	8000c50 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e093      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	4b29      	ldr	r3, [pc, #164]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	019b      	lsls	r3, r3, #6
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	3b01      	subs	r3, #1
 8001c78:	041b      	lsls	r3, r3, #16
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	061b      	lsls	r3, r3, #24
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	071b      	lsls	r3, r3, #28
 8001c8a:	491b      	ldr	r1, [pc, #108]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c90:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <HAL_RCC_OscConfig+0x4b4>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7fe ffdb 	bl	8000c50 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7fe ffd7 	bl	8000c50 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e064      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb0:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x452>
 8001cbc:	e05c      	b.n	8001d78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_RCC_OscConfig+0x4b4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7fe ffc4 	bl	8000c50 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7fe ffc0 	bl	8000c50 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e04d      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x480>
 8001cea:	e045      	b.n	8001d78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e040      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <HAL_RCC_OscConfig+0x538>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d030      	beq.n	8001d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d129      	bne.n	8001d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d122      	bne.n	8001d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d119      	bne.n	8001d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d10f      	bne.n	8001d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e041      	b.n	8001e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f839 	bl	8001e26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f000 f9c0 	bl	800214c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d001      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e04e      	b.n	8001ef2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d022      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x80>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7e:	d01d      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x80>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1f      	ldr	r2, [pc, #124]	@ (8001f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d018      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x80>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d013      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x80>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00e      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x80>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x80>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x80>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a18      	ldr	r2, [pc, #96]	@ (8001f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d111      	bne.n	8001ee0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d010      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ede:	e007      	b.n	8001ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40010000 	.word	0x40010000
 8001f04:	40000400 	.word	0x40000400
 8001f08:	40000800 	.word	0x40000800
 8001f0c:	40000c00 	.word	0x40000c00
 8001f10:	40010400 	.word	0x40010400
 8001f14:	40014000 	.word	0x40014000
 8001f18:	40001800 	.word	0x40001800

08001f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d020      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0202 	mvn.w	r2, #2
 8001f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8d2 	bl	8002110 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8c4 	bl	80020fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8d5 	bl	8002124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d020      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0204 	mvn.w	r2, #4
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8ac 	bl	8002110 <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f89e 	bl	80020fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8af 	bl	8002124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01b      	beq.n	8002018 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0208 	mvn.w	r2, #8
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2204      	movs	r2, #4
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f886 	bl	8002110 <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f878 	bl	80020fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f889 	bl	8002124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d020      	beq.n	8002064 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0210 	mvn.w	r2, #16
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2208      	movs	r2, #8
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f860 	bl	8002110 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f852 	bl	80020fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f863 	bl	8002124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0201 	mvn.w	r2, #1
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fc1a 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00c      	beq.n	80020ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f906 	bl	80022b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f834 	bl	8002138 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00c      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0220 	mvn.w	r2, #32
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8d8 	bl	80022a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a46      	ldr	r2, [pc, #280]	@ (8002278 <TIM_Base_SetConfig+0x12c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216a:	d00f      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a43      	ldr	r2, [pc, #268]	@ (800227c <TIM_Base_SetConfig+0x130>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00b      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a42      	ldr	r2, [pc, #264]	@ (8002280 <TIM_Base_SetConfig+0x134>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a41      	ldr	r2, [pc, #260]	@ (8002284 <TIM_Base_SetConfig+0x138>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d003      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a40      	ldr	r2, [pc, #256]	@ (8002288 <TIM_Base_SetConfig+0x13c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d108      	bne.n	800219e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a35      	ldr	r2, [pc, #212]	@ (8002278 <TIM_Base_SetConfig+0x12c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d02b      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ac:	d027      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a32      	ldr	r2, [pc, #200]	@ (800227c <TIM_Base_SetConfig+0x130>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d023      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a31      	ldr	r2, [pc, #196]	@ (8002280 <TIM_Base_SetConfig+0x134>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01f      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a30      	ldr	r2, [pc, #192]	@ (8002284 <TIM_Base_SetConfig+0x138>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01b      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002288 <TIM_Base_SetConfig+0x13c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d017      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2e      	ldr	r2, [pc, #184]	@ (800228c <TIM_Base_SetConfig+0x140>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002290 <TIM_Base_SetConfig+0x144>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00f      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002294 <TIM_Base_SetConfig+0x148>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00b      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002298 <TIM_Base_SetConfig+0x14c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2a      	ldr	r2, [pc, #168]	@ (800229c <TIM_Base_SetConfig+0x150>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a29      	ldr	r2, [pc, #164]	@ (80022a0 <TIM_Base_SetConfig+0x154>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d108      	bne.n	8002210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <TIM_Base_SetConfig+0x12c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <TIM_Base_SetConfig+0xf8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <TIM_Base_SetConfig+0x13c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d103      	bne.n	800224c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f023 0201 	bic.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]
  }
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40010000 	.word	0x40010000
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800
 8002284:	40000c00 	.word	0x40000c00
 8002288:	40010400 	.word	0x40010400
 800228c:	40014000 	.word	0x40014000
 8002290:	40014400 	.word	0x40014400
 8002294:	40014800 	.word	0x40014800
 8002298:	40001800 	.word	0x40001800
 800229c:	40001c00 	.word	0x40001c00
 80022a0:	40002000 	.word	0x40002000

080022a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e042      	b.n	8002364 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fb26 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	@ 0x24
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800230e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f973 	bl	80025fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b20      	cmp	r3, #32
 800238a:	d175      	bne.n	8002478 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_UART_Transmit+0x2c>
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e06e      	b.n	800247a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2221      	movs	r2, #33	@ 0x21
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023aa:	f7fe fc51 	bl	8000c50 <HAL_GetTick>
 80023ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023c4:	d108      	bne.n	80023d8 <HAL_UART_Transmit+0x6c>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d104      	bne.n	80023d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	e003      	b.n	80023e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023e0:	e02e      	b.n	8002440 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f848 	bl	8002482 <UART_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e03a      	b.n	800247a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10b      	bne.n	8002422 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002418:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	3302      	adds	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	e007      	b.n	8002432 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1cb      	bne.n	80023e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	2140      	movs	r1, #64	@ 0x40
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f814 	bl	8002482 <UART_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e006      	b.n	800247a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	e000      	b.n	800247a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002492:	e03b      	b.n	800250c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800249a:	d037      	beq.n	800250c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249c:	f7fe fbd8 	bl	8000c50 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	6a3a      	ldr	r2, [r7, #32]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d302      	bcc.n	80024b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e03a      	b.n	800252c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d023      	beq.n	800250c <UART_WaitOnFlagUntilTimeout+0x8a>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b80      	cmp	r3, #128	@ 0x80
 80024c8:	d020      	beq.n	800250c <UART_WaitOnFlagUntilTimeout+0x8a>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b40      	cmp	r3, #64	@ 0x40
 80024ce:	d01d      	beq.n	800250c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d116      	bne.n	800250c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f81d 	bl	8002534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2208      	movs	r2, #8
 80024fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e00f      	b.n	800252c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4013      	ands	r3, r2
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	429a      	cmp	r2, r3
 8002528:	d0b4      	beq.n	8002494 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002534:	b480      	push	{r7}
 8002536:	b095      	sub	sp, #84	@ 0x54
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	330c      	adds	r3, #12
 8002542:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002546:	e853 3f00 	ldrex	r3, [r3]
 800254a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800254c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800255c:	643a      	str	r2, [r7, #64]	@ 0x40
 800255e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002560:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002562:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002564:	e841 2300 	strex	r3, r2, [r1]
 8002568:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800256a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e5      	bne.n	800253c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3314      	adds	r3, #20
 8002576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	e853 3f00 	ldrex	r3, [r3]
 800257e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3314      	adds	r3, #20
 800258e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002590:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002598:	e841 2300 	strex	r3, r2, [r1]
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e5      	bne.n	8002570 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d119      	bne.n	80025e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	e853 3f00 	ldrex	r3, [r3]
 80025ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f023 0310 	bic.w	r3, r3, #16
 80025c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	330c      	adds	r3, #12
 80025ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025cc:	61ba      	str	r2, [r7, #24]
 80025ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d0:	6979      	ldr	r1, [r7, #20]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	e841 2300 	strex	r3, r2, [r1]
 80025d8:	613b      	str	r3, [r7, #16]
   return(result);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e5      	bne.n	80025ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025ee:	bf00      	nop
 80025f0:	3754      	adds	r7, #84	@ 0x54
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002600:	b0c0      	sub	sp, #256	@ 0x100
 8002602:	af00      	add	r7, sp, #0
 8002604:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002618:	68d9      	ldr	r1, [r3, #12]
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	ea40 0301 	orr.w	r3, r0, r1
 8002624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	431a      	orrs	r2, r3
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	431a      	orrs	r2, r3
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002654:	f021 010c 	bic.w	r1, r1, #12
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002662:	430b      	orrs	r3, r1
 8002664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002676:	6999      	ldr	r1, [r3, #24]
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	ea40 0301 	orr.w	r3, r0, r1
 8002682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b8f      	ldr	r3, [pc, #572]	@ (80028c8 <UART_SetConfig+0x2cc>)
 800268c:	429a      	cmp	r2, r3
 800268e:	d005      	beq.n	800269c <UART_SetConfig+0xa0>
 8002690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b8d      	ldr	r3, [pc, #564]	@ (80028cc <UART_SetConfig+0x2d0>)
 8002698:	429a      	cmp	r2, r3
 800269a:	d104      	bne.n	80026a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800269c:	f7fe fe60 	bl	8001360 <HAL_RCC_GetPCLK2Freq>
 80026a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80026a4:	e003      	b.n	80026ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026a6:	f7fe fe47 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 80026aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026b8:	f040 810c 	bne.w	80028d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026ce:	4622      	mov	r2, r4
 80026d0:	462b      	mov	r3, r5
 80026d2:	1891      	adds	r1, r2, r2
 80026d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026d6:	415b      	adcs	r3, r3
 80026d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026de:	4621      	mov	r1, r4
 80026e0:	eb12 0801 	adds.w	r8, r2, r1
 80026e4:	4629      	mov	r1, r5
 80026e6:	eb43 0901 	adc.w	r9, r3, r1
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026fe:	4690      	mov	r8, r2
 8002700:	4699      	mov	r9, r3
 8002702:	4623      	mov	r3, r4
 8002704:	eb18 0303 	adds.w	r3, r8, r3
 8002708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800270c:	462b      	mov	r3, r5
 800270e:	eb49 0303 	adc.w	r3, r9, r3
 8002712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002722:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800272a:	460b      	mov	r3, r1
 800272c:	18db      	adds	r3, r3, r3
 800272e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002730:	4613      	mov	r3, r2
 8002732:	eb42 0303 	adc.w	r3, r2, r3
 8002736:	657b      	str	r3, [r7, #84]	@ 0x54
 8002738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800273c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002740:	f7fd fd6e 	bl	8000220 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4b61      	ldr	r3, [pc, #388]	@ (80028d0 <UART_SetConfig+0x2d4>)
 800274a:	fba3 2302 	umull	r2, r3, r3, r2
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	011c      	lsls	r4, r3, #4
 8002752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800275c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	1891      	adds	r1, r2, r2
 800276a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800276c:	415b      	adcs	r3, r3
 800276e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002774:	4641      	mov	r1, r8
 8002776:	eb12 0a01 	adds.w	sl, r2, r1
 800277a:	4649      	mov	r1, r9
 800277c:	eb43 0b01 	adc.w	fp, r3, r1
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800278c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002794:	4692      	mov	sl, r2
 8002796:	469b      	mov	fp, r3
 8002798:	4643      	mov	r3, r8
 800279a:	eb1a 0303 	adds.w	r3, sl, r3
 800279e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027a2:	464b      	mov	r3, r9
 80027a4:	eb4b 0303 	adc.w	r3, fp, r3
 80027a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80027c0:	460b      	mov	r3, r1
 80027c2:	18db      	adds	r3, r3, r3
 80027c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80027c6:	4613      	mov	r3, r2
 80027c8:	eb42 0303 	adc.w	r3, r2, r3
 80027cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80027ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027d6:	f7fd fd23 	bl	8000220 <__aeabi_uldivmod>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	4b3b      	ldr	r3, [pc, #236]	@ (80028d0 <UART_SetConfig+0x2d4>)
 80027e2:	fba3 2301 	umull	r2, r3, r3, r1
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2264      	movs	r2, #100	@ 0x64
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	1acb      	subs	r3, r1, r3
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027f6:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <UART_SetConfig+0x2d4>)
 80027f8:	fba3 2302 	umull	r2, r3, r3, r2
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002804:	441c      	add	r4, r3
 8002806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800280a:	2200      	movs	r2, #0
 800280c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002810:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	1891      	adds	r1, r2, r2
 800281e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002820:	415b      	adcs	r3, r3
 8002822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002828:	4641      	mov	r1, r8
 800282a:	1851      	adds	r1, r2, r1
 800282c:	6339      	str	r1, [r7, #48]	@ 0x30
 800282e:	4649      	mov	r1, r9
 8002830:	414b      	adcs	r3, r1
 8002832:	637b      	str	r3, [r7, #52]	@ 0x34
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002840:	4659      	mov	r1, fp
 8002842:	00cb      	lsls	r3, r1, #3
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284a:	4651      	mov	r1, sl
 800284c:	00ca      	lsls	r2, r1, #3
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	4603      	mov	r3, r0
 8002854:	4642      	mov	r2, r8
 8002856:	189b      	adds	r3, r3, r2
 8002858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800285c:	464b      	mov	r3, r9
 800285e:	460a      	mov	r2, r1
 8002860:	eb42 0303 	adc.w	r3, r2, r3
 8002864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002874:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800287c:	460b      	mov	r3, r1
 800287e:	18db      	adds	r3, r3, r3
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002882:	4613      	mov	r3, r2
 8002884:	eb42 0303 	adc.w	r3, r2, r3
 8002888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800288a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800288e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002892:	f7fd fcc5 	bl	8000220 <__aeabi_uldivmod>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <UART_SetConfig+0x2d4>)
 800289c:	fba3 1302 	umull	r1, r3, r3, r2
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	2164      	movs	r1, #100	@ 0x64
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	3332      	adds	r3, #50	@ 0x32
 80028ae:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <UART_SetConfig+0x2d4>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	f003 0207 	and.w	r2, r3, #7
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4422      	add	r2, r4
 80028c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028c4:	e106      	b.n	8002ad4 <UART_SetConfig+0x4d8>
 80028c6:	bf00      	nop
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40011400 	.word	0x40011400
 80028d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d8:	2200      	movs	r2, #0
 80028da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028e6:	4642      	mov	r2, r8
 80028e8:	464b      	mov	r3, r9
 80028ea:	1891      	adds	r1, r2, r2
 80028ec:	6239      	str	r1, [r7, #32]
 80028ee:	415b      	adcs	r3, r3
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028f6:	4641      	mov	r1, r8
 80028f8:	1854      	adds	r4, r2, r1
 80028fa:	4649      	mov	r1, r9
 80028fc:	eb43 0501 	adc.w	r5, r3, r1
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	00eb      	lsls	r3, r5, #3
 800290a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800290e:	00e2      	lsls	r2, r4, #3
 8002910:	4614      	mov	r4, r2
 8002912:	461d      	mov	r5, r3
 8002914:	4643      	mov	r3, r8
 8002916:	18e3      	adds	r3, r4, r3
 8002918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800291c:	464b      	mov	r3, r9
 800291e:	eb45 0303 	adc.w	r3, r5, r3
 8002922:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002932:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002942:	4629      	mov	r1, r5
 8002944:	008b      	lsls	r3, r1, #2
 8002946:	4621      	mov	r1, r4
 8002948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800294c:	4621      	mov	r1, r4
 800294e:	008a      	lsls	r2, r1, #2
 8002950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002954:	f7fd fc64 	bl	8000220 <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4b60      	ldr	r3, [pc, #384]	@ (8002ae0 <UART_SetConfig+0x4e4>)
 800295e:	fba3 2302 	umull	r2, r3, r3, r2
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	011c      	lsls	r4, r3, #4
 8002966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800296a:	2200      	movs	r2, #0
 800296c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002970:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	1891      	adds	r1, r2, r2
 800297e:	61b9      	str	r1, [r7, #24]
 8002980:	415b      	adcs	r3, r3
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002988:	4641      	mov	r1, r8
 800298a:	1851      	adds	r1, r2, r1
 800298c:	6139      	str	r1, [r7, #16]
 800298e:	4649      	mov	r1, r9
 8002990:	414b      	adcs	r3, r1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a0:	4659      	mov	r1, fp
 80029a2:	00cb      	lsls	r3, r1, #3
 80029a4:	4651      	mov	r1, sl
 80029a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029aa:	4651      	mov	r1, sl
 80029ac:	00ca      	lsls	r2, r1, #3
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	4642      	mov	r2, r8
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029bc:	464b      	mov	r3, r9
 80029be:	460a      	mov	r2, r1
 80029c0:	eb42 0303 	adc.w	r3, r2, r3
 80029c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029e0:	4649      	mov	r1, r9
 80029e2:	008b      	lsls	r3, r1, #2
 80029e4:	4641      	mov	r1, r8
 80029e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ea:	4641      	mov	r1, r8
 80029ec:	008a      	lsls	r2, r1, #2
 80029ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029f2:	f7fd fc15 	bl	8000220 <__aeabi_uldivmod>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	4b38      	ldr	r3, [pc, #224]	@ (8002ae0 <UART_SetConfig+0x4e4>)
 80029fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2264      	movs	r2, #100	@ 0x64
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	1acb      	subs	r3, r1, r3
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	3332      	adds	r3, #50	@ 0x32
 8002a10:	4a33      	ldr	r2, [pc, #204]	@ (8002ae0 <UART_SetConfig+0x4e4>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a1c:	441c      	add	r4, r3
 8002a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a22:	2200      	movs	r2, #0
 8002a24:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a26:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	464b      	mov	r3, r9
 8002a30:	1891      	adds	r1, r2, r2
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	415b      	adcs	r3, r3
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	1851      	adds	r1, r2, r1
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	4649      	mov	r1, r9
 8002a44:	414b      	adcs	r3, r1
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a54:	4659      	mov	r1, fp
 8002a56:	00cb      	lsls	r3, r1, #3
 8002a58:	4651      	mov	r1, sl
 8002a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a5e:	4651      	mov	r1, sl
 8002a60:	00ca      	lsls	r2, r1, #3
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	4642      	mov	r2, r8
 8002a6a:	189b      	adds	r3, r3, r2
 8002a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a6e:	464b      	mov	r3, r9
 8002a70:	460a      	mov	r2, r1
 8002a72:	eb42 0303 	adc.w	r3, r2, r3
 8002a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a82:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a90:	4649      	mov	r1, r9
 8002a92:	008b      	lsls	r3, r1, #2
 8002a94:	4641      	mov	r1, r8
 8002a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	008a      	lsls	r2, r1, #2
 8002a9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002aa2:	f7fd fbbd 	bl	8000220 <__aeabi_uldivmod>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae0 <UART_SetConfig+0x4e4>)
 8002aac:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab0:	095b      	lsrs	r3, r3, #5
 8002ab2:	2164      	movs	r1, #100	@ 0x64
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	3332      	adds	r3, #50	@ 0x32
 8002abe:	4a08      	ldr	r2, [pc, #32]	@ (8002ae0 <UART_SetConfig+0x4e4>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	095b      	lsrs	r3, r3, #5
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4422      	add	r2, r4
 8002ad2:	609a      	str	r2, [r3, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ada:	46bd      	mov	sp, r7
 8002adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae0:	51eb851f 	.word	0x51eb851f

08002ae4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af6:	2b84      	cmp	r3, #132	@ 0x84
 8002af8:	d005      	beq.n	8002b06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002afa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4413      	add	r3, r2
 8002b02:	3303      	adds	r3, #3
 8002b04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b18:	f000 fb8c 	bl	8003234 <vTaskStartScheduler>
  
  return osOK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b24:	b089      	sub	sp, #36	@ 0x24
 8002b26:	af04      	add	r7, sp, #16
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <osThreadCreate+0x54>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01c      	beq.n	8002b76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685c      	ldr	r4, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691e      	ldr	r6, [r3, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ffc8 	bl	8002ae4 <makeFreeRtosPriority>
 8002b54:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b5e:	9202      	str	r2, [sp, #8]
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	9100      	str	r1, [sp, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4632      	mov	r2, r6
 8002b68:	4629      	mov	r1, r5
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f000 f8ed 	bl	8002d4a <xTaskCreateStatic>
 8002b70:	4603      	mov	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e01c      	b.n	8002bb0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685c      	ldr	r4, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b82:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff ffaa 	bl	8002ae4 <makeFreeRtosPriority>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	9200      	str	r2, [sp, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	4632      	mov	r2, r6
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f000 f932 	bl	8002e0a <xTaskCreate>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d001      	beq.n	8002bb0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <osDelay+0x16>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	e000      	b.n	8002bd2 <osDelay+0x18>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 faf8 	bl	80031c8 <vTaskDelay>
  
  return osOK;
 8002bd8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f103 0208 	add.w	r2, r3, #8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bfa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f103 0208 	add.w	r2, r3, #8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f103 0208 	add.w	r2, r3, #8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	601a      	str	r2, [r3, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c9a:	d103      	bne.n	8002ca4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e00c      	b.n	8002cbe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e002      	b.n	8002cb2 <vListInsert+0x2e>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d2f6      	bcs.n	8002cac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	601a      	str	r2, [r3, #0]
}
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6892      	ldr	r2, [r2, #8]
 8002d0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6852      	ldr	r2, [r2, #4]
 8002d16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d103      	bne.n	8002d2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08e      	sub	sp, #56	@ 0x38
 8002d4e:	af04      	add	r7, sp, #16
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	e7fd      	b.n	8002d72 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	61fb      	str	r3, [r7, #28]
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d94:	23a0      	movs	r3, #160	@ 0xa0
 8002d96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d9c:	d00b      	beq.n	8002db6 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	61bb      	str	r3, [r7, #24]
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	e7fd      	b.n	8002db2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002db6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01e      	beq.n	8002dfc <xTaskCreateStatic+0xb2>
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dcc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9303      	str	r3, [sp, #12]
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f850 	bl	8002e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002df4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002df6:	f000 f8ed 	bl	8002fd4 <prvAddNewTaskToReadyList>
 8002dfa:	e001      	b.n	8002e00 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e00:	697b      	ldr	r3, [r7, #20]
	}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3728      	adds	r7, #40	@ 0x28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b08c      	sub	sp, #48	@ 0x30
 8002e0e:	af04      	add	r7, sp, #16
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 ff92 	bl	8003d48 <pvPortMalloc>
 8002e24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e2c:	20a0      	movs	r0, #160	@ 0xa0
 8002e2e:	f000 ff8b 	bl	8003d48 <pvPortMalloc>
 8002e32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e40:	e005      	b.n	8002e4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f001 f84e 	bl	8003ee4 <vPortFree>
 8002e48:	e001      	b.n	8002e4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d017      	beq.n	8002e84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e5c:	88fa      	ldrh	r2, [r7, #6]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9303      	str	r3, [sp, #12]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	9302      	str	r3, [sp, #8]
 8002e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f80e 	bl	8002e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e78:	69f8      	ldr	r0, [r7, #28]
 8002e7a:	f000 f8ab 	bl	8002fd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e002      	b.n	8002e8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002eac:	3b01      	subs	r3, #1
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f023 0307 	bic.w	r3, r3, #7
 8002eba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	617b      	str	r3, [r7, #20]
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	e7fd      	b.n	8002eda <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01f      	beq.n	8002f24 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	e012      	b.n	8002f10 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4413      	add	r3, r2
 8002ef0:	7819      	ldrb	r1, [r3, #0]
 8002ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3334      	adds	r3, #52	@ 0x34
 8002efa:	460a      	mov	r2, r1
 8002efc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	d9e9      	bls.n	8002eea <prvInitialiseNewTask+0x56>
 8002f16:	e000      	b.n	8002f1a <prvInitialiseNewTask+0x86>
			{
				break;
 8002f18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f22:	e003      	b.n	8002f2c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d901      	bls.n	8002f36 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f32:	2306      	movs	r3, #6
 8002f34:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f44:	2200      	movs	r2, #0
 8002f46:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fe68 	bl	8002c22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	3318      	adds	r3, #24
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fe63 	bl	8002c22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f64:	f1c3 0207 	rsb	r2, r3, #7
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	334c      	adds	r3, #76	@ 0x4c
 8002f86:	224c      	movs	r2, #76	@ 0x4c
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 f8ca 	bl	8004124 <memset>
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc8 <prvInitialiseNewTask+0x134>)
 8002f94:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	4a0c      	ldr	r2, [pc, #48]	@ (8002fcc <prvInitialiseNewTask+0x138>)
 8002f9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd0 <prvInitialiseNewTask+0x13c>)
 8002fa0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	68f9      	ldr	r1, [r7, #12]
 8002fa6:	69b8      	ldr	r0, [r7, #24]
 8002fa8:	f000 fcba 	bl	8003920 <pxPortInitialiseStack>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fbe:	bf00      	nop
 8002fc0:	3720      	adds	r7, #32
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20004150 	.word	0x20004150
 8002fcc:	200041b8 	.word	0x200041b8
 8002fd0:	20004220 	.word	0x20004220

08002fd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fdc:	f000 fdd4 	bl	8003b88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800308c <prvAddNewTaskToReadyList+0xb8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	4a29      	ldr	r2, [pc, #164]	@ (800308c <prvAddNewTaskToReadyList+0xb8>)
 8002fe8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fea:	4b29      	ldr	r3, [pc, #164]	@ (8003090 <prvAddNewTaskToReadyList+0xbc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ff2:	4a27      	ldr	r2, [pc, #156]	@ (8003090 <prvAddNewTaskToReadyList+0xbc>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ff8:	4b24      	ldr	r3, [pc, #144]	@ (800308c <prvAddNewTaskToReadyList+0xb8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d110      	bne.n	8003022 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003000:	f000 fb64 	bl	80036cc <prvInitialiseTaskLists>
 8003004:	e00d      	b.n	8003022 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003006:	4b23      	ldr	r3, [pc, #140]	@ (8003094 <prvAddNewTaskToReadyList+0xc0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d109      	bne.n	8003022 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800300e:	4b20      	ldr	r3, [pc, #128]	@ (8003090 <prvAddNewTaskToReadyList+0xbc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	429a      	cmp	r2, r3
 800301a:	d802      	bhi.n	8003022 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800301c:	4a1c      	ldr	r2, [pc, #112]	@ (8003090 <prvAddNewTaskToReadyList+0xbc>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003022:	4b1d      	ldr	r3, [pc, #116]	@ (8003098 <prvAddNewTaskToReadyList+0xc4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	4a1b      	ldr	r2, [pc, #108]	@ (8003098 <prvAddNewTaskToReadyList+0xc4>)
 800302a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	2201      	movs	r2, #1
 8003032:	409a      	lsls	r2, r3
 8003034:	4b19      	ldr	r3, [pc, #100]	@ (800309c <prvAddNewTaskToReadyList+0xc8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4313      	orrs	r3, r2
 800303a:	4a18      	ldr	r2, [pc, #96]	@ (800309c <prvAddNewTaskToReadyList+0xc8>)
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4a15      	ldr	r2, [pc, #84]	@ (80030a0 <prvAddNewTaskToReadyList+0xcc>)
 800304c:	441a      	add	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	4619      	mov	r1, r3
 8003054:	4610      	mov	r0, r2
 8003056:	f7ff fdf1 	bl	8002c3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800305a:	f000 fdc7 	bl	8003bec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800305e:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <prvAddNewTaskToReadyList+0xc0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00e      	beq.n	8003084 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003066:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <prvAddNewTaskToReadyList+0xbc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	429a      	cmp	r2, r3
 8003072:	d207      	bcs.n	8003084 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <prvAddNewTaskToReadyList+0xd0>)
 8003076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200004fc 	.word	0x200004fc
 8003090:	200003fc 	.word	0x200003fc
 8003094:	20000508 	.word	0x20000508
 8003098:	20000518 	.word	0x20000518
 800309c:	20000504 	.word	0x20000504
 80030a0:	20000400 	.word	0x20000400
 80030a4:	e000ed04 	.word	0xe000ed04

080030a8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80030b0:	f000 fd6a 	bl	8003b88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <vTaskDelete+0x18>
 80030ba:	4b39      	ldr	r3, [pc, #228]	@ (80031a0 <vTaskDelete+0xf8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	e000      	b.n	80030c2 <vTaskDelete+0x1a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fe14 	bl	8002cf6 <uxListRemove>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d115      	bne.n	8003100 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d8:	4932      	ldr	r1, [pc, #200]	@ (80031a4 <vTaskDelete+0xfc>)
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <vTaskDelete+0x58>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	2201      	movs	r2, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43da      	mvns	r2, r3
 80030f6:	4b2c      	ldr	r3, [pc, #176]	@ (80031a8 <vTaskDelete+0x100>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4013      	ands	r3, r2
 80030fc:	4a2a      	ldr	r2, [pc, #168]	@ (80031a8 <vTaskDelete+0x100>)
 80030fe:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3318      	adds	r3, #24
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fdf2 	bl	8002cf6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003112:	4b26      	ldr	r3, [pc, #152]	@ (80031ac <vTaskDelete+0x104>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	4a24      	ldr	r2, [pc, #144]	@ (80031ac <vTaskDelete+0x104>)
 800311a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800311c:	4b20      	ldr	r3, [pc, #128]	@ (80031a0 <vTaskDelete+0xf8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	429a      	cmp	r2, r3
 8003124:	d10b      	bne.n	800313e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3304      	adds	r3, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4820      	ldr	r0, [pc, #128]	@ (80031b0 <vTaskDelete+0x108>)
 800312e:	f7ff fd85 	bl	8002c3c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003132:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <vTaskDelete+0x10c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	4a1e      	ldr	r2, [pc, #120]	@ (80031b4 <vTaskDelete+0x10c>)
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e009      	b.n	8003152 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800313e:	4b1e      	ldr	r3, [pc, #120]	@ (80031b8 <vTaskDelete+0x110>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3b01      	subs	r3, #1
 8003144:	4a1c      	ldr	r2, [pc, #112]	@ (80031b8 <vTaskDelete+0x110>)
 8003146:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fb2d 	bl	80037a8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800314e:	f000 fb61 	bl	8003814 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003152:	f000 fd4b 	bl	8003bec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003156:	4b19      	ldr	r3, [pc, #100]	@ (80031bc <vTaskDelete+0x114>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01c      	beq.n	8003198 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800315e:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <vTaskDelete+0xf8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	429a      	cmp	r2, r3
 8003166:	d117      	bne.n	8003198 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003168:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <vTaskDelete+0x118>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00b      	beq.n	8003188 <vTaskDelete+0xe0>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	60bb      	str	r3, [r7, #8]
}
 8003182:	bf00      	nop
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003188:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <vTaskDelete+0x11c>)
 800318a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200003fc 	.word	0x200003fc
 80031a4:	20000400 	.word	0x20000400
 80031a8:	20000504 	.word	0x20000504
 80031ac:	20000518 	.word	0x20000518
 80031b0:	200004d0 	.word	0x200004d0
 80031b4:	200004e4 	.word	0x200004e4
 80031b8:	200004fc 	.word	0x200004fc
 80031bc:	20000508 	.word	0x20000508
 80031c0:	20000524 	.word	0x20000524
 80031c4:	e000ed04 	.word	0xe000ed04

080031c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d018      	beq.n	800320c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031da:	4b14      	ldr	r3, [pc, #80]	@ (800322c <vTaskDelay+0x64>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <vTaskDelay+0x32>
	__asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	60bb      	str	r3, [r7, #8]
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	e7fd      	b.n	80031f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80031fa:	f000 f885 	bl	8003308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031fe:	2100      	movs	r1, #0
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fb27 	bl	8003854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003206:	f000 f88d 	bl	8003324 <xTaskResumeAll>
 800320a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <vTaskDelay+0x68>)
 8003214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000524 	.word	0x20000524
 8003230:	e000ed04 	.word	0xe000ed04

08003234 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	@ 0x28
 8003238:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003242:	463a      	mov	r2, r7
 8003244:	1d39      	adds	r1, r7, #4
 8003246:	f107 0308 	add.w	r3, r7, #8
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f960 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003250:	6839      	ldr	r1, [r7, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	9202      	str	r2, [sp, #8]
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	2300      	movs	r3, #0
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	460a      	mov	r2, r1
 8003262:	4921      	ldr	r1, [pc, #132]	@ (80032e8 <vTaskStartScheduler+0xb4>)
 8003264:	4821      	ldr	r0, [pc, #132]	@ (80032ec <vTaskStartScheduler+0xb8>)
 8003266:	f7ff fd70 	bl	8002d4a <xTaskCreateStatic>
 800326a:	4603      	mov	r3, r0
 800326c:	4a20      	ldr	r2, [pc, #128]	@ (80032f0 <vTaskStartScheduler+0xbc>)
 800326e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003270:	4b1f      	ldr	r3, [pc, #124]	@ (80032f0 <vTaskStartScheduler+0xbc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003278:	2301      	movs	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	e001      	b.n	8003282 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d11b      	bne.n	80032c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	613b      	str	r3, [r7, #16]
}
 800329a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800329c:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <vTaskStartScheduler+0xc0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	334c      	adds	r3, #76	@ 0x4c
 80032a2:	4a15      	ldr	r2, [pc, #84]	@ (80032f8 <vTaskStartScheduler+0xc4>)
 80032a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <vTaskStartScheduler+0xc8>)
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032ae:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <vTaskStartScheduler+0xcc>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032b4:	4b13      	ldr	r3, [pc, #76]	@ (8003304 <vTaskStartScheduler+0xd0>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032ba:	f000 fbc1 	bl	8003a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032be:	e00f      	b.n	80032e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032c6:	d10b      	bne.n	80032e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	60fb      	str	r3, [r7, #12]
}
 80032da:	bf00      	nop
 80032dc:	bf00      	nop
 80032de:	e7fd      	b.n	80032dc <vTaskStartScheduler+0xa8>
}
 80032e0:	bf00      	nop
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	08004344 	.word	0x08004344
 80032ec:	0800369d 	.word	0x0800369d
 80032f0:	20000520 	.word	0x20000520
 80032f4:	200003fc 	.word	0x200003fc
 80032f8:	20000010 	.word	0x20000010
 80032fc:	2000051c 	.word	0x2000051c
 8003300:	20000508 	.word	0x20000508
 8003304:	20000500 	.word	0x20000500

08003308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800330c:	4b04      	ldr	r3, [pc, #16]	@ (8003320 <vTaskSuspendAll+0x18>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	4a03      	ldr	r2, [pc, #12]	@ (8003320 <vTaskSuspendAll+0x18>)
 8003314:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003316:	bf00      	nop
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	20000524 	.word	0x20000524

08003324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003332:	4b42      	ldr	r3, [pc, #264]	@ (800343c <xTaskResumeAll+0x118>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10b      	bne.n	8003352 <xTaskResumeAll+0x2e>
	__asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	603b      	str	r3, [r7, #0]
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	e7fd      	b.n	800334e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003352:	f000 fc19 	bl	8003b88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003356:	4b39      	ldr	r3, [pc, #228]	@ (800343c <xTaskResumeAll+0x118>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3b01      	subs	r3, #1
 800335c:	4a37      	ldr	r2, [pc, #220]	@ (800343c <xTaskResumeAll+0x118>)
 800335e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003360:	4b36      	ldr	r3, [pc, #216]	@ (800343c <xTaskResumeAll+0x118>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d161      	bne.n	800342c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003368:	4b35      	ldr	r3, [pc, #212]	@ (8003440 <xTaskResumeAll+0x11c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d05d      	beq.n	800342c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003370:	e02e      	b.n	80033d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003372:	4b34      	ldr	r3, [pc, #208]	@ (8003444 <xTaskResumeAll+0x120>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3318      	adds	r3, #24
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fcb9 	bl	8002cf6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3304      	adds	r3, #4
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fcb4 	bl	8002cf6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003392:	2201      	movs	r2, #1
 8003394:	409a      	lsls	r2, r3
 8003396:	4b2c      	ldr	r3, [pc, #176]	@ (8003448 <xTaskResumeAll+0x124>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	4a2a      	ldr	r2, [pc, #168]	@ (8003448 <xTaskResumeAll+0x124>)
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4a27      	ldr	r2, [pc, #156]	@ (800344c <xTaskResumeAll+0x128>)
 80033ae:	441a      	add	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f7ff fc40 	bl	8002c3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c0:	4b23      	ldr	r3, [pc, #140]	@ (8003450 <xTaskResumeAll+0x12c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80033ca:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <xTaskResumeAll+0x130>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003444 <xTaskResumeAll+0x120>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1cc      	bne.n	8003372 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033de:	f000 fa19 	bl	8003814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003458 <xTaskResumeAll+0x134>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033ee:	f000 f837 	bl	8003460 <xTaskIncrementTick>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80033f8:	4b16      	ldr	r3, [pc, #88]	@ (8003454 <xTaskResumeAll+0x130>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3b01      	subs	r3, #1
 8003402:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f1      	bne.n	80033ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800340a:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <xTaskResumeAll+0x134>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003410:	4b10      	ldr	r3, [pc, #64]	@ (8003454 <xTaskResumeAll+0x130>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800341c:	4b0f      	ldr	r3, [pc, #60]	@ (800345c <xTaskResumeAll+0x138>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800342c:	f000 fbde 	bl	8003bec <vPortExitCritical>

	return xAlreadyYielded;
 8003430:	68bb      	ldr	r3, [r7, #8]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000524 	.word	0x20000524
 8003440:	200004fc 	.word	0x200004fc
 8003444:	200004bc 	.word	0x200004bc
 8003448:	20000504 	.word	0x20000504
 800344c:	20000400 	.word	0x20000400
 8003450:	200003fc 	.word	0x200003fc
 8003454:	20000510 	.word	0x20000510
 8003458:	2000050c 	.word	0x2000050c
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800346a:	4b4f      	ldr	r3, [pc, #316]	@ (80035a8 <xTaskIncrementTick+0x148>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f040 808f 	bne.w	8003592 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003474:	4b4d      	ldr	r3, [pc, #308]	@ (80035ac <xTaskIncrementTick+0x14c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800347c:	4a4b      	ldr	r2, [pc, #300]	@ (80035ac <xTaskIncrementTick+0x14c>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d121      	bne.n	80034cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003488:	4b49      	ldr	r3, [pc, #292]	@ (80035b0 <xTaskIncrementTick+0x150>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	603b      	str	r3, [r7, #0]
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	e7fd      	b.n	80034a6 <xTaskIncrementTick+0x46>
 80034aa:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <xTaskIncrementTick+0x150>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	4b40      	ldr	r3, [pc, #256]	@ (80035b4 <xTaskIncrementTick+0x154>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a3e      	ldr	r2, [pc, #248]	@ (80035b0 <xTaskIncrementTick+0x150>)
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4a3e      	ldr	r2, [pc, #248]	@ (80035b4 <xTaskIncrementTick+0x154>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b3e      	ldr	r3, [pc, #248]	@ (80035b8 <xTaskIncrementTick+0x158>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3301      	adds	r3, #1
 80034c4:	4a3c      	ldr	r2, [pc, #240]	@ (80035b8 <xTaskIncrementTick+0x158>)
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	f000 f9a4 	bl	8003814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034cc:	4b3b      	ldr	r3, [pc, #236]	@ (80035bc <xTaskIncrementTick+0x15c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d348      	bcc.n	8003568 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d6:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <xTaskIncrementTick+0x150>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e0:	4b36      	ldr	r3, [pc, #216]	@ (80035bc <xTaskIncrementTick+0x15c>)
 80034e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034e6:	601a      	str	r2, [r3, #0]
					break;
 80034e8:	e03e      	b.n	8003568 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034ea:	4b31      	ldr	r3, [pc, #196]	@ (80035b0 <xTaskIncrementTick+0x150>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d203      	bcs.n	800350a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003502:	4a2e      	ldr	r2, [pc, #184]	@ (80035bc <xTaskIncrementTick+0x15c>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003508:	e02e      	b.n	8003568 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3304      	adds	r3, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fbf1 	bl	8002cf6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	3318      	adds	r3, #24
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fbe8 	bl	8002cf6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352a:	2201      	movs	r2, #1
 800352c:	409a      	lsls	r2, r3
 800352e:	4b24      	ldr	r3, [pc, #144]	@ (80035c0 <xTaskIncrementTick+0x160>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	4a22      	ldr	r2, [pc, #136]	@ (80035c0 <xTaskIncrementTick+0x160>)
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4a1f      	ldr	r2, [pc, #124]	@ (80035c4 <xTaskIncrementTick+0x164>)
 8003546:	441a      	add	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7ff fb74 	bl	8002c3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003558:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <xTaskIncrementTick+0x168>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	429a      	cmp	r2, r3
 8003560:	d3b9      	bcc.n	80034d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003562:	2301      	movs	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003566:	e7b6      	b.n	80034d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003568:	4b17      	ldr	r3, [pc, #92]	@ (80035c8 <xTaskIncrementTick+0x168>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356e:	4915      	ldr	r1, [pc, #84]	@ (80035c4 <xTaskIncrementTick+0x164>)
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d901      	bls.n	8003584 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003580:	2301      	movs	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003584:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <xTaskIncrementTick+0x16c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	e004      	b.n	800359c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003592:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <xTaskIncrementTick+0x170>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	4a0d      	ldr	r2, [pc, #52]	@ (80035d0 <xTaskIncrementTick+0x170>)
 800359a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800359c:	697b      	ldr	r3, [r7, #20]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000524 	.word	0x20000524
 80035ac:	20000500 	.word	0x20000500
 80035b0:	200004b4 	.word	0x200004b4
 80035b4:	200004b8 	.word	0x200004b8
 80035b8:	20000514 	.word	0x20000514
 80035bc:	2000051c 	.word	0x2000051c
 80035c0:	20000504 	.word	0x20000504
 80035c4:	20000400 	.word	0x20000400
 80035c8:	200003fc 	.word	0x200003fc
 80035cc:	20000510 	.word	0x20000510
 80035d0:	2000050c 	.word	0x2000050c

080035d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035da:	4b2a      	ldr	r3, [pc, #168]	@ (8003684 <vTaskSwitchContext+0xb0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035e2:	4b29      	ldr	r3, [pc, #164]	@ (8003688 <vTaskSwitchContext+0xb4>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035e8:	e045      	b.n	8003676 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80035ea:	4b27      	ldr	r3, [pc, #156]	@ (8003688 <vTaskSwitchContext+0xb4>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f0:	4b26      	ldr	r3, [pc, #152]	@ (800368c <vTaskSwitchContext+0xb8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80035fe:	7afb      	ldrb	r3, [r7, #11]
 8003600:	f1c3 031f 	rsb	r3, r3, #31
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	4922      	ldr	r1, [pc, #136]	@ (8003690 <vTaskSwitchContext+0xbc>)
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <vTaskSwitchContext+0x5e>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	607b      	str	r3, [r7, #4]
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	e7fd      	b.n	800362e <vTaskSwitchContext+0x5a>
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4a14      	ldr	r2, [pc, #80]	@ (8003690 <vTaskSwitchContext+0xbc>)
 800363e:	4413      	add	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	3308      	adds	r3, #8
 8003654:	429a      	cmp	r2, r3
 8003656:	d104      	bne.n	8003662 <vTaskSwitchContext+0x8e>
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4a0a      	ldr	r2, [pc, #40]	@ (8003694 <vTaskSwitchContext+0xc0>)
 800366a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800366c:	4b09      	ldr	r3, [pc, #36]	@ (8003694 <vTaskSwitchContext+0xc0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	334c      	adds	r3, #76	@ 0x4c
 8003672:	4a09      	ldr	r2, [pc, #36]	@ (8003698 <vTaskSwitchContext+0xc4>)
 8003674:	6013      	str	r3, [r2, #0]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000524 	.word	0x20000524
 8003688:	20000510 	.word	0x20000510
 800368c:	20000504 	.word	0x20000504
 8003690:	20000400 	.word	0x20000400
 8003694:	200003fc 	.word	0x200003fc
 8003698:	20000010 	.word	0x20000010

0800369c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036a4:	f000 f852 	bl	800374c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036a8:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <prvIdleTask+0x28>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d9f9      	bls.n	80036a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <prvIdleTask+0x2c>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036c0:	e7f0      	b.n	80036a4 <prvIdleTask+0x8>
 80036c2:	bf00      	nop
 80036c4:	20000400 	.word	0x20000400
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	e00c      	b.n	80036f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4a12      	ldr	r2, [pc, #72]	@ (800372c <prvInitialiseTaskLists+0x60>)
 80036e4:	4413      	add	r3, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fa7b 	bl	8002be2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3301      	adds	r3, #1
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d9ef      	bls.n	80036d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036f8:	480d      	ldr	r0, [pc, #52]	@ (8003730 <prvInitialiseTaskLists+0x64>)
 80036fa:	f7ff fa72 	bl	8002be2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036fe:	480d      	ldr	r0, [pc, #52]	@ (8003734 <prvInitialiseTaskLists+0x68>)
 8003700:	f7ff fa6f 	bl	8002be2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003704:	480c      	ldr	r0, [pc, #48]	@ (8003738 <prvInitialiseTaskLists+0x6c>)
 8003706:	f7ff fa6c 	bl	8002be2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800370a:	480c      	ldr	r0, [pc, #48]	@ (800373c <prvInitialiseTaskLists+0x70>)
 800370c:	f7ff fa69 	bl	8002be2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003710:	480b      	ldr	r0, [pc, #44]	@ (8003740 <prvInitialiseTaskLists+0x74>)
 8003712:	f7ff fa66 	bl	8002be2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003716:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <prvInitialiseTaskLists+0x78>)
 8003718:	4a05      	ldr	r2, [pc, #20]	@ (8003730 <prvInitialiseTaskLists+0x64>)
 800371a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800371c:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <prvInitialiseTaskLists+0x7c>)
 800371e:	4a05      	ldr	r2, [pc, #20]	@ (8003734 <prvInitialiseTaskLists+0x68>)
 8003720:	601a      	str	r2, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000400 	.word	0x20000400
 8003730:	2000048c 	.word	0x2000048c
 8003734:	200004a0 	.word	0x200004a0
 8003738:	200004bc 	.word	0x200004bc
 800373c:	200004d0 	.word	0x200004d0
 8003740:	200004e8 	.word	0x200004e8
 8003744:	200004b4 	.word	0x200004b4
 8003748:	200004b8 	.word	0x200004b8

0800374c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003752:	e019      	b.n	8003788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003754:	f000 fa18 	bl	8003b88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003758:	4b10      	ldr	r3, [pc, #64]	@ (800379c <prvCheckTasksWaitingTermination+0x50>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fac6 	bl	8002cf6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <prvCheckTasksWaitingTermination+0x54>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3b01      	subs	r3, #1
 8003770:	4a0b      	ldr	r2, [pc, #44]	@ (80037a0 <prvCheckTasksWaitingTermination+0x54>)
 8003772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003774:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <prvCheckTasksWaitingTermination+0x58>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3b01      	subs	r3, #1
 800377a:	4a0a      	ldr	r2, [pc, #40]	@ (80037a4 <prvCheckTasksWaitingTermination+0x58>)
 800377c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800377e:	f000 fa35 	bl	8003bec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f810 	bl	80037a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <prvCheckTasksWaitingTermination+0x58>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e1      	bne.n	8003754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200004d0 	.word	0x200004d0
 80037a0:	200004fc 	.word	0x200004fc
 80037a4:	200004e4 	.word	0x200004e4

080037a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	334c      	adds	r3, #76	@ 0x4c
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fcbd 	bl	8004134 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d108      	bne.n	80037d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fb8b 	bl	8003ee4 <vPortFree>
				vPortFree( pxTCB );
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fb88 	bl	8003ee4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037d4:	e019      	b.n	800380a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d103      	bne.n	80037e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fb7f 	bl	8003ee4 <vPortFree>
	}
 80037e6:	e010      	b.n	800380a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d00b      	beq.n	800380a <prvDeleteTCB+0x62>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	60fb      	str	r3, [r7, #12]
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	e7fd      	b.n	8003806 <prvDeleteTCB+0x5e>
	}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800381a:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <prvResetNextTaskUnblockTime+0x38>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003824:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <prvResetNextTaskUnblockTime+0x3c>)
 8003826:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800382a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800382c:	e008      	b.n	8003840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800382e:	4b07      	ldr	r3, [pc, #28]	@ (800384c <prvResetNextTaskUnblockTime+0x38>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <prvResetNextTaskUnblockTime+0x3c>)
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	200004b4 	.word	0x200004b4
 8003850:	2000051c 	.word	0x2000051c

08003854 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800385e:	4b29      	ldr	r3, [pc, #164]	@ (8003904 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003864:	4b28      	ldr	r3, [pc, #160]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fa43 	bl	8002cf6 <uxListRemove>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003876:	4b24      	ldr	r3, [pc, #144]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	2201      	movs	r2, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	4b21      	ldr	r3, [pc, #132]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4013      	ands	r3, r2
 800388a:	4a20      	ldr	r2, [pc, #128]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb8>)
 800388c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003894:	d10a      	bne.n	80038ac <prvAddCurrentTaskToDelayedList+0x58>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800389c:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	481a      	ldr	r0, [pc, #104]	@ (8003910 <prvAddCurrentTaskToDelayedList+0xbc>)
 80038a6:	f7ff f9c9 	bl	8002c3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038aa:	e026      	b.n	80038fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038b4:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d209      	bcs.n	80038d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7ff f9d7 	bl	8002c84 <vListInsert>
}
 80038d6:	e010      	b.n	80038fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <prvAddCurrentTaskToDelayedList+0xc4>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3304      	adds	r3, #4
 80038e2:	4619      	mov	r1, r3
 80038e4:	4610      	mov	r0, r2
 80038e6:	f7ff f9cd 	bl	8002c84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038ea:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <prvAddCurrentTaskToDelayedList+0xc8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d202      	bcs.n	80038fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80038f4:	4a09      	ldr	r2, [pc, #36]	@ (800391c <prvAddCurrentTaskToDelayedList+0xc8>)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6013      	str	r3, [r2, #0]
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000500 	.word	0x20000500
 8003908:	200003fc 	.word	0x200003fc
 800390c:	20000504 	.word	0x20000504
 8003910:	200004e8 	.word	0x200004e8
 8003914:	200004b8 	.word	0x200004b8
 8003918:	200004b4 	.word	0x200004b4
 800391c:	2000051c 	.word	0x2000051c

08003920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b04      	subs	r3, #4
 8003930:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3b04      	subs	r3, #4
 800393e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f023 0201 	bic.w	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3b04      	subs	r3, #4
 800394e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003950:	4a0c      	ldr	r2, [pc, #48]	@ (8003984 <pxPortInitialiseStack+0x64>)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3b14      	subs	r3, #20
 800395a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3b04      	subs	r3, #4
 8003966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f06f 0202 	mvn.w	r2, #2
 800396e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3b20      	subs	r3, #32
 8003974:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003976:	68fb      	ldr	r3, [r7, #12]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	08003989 	.word	0x08003989

08003988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003992:	4b13      	ldr	r3, [pc, #76]	@ (80039e0 <prvTaskExitError+0x58>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800399a:	d00b      	beq.n	80039b4 <prvTaskExitError+0x2c>
	__asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	60fb      	str	r3, [r7, #12]
}
 80039ae:	bf00      	nop
 80039b0:	bf00      	nop
 80039b2:	e7fd      	b.n	80039b0 <prvTaskExitError+0x28>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60bb      	str	r3, [r7, #8]
}
 80039c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039c8:	bf00      	nop
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0fc      	beq.n	80039ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	2000000c 	.word	0x2000000c
	...

080039f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039f0:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <pxCurrentTCBConst2>)
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	6808      	ldr	r0, [r1, #0]
 80039f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fa:	f380 8809 	msr	PSP, r0
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f380 8811 	msr	BASEPRI, r0
 8003a0a:	4770      	bx	lr
 8003a0c:	f3af 8000 	nop.w

08003a10 <pxCurrentTCBConst2>:
 8003a10:	200003fc 	.word	0x200003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop

08003a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a18:	4808      	ldr	r0, [pc, #32]	@ (8003a3c <prvPortStartFirstTask+0x24>)
 8003a1a:	6800      	ldr	r0, [r0, #0]
 8003a1c:	6800      	ldr	r0, [r0, #0]
 8003a1e:	f380 8808 	msr	MSP, r0
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	f380 8814 	msr	CONTROL, r0
 8003a2a:	b662      	cpsie	i
 8003a2c:	b661      	cpsie	f
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	df00      	svc	0
 8003a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a3a:	bf00      	nop
 8003a3c:	e000ed08 	.word	0xe000ed08

08003a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a46:	4b47      	ldr	r3, [pc, #284]	@ (8003b64 <xPortStartScheduler+0x124>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a47      	ldr	r2, [pc, #284]	@ (8003b68 <xPortStartScheduler+0x128>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10b      	bne.n	8003a68 <xPortStartScheduler+0x28>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	613b      	str	r3, [r7, #16]
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	e7fd      	b.n	8003a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a68:	4b3e      	ldr	r3, [pc, #248]	@ (8003b64 <xPortStartScheduler+0x124>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8003b6c <xPortStartScheduler+0x12c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10b      	bne.n	8003a8a <xPortStartScheduler+0x4a>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	60fb      	str	r3, [r7, #12]
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	e7fd      	b.n	8003a86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a8a:	4b39      	ldr	r3, [pc, #228]	@ (8003b70 <xPortStartScheduler+0x130>)
 8003a8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	22ff      	movs	r2, #255	@ 0xff
 8003a9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4b31      	ldr	r3, [pc, #196]	@ (8003b74 <xPortStartScheduler+0x134>)
 8003ab0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ab2:	4b31      	ldr	r3, [pc, #196]	@ (8003b78 <xPortStartScheduler+0x138>)
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ab8:	e009      	b.n	8003ace <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003aba:	4b2f      	ldr	r3, [pc, #188]	@ (8003b78 <xPortStartScheduler+0x138>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <xPortStartScheduler+0x138>)
 8003ac2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad6:	2b80      	cmp	r3, #128	@ 0x80
 8003ad8:	d0ef      	beq.n	8003aba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ada:	4b27      	ldr	r3, [pc, #156]	@ (8003b78 <xPortStartScheduler+0x138>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1c3 0307 	rsb	r3, r3, #7
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d00b      	beq.n	8003afe <xPortStartScheduler+0xbe>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	60bb      	str	r3, [r7, #8]
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	e7fd      	b.n	8003afa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003afe:	4b1e      	ldr	r3, [pc, #120]	@ (8003b78 <xPortStartScheduler+0x138>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	4a1c      	ldr	r2, [pc, #112]	@ (8003b78 <xPortStartScheduler+0x138>)
 8003b06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b08:	4b1b      	ldr	r3, [pc, #108]	@ (8003b78 <xPortStartScheduler+0x138>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b10:	4a19      	ldr	r2, [pc, #100]	@ (8003b78 <xPortStartScheduler+0x138>)
 8003b12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b1c:	4b17      	ldr	r3, [pc, #92]	@ (8003b7c <xPortStartScheduler+0x13c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <xPortStartScheduler+0x13c>)
 8003b22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b28:	4b14      	ldr	r3, [pc, #80]	@ (8003b7c <xPortStartScheduler+0x13c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a13      	ldr	r2, [pc, #76]	@ (8003b7c <xPortStartScheduler+0x13c>)
 8003b2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003b32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b34:	f000 f8da 	bl	8003cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b38:	4b11      	ldr	r3, [pc, #68]	@ (8003b80 <xPortStartScheduler+0x140>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b3e:	f000 f8f9 	bl	8003d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <xPortStartScheduler+0x144>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a0f      	ldr	r2, [pc, #60]	@ (8003b84 <xPortStartScheduler+0x144>)
 8003b48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003b4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b4e:	f7ff ff63 	bl	8003a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b52:	f7ff fd3f 	bl	80035d4 <vTaskSwitchContext>
	prvTaskExitError();
 8003b56:	f7ff ff17 	bl	8003988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	e000ed00 	.word	0xe000ed00
 8003b68:	410fc271 	.word	0x410fc271
 8003b6c:	410fc270 	.word	0x410fc270
 8003b70:	e000e400 	.word	0xe000e400
 8003b74:	20000528 	.word	0x20000528
 8003b78:	2000052c 	.word	0x2000052c
 8003b7c:	e000ed20 	.word	0xe000ed20
 8003b80:	2000000c 	.word	0x2000000c
 8003b84:	e000ef34 	.word	0xe000ef34

08003b88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	607b      	str	r3, [r7, #4]
}
 8003ba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <vPortEnterCritical+0x5c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8003be4 <vPortEnterCritical+0x5c>)
 8003baa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003bac:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <vPortEnterCritical+0x5c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d110      	bne.n	8003bd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <vPortEnterCritical+0x60>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	603b      	str	r3, [r7, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	e7fd      	b.n	8003bd2 <vPortEnterCritical+0x4a>
	}
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	2000000c 	.word	0x2000000c
 8003be8:	e000ed04 	.word	0xe000ed04

08003bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bf2:	4b12      	ldr	r3, [pc, #72]	@ (8003c3c <vPortExitCritical+0x50>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <vPortExitCritical+0x26>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	607b      	str	r3, [r7, #4]
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	e7fd      	b.n	8003c0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003c12:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <vPortExitCritical+0x50>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	4a08      	ldr	r2, [pc, #32]	@ (8003c3c <vPortExitCritical+0x50>)
 8003c1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c1c:	4b07      	ldr	r3, [pc, #28]	@ (8003c3c <vPortExitCritical+0x50>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <vPortExitCritical+0x44>
 8003c24:	2300      	movs	r3, #0
 8003c26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	2000000c 	.word	0x2000000c

08003c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c40:	f3ef 8009 	mrs	r0, PSP
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	4b15      	ldr	r3, [pc, #84]	@ (8003ca0 <pxCurrentTCBConst>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f01e 0f10 	tst.w	lr, #16
 8003c50:	bf08      	it	eq
 8003c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5a:	6010      	str	r0, [r2, #0]
 8003c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003c64:	f380 8811 	msr	BASEPRI, r0
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f7ff fcb0 	bl	80035d4 <vTaskSwitchContext>
 8003c74:	f04f 0000 	mov.w	r0, #0
 8003c78:	f380 8811 	msr	BASEPRI, r0
 8003c7c:	bc09      	pop	{r0, r3}
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	6808      	ldr	r0, [r1, #0]
 8003c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c86:	f01e 0f10 	tst.w	lr, #16
 8003c8a:	bf08      	it	eq
 8003c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c90:	f380 8809 	msr	PSP, r0
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	f3af 8000 	nop.w

08003ca0 <pxCurrentTCBConst>:
 8003ca0:	200003fc 	.word	0x200003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop

08003ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	607b      	str	r3, [r7, #4]
}
 8003cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003cc2:	f7ff fbcd 	bl	8003460 <xTaskIncrementTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <SysTick_Handler+0x40>)
 8003cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f383 8811 	msr	BASEPRI, r3
}
 8003cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <vPortSetupTimerInterrupt+0x34>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <vPortSetupTimerInterrupt+0x38>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003d28 <vPortSetupTimerInterrupt+0x3c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	@ (8003d2c <vPortSetupTimerInterrupt+0x40>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	099b      	lsrs	r3, r3, #6
 8003d08:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <vPortSetupTimerInterrupt+0x44>)
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d0e:	4b04      	ldr	r3, [pc, #16]	@ (8003d20 <vPortSetupTimerInterrupt+0x34>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	601a      	str	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000e010 	.word	0xe000e010
 8003d24:	e000e018 	.word	0xe000e018
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	10624dd3 	.word	0x10624dd3
 8003d30:	e000e014 	.word	0xe000e014

08003d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003d44 <vPortEnableVFP+0x10>
 8003d38:	6801      	ldr	r1, [r0, #0]
 8003d3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003d3e:	6001      	str	r1, [r0, #0]
 8003d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d42:	bf00      	nop
 8003d44:	e000ed88 	.word	0xe000ed88

08003d48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	@ 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d54:	f7ff fad8 	bl	8003308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d58:	4b5c      	ldr	r3, [pc, #368]	@ (8003ecc <pvPortMalloc+0x184>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d60:	f000 f924 	bl	8003fac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d64:	4b5a      	ldr	r3, [pc, #360]	@ (8003ed0 <pvPortMalloc+0x188>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f040 8095 	bne.w	8003e9c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01e      	beq.n	8003db6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003d78:	2208      	movs	r2, #8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d015      	beq.n	8003db6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f023 0307 	bic.w	r3, r3, #7
 8003d90:	3308      	adds	r3, #8
 8003d92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <pvPortMalloc+0x6e>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	617b      	str	r3, [r7, #20]
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	e7fd      	b.n	8003db2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d06f      	beq.n	8003e9c <pvPortMalloc+0x154>
 8003dbc:	4b45      	ldr	r3, [pc, #276]	@ (8003ed4 <pvPortMalloc+0x18c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d86a      	bhi.n	8003e9c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003dc6:	4b44      	ldr	r3, [pc, #272]	@ (8003ed8 <pvPortMalloc+0x190>)
 8003dc8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003dca:	4b43      	ldr	r3, [pc, #268]	@ (8003ed8 <pvPortMalloc+0x190>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dd0:	e004      	b.n	8003ddc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d903      	bls.n	8003dee <pvPortMalloc+0xa6>
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f1      	bne.n	8003dd2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003dee:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <pvPortMalloc+0x184>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d051      	beq.n	8003e9c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	4413      	add	r3, r2
 8003e00:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	1ad2      	subs	r2, r2, r3
 8003e12:	2308      	movs	r3, #8
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d920      	bls.n	8003e5c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4413      	add	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <pvPortMalloc+0xfc>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	613b      	str	r3, [r7, #16]
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	e7fd      	b.n	8003e40 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e56:	69b8      	ldr	r0, [r7, #24]
 8003e58:	f000 f90a 	bl	8004070 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <pvPortMalloc+0x18c>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed4 <pvPortMalloc+0x18c>)
 8003e68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed4 <pvPortMalloc+0x18c>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003edc <pvPortMalloc+0x194>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d203      	bcs.n	8003e7e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e76:	4b17      	ldr	r3, [pc, #92]	@ (8003ed4 <pvPortMalloc+0x18c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <pvPortMalloc+0x194>)
 8003e7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	4b13      	ldr	r3, [pc, #76]	@ (8003ed0 <pvPortMalloc+0x188>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e92:	4b13      	ldr	r3, [pc, #76]	@ (8003ee0 <pvPortMalloc+0x198>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3301      	adds	r3, #1
 8003e98:	4a11      	ldr	r2, [pc, #68]	@ (8003ee0 <pvPortMalloc+0x198>)
 8003e9a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e9c:	f7ff fa42 	bl	8003324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <pvPortMalloc+0x17a>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	60fb      	str	r3, [r7, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <pvPortMalloc+0x176>
	return pvReturn;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3728      	adds	r7, #40	@ 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20004138 	.word	0x20004138
 8003ed0:	2000414c 	.word	0x2000414c
 8003ed4:	2000413c 	.word	0x2000413c
 8003ed8:	20004130 	.word	0x20004130
 8003edc:	20004140 	.word	0x20004140
 8003ee0:	20004144 	.word	0x20004144

08003ee4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d04f      	beq.n	8003f96 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	425b      	negs	r3, r3
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4413      	add	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	4b25      	ldr	r3, [pc, #148]	@ (8003fa0 <vPortFree+0xbc>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10b      	bne.n	8003f2a <vPortFree+0x46>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	60fb      	str	r3, [r7, #12]
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	e7fd      	b.n	8003f26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <vPortFree+0x66>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	60bb      	str	r3, [r7, #8]
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	e7fd      	b.n	8003f46 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	4b14      	ldr	r3, [pc, #80]	@ (8003fa0 <vPortFree+0xbc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01e      	beq.n	8003f96 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d11a      	bne.n	8003f96 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <vPortFree+0xbc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f70:	f7ff f9ca 	bl	8003308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa4 <vPortFree+0xc0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	4a09      	ldr	r2, [pc, #36]	@ (8003fa4 <vPortFree+0xc0>)
 8003f80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f82:	6938      	ldr	r0, [r7, #16]
 8003f84:	f000 f874 	bl	8004070 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f88:	4b07      	ldr	r3, [pc, #28]	@ (8003fa8 <vPortFree+0xc4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a06      	ldr	r2, [pc, #24]	@ (8003fa8 <vPortFree+0xc4>)
 8003f90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f92:	f7ff f9c7 	bl	8003324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	2000414c 	.word	0x2000414c
 8003fa4:	2000413c 	.word	0x2000413c
 8003fa8:	20004148 	.word	0x20004148

08003fac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fb2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003fb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fb8:	4b27      	ldr	r3, [pc, #156]	@ (8004058 <prvHeapInit+0xac>)
 8003fba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00c      	beq.n	8003fe0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3307      	adds	r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0307 	bic.w	r3, r3, #7
 8003fd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	4a1f      	ldr	r2, [pc, #124]	@ (8004058 <prvHeapInit+0xac>)
 8003fdc:	4413      	add	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800405c <prvHeapInit+0xb0>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003fea:	4b1c      	ldr	r3, [pc, #112]	@ (800405c <prvHeapInit+0xb0>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0307 	bic.w	r3, r3, #7
 8004006:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4a15      	ldr	r2, [pc, #84]	@ (8004060 <prvHeapInit+0xb4>)
 800400c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800400e:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <prvHeapInit+0xb4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004016:	4b12      	ldr	r3, [pc, #72]	@ (8004060 <prvHeapInit+0xb4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	1ad2      	subs	r2, r2, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800402c:	4b0c      	ldr	r3, [pc, #48]	@ (8004060 <prvHeapInit+0xb4>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a0a      	ldr	r2, [pc, #40]	@ (8004064 <prvHeapInit+0xb8>)
 800403a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4a09      	ldr	r2, [pc, #36]	@ (8004068 <prvHeapInit+0xbc>)
 8004042:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004044:	4b09      	ldr	r3, [pc, #36]	@ (800406c <prvHeapInit+0xc0>)
 8004046:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800404a:	601a      	str	r2, [r3, #0]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	20000530 	.word	0x20000530
 800405c:	20004130 	.word	0x20004130
 8004060:	20004138 	.word	0x20004138
 8004064:	20004140 	.word	0x20004140
 8004068:	2000413c 	.word	0x2000413c
 800406c:	2000414c 	.word	0x2000414c

08004070 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004078:	4b28      	ldr	r3, [pc, #160]	@ (800411c <prvInsertBlockIntoFreeList+0xac>)
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e002      	b.n	8004084 <prvInsertBlockIntoFreeList+0x14>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d8f7      	bhi.n	800407e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	4413      	add	r3, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	d108      	bne.n	80040b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	441a      	add	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	441a      	add	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d118      	bne.n	80040f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <prvInsertBlockIntoFreeList+0xb0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d00d      	beq.n	80040ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	441a      	add	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e008      	b.n	8004100 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <prvInsertBlockIntoFreeList+0xb0>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e003      	b.n	8004100 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d002      	beq.n	800410e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20004130 	.word	0x20004130
 8004120:	20004138 	.word	0x20004138

08004124 <memset>:
 8004124:	4402      	add	r2, r0
 8004126:	4603      	mov	r3, r0
 8004128:	4293      	cmp	r3, r2
 800412a:	d100      	bne.n	800412e <memset+0xa>
 800412c:	4770      	bx	lr
 800412e:	f803 1b01 	strb.w	r1, [r3], #1
 8004132:	e7f9      	b.n	8004128 <memset+0x4>

08004134 <_reclaim_reent>:
 8004134:	4b29      	ldr	r3, [pc, #164]	@ (80041dc <_reclaim_reent+0xa8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4283      	cmp	r3, r0
 800413a:	b570      	push	{r4, r5, r6, lr}
 800413c:	4604      	mov	r4, r0
 800413e:	d04b      	beq.n	80041d8 <_reclaim_reent+0xa4>
 8004140:	69c3      	ldr	r3, [r0, #28]
 8004142:	b1ab      	cbz	r3, 8004170 <_reclaim_reent+0x3c>
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	b16b      	cbz	r3, 8004164 <_reclaim_reent+0x30>
 8004148:	2500      	movs	r5, #0
 800414a:	69e3      	ldr	r3, [r4, #28]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	5959      	ldr	r1, [r3, r5]
 8004150:	2900      	cmp	r1, #0
 8004152:	d13b      	bne.n	80041cc <_reclaim_reent+0x98>
 8004154:	3504      	adds	r5, #4
 8004156:	2d80      	cmp	r5, #128	@ 0x80
 8004158:	d1f7      	bne.n	800414a <_reclaim_reent+0x16>
 800415a:	69e3      	ldr	r3, [r4, #28]
 800415c:	4620      	mov	r0, r4
 800415e:	68d9      	ldr	r1, [r3, #12]
 8004160:	f000 f864 	bl	800422c <_free_r>
 8004164:	69e3      	ldr	r3, [r4, #28]
 8004166:	6819      	ldr	r1, [r3, #0]
 8004168:	b111      	cbz	r1, 8004170 <_reclaim_reent+0x3c>
 800416a:	4620      	mov	r0, r4
 800416c:	f000 f85e 	bl	800422c <_free_r>
 8004170:	6961      	ldr	r1, [r4, #20]
 8004172:	b111      	cbz	r1, 800417a <_reclaim_reent+0x46>
 8004174:	4620      	mov	r0, r4
 8004176:	f000 f859 	bl	800422c <_free_r>
 800417a:	69e1      	ldr	r1, [r4, #28]
 800417c:	b111      	cbz	r1, 8004184 <_reclaim_reent+0x50>
 800417e:	4620      	mov	r0, r4
 8004180:	f000 f854 	bl	800422c <_free_r>
 8004184:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004186:	b111      	cbz	r1, 800418e <_reclaim_reent+0x5a>
 8004188:	4620      	mov	r0, r4
 800418a:	f000 f84f 	bl	800422c <_free_r>
 800418e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004190:	b111      	cbz	r1, 8004198 <_reclaim_reent+0x64>
 8004192:	4620      	mov	r0, r4
 8004194:	f000 f84a 	bl	800422c <_free_r>
 8004198:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800419a:	b111      	cbz	r1, 80041a2 <_reclaim_reent+0x6e>
 800419c:	4620      	mov	r0, r4
 800419e:	f000 f845 	bl	800422c <_free_r>
 80041a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80041a4:	b111      	cbz	r1, 80041ac <_reclaim_reent+0x78>
 80041a6:	4620      	mov	r0, r4
 80041a8:	f000 f840 	bl	800422c <_free_r>
 80041ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80041ae:	b111      	cbz	r1, 80041b6 <_reclaim_reent+0x82>
 80041b0:	4620      	mov	r0, r4
 80041b2:	f000 f83b 	bl	800422c <_free_r>
 80041b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80041b8:	b111      	cbz	r1, 80041c0 <_reclaim_reent+0x8c>
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 f836 	bl	800422c <_free_r>
 80041c0:	6a23      	ldr	r3, [r4, #32]
 80041c2:	b14b      	cbz	r3, 80041d8 <_reclaim_reent+0xa4>
 80041c4:	4620      	mov	r0, r4
 80041c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80041ca:	4718      	bx	r3
 80041cc:	680e      	ldr	r6, [r1, #0]
 80041ce:	4620      	mov	r0, r4
 80041d0:	f000 f82c 	bl	800422c <_free_r>
 80041d4:	4631      	mov	r1, r6
 80041d6:	e7bb      	b.n	8004150 <_reclaim_reent+0x1c>
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
 80041da:	bf00      	nop
 80041dc:	20000010 	.word	0x20000010

080041e0 <__libc_init_array>:
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004218 <__libc_init_array+0x38>)
 80041e4:	4c0d      	ldr	r4, [pc, #52]	@ (800421c <__libc_init_array+0x3c>)
 80041e6:	1b64      	subs	r4, r4, r5
 80041e8:	10a4      	asrs	r4, r4, #2
 80041ea:	2600      	movs	r6, #0
 80041ec:	42a6      	cmp	r6, r4
 80041ee:	d109      	bne.n	8004204 <__libc_init_array+0x24>
 80041f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004220 <__libc_init_array+0x40>)
 80041f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004224 <__libc_init_array+0x44>)
 80041f4:	f000 f870 	bl	80042d8 <_init>
 80041f8:	1b64      	subs	r4, r4, r5
 80041fa:	10a4      	asrs	r4, r4, #2
 80041fc:	2600      	movs	r6, #0
 80041fe:	42a6      	cmp	r6, r4
 8004200:	d105      	bne.n	800420e <__libc_init_array+0x2e>
 8004202:	bd70      	pop	{r4, r5, r6, pc}
 8004204:	f855 3b04 	ldr.w	r3, [r5], #4
 8004208:	4798      	blx	r3
 800420a:	3601      	adds	r6, #1
 800420c:	e7ee      	b.n	80041ec <__libc_init_array+0xc>
 800420e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004212:	4798      	blx	r3
 8004214:	3601      	adds	r6, #1
 8004216:	e7f2      	b.n	80041fe <__libc_init_array+0x1e>
 8004218:	0800436c 	.word	0x0800436c
 800421c:	0800436c 	.word	0x0800436c
 8004220:	0800436c 	.word	0x0800436c
 8004224:	08004370 	.word	0x08004370

08004228 <__retarget_lock_acquire_recursive>:
 8004228:	4770      	bx	lr

0800422a <__retarget_lock_release_recursive>:
 800422a:	4770      	bx	lr

0800422c <_free_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4605      	mov	r5, r0
 8004230:	2900      	cmp	r1, #0
 8004232:	d041      	beq.n	80042b8 <_free_r+0x8c>
 8004234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004238:	1f0c      	subs	r4, r1, #4
 800423a:	2b00      	cmp	r3, #0
 800423c:	bfb8      	it	lt
 800423e:	18e4      	addlt	r4, r4, r3
 8004240:	f000 f83e 	bl	80042c0 <__malloc_lock>
 8004244:	4a1d      	ldr	r2, [pc, #116]	@ (80042bc <_free_r+0x90>)
 8004246:	6813      	ldr	r3, [r2, #0]
 8004248:	b933      	cbnz	r3, 8004258 <_free_r+0x2c>
 800424a:	6063      	str	r3, [r4, #4]
 800424c:	6014      	str	r4, [r2, #0]
 800424e:	4628      	mov	r0, r5
 8004250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004254:	f000 b83a 	b.w	80042cc <__malloc_unlock>
 8004258:	42a3      	cmp	r3, r4
 800425a:	d908      	bls.n	800426e <_free_r+0x42>
 800425c:	6820      	ldr	r0, [r4, #0]
 800425e:	1821      	adds	r1, r4, r0
 8004260:	428b      	cmp	r3, r1
 8004262:	bf01      	itttt	eq
 8004264:	6819      	ldreq	r1, [r3, #0]
 8004266:	685b      	ldreq	r3, [r3, #4]
 8004268:	1809      	addeq	r1, r1, r0
 800426a:	6021      	streq	r1, [r4, #0]
 800426c:	e7ed      	b.n	800424a <_free_r+0x1e>
 800426e:	461a      	mov	r2, r3
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	b10b      	cbz	r3, 8004278 <_free_r+0x4c>
 8004274:	42a3      	cmp	r3, r4
 8004276:	d9fa      	bls.n	800426e <_free_r+0x42>
 8004278:	6811      	ldr	r1, [r2, #0]
 800427a:	1850      	adds	r0, r2, r1
 800427c:	42a0      	cmp	r0, r4
 800427e:	d10b      	bne.n	8004298 <_free_r+0x6c>
 8004280:	6820      	ldr	r0, [r4, #0]
 8004282:	4401      	add	r1, r0
 8004284:	1850      	adds	r0, r2, r1
 8004286:	4283      	cmp	r3, r0
 8004288:	6011      	str	r1, [r2, #0]
 800428a:	d1e0      	bne.n	800424e <_free_r+0x22>
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	6053      	str	r3, [r2, #4]
 8004292:	4408      	add	r0, r1
 8004294:	6010      	str	r0, [r2, #0]
 8004296:	e7da      	b.n	800424e <_free_r+0x22>
 8004298:	d902      	bls.n	80042a0 <_free_r+0x74>
 800429a:	230c      	movs	r3, #12
 800429c:	602b      	str	r3, [r5, #0]
 800429e:	e7d6      	b.n	800424e <_free_r+0x22>
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	1821      	adds	r1, r4, r0
 80042a4:	428b      	cmp	r3, r1
 80042a6:	bf04      	itt	eq
 80042a8:	6819      	ldreq	r1, [r3, #0]
 80042aa:	685b      	ldreq	r3, [r3, #4]
 80042ac:	6063      	str	r3, [r4, #4]
 80042ae:	bf04      	itt	eq
 80042b0:	1809      	addeq	r1, r1, r0
 80042b2:	6021      	streq	r1, [r4, #0]
 80042b4:	6054      	str	r4, [r2, #4]
 80042b6:	e7ca      	b.n	800424e <_free_r+0x22>
 80042b8:	bd38      	pop	{r3, r4, r5, pc}
 80042ba:	bf00      	nop
 80042bc:	2000428c 	.word	0x2000428c

080042c0 <__malloc_lock>:
 80042c0:	4801      	ldr	r0, [pc, #4]	@ (80042c8 <__malloc_lock+0x8>)
 80042c2:	f7ff bfb1 	b.w	8004228 <__retarget_lock_acquire_recursive>
 80042c6:	bf00      	nop
 80042c8:	20004288 	.word	0x20004288

080042cc <__malloc_unlock>:
 80042cc:	4801      	ldr	r0, [pc, #4]	@ (80042d4 <__malloc_unlock+0x8>)
 80042ce:	f7ff bfac 	b.w	800422a <__retarget_lock_release_recursive>
 80042d2:	bf00      	nop
 80042d4:	20004288 	.word	0x20004288

080042d8 <_init>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr

080042e4 <_fini>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr
