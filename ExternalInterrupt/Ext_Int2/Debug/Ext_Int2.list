
Ext_Int2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000270  080001a8  080001a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000418  08000418  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000418  08000418  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000418  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00001418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800041c  0800041c  0000141c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000420  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001480  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a3  00000000  00000000  000034ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00000158  00000000  00000000  00003a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000e8  00000000  00000000  00003bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000cb  00000000  00000000  00003c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018fca  00000000  00000000  00003d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001522  00000000  00000000  0001cd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008bd04  00000000  00000000  0001e24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000a9f53  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000140  00000000  00000000  000a9f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  000aa0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	@ (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	@ (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000400 	.word	0x08000400

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	@ (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	@ (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000400 	.word	0x08000400

080001e8 <extint_init>:
volatile int flag = 0;

void extint_init(void)
{
	//1. set GPIOA.0 pin as input
	RCC->AHB1ENR |= BV(GPIOA_CLK_ENB);
 80001e8:	4810      	ldr	r0, [pc, #64]	@ (800022c <extint_init+0x44>)
	GPIO_SWITCH->MODER &= ~(BV(0) | BV(1));
 80001ea:	4b11      	ldr	r3, [pc, #68]	@ (8000230 <extint_init+0x48>)
	RCC->AHB1ENR |= BV(GPIOA_CLK_ENB);
 80001ec:	6b02      	ldr	r2, [r0, #48]	@ 0x30
	GPIO_SWITCH->PUPDR &= ~(BV(0) | BV(1));

	//2. enable external interrupt in system configuration(STM32F407VG)
	SYSCFG->EXTICR[0] &= ~(BV(0) | BV(1) | BV(2) | BV(3));
 80001ee:	4911      	ldr	r1, [pc, #68]	@ (8000234 <extint_init+0x4c>)
	RCC->AHB1ENR |= BV(GPIOA_CLK_ENB);
 80001f0:	f042 0201 	orr.w	r2, r2, #1
 80001f4:	6302      	str	r2, [r0, #48]	@ 0x30
	GPIO_SWITCH->MODER &= ~(BV(0) | BV(1));
 80001f6:	681a      	ldr	r2, [r3, #0]
 80001f8:	f022 0203 	bic.w	r2, r2, #3
 80001fc:	601a      	str	r2, [r3, #0]
	GPIO_SWITCH->PUPDR &= ~(BV(0) | BV(1));
 80001fe:	68da      	ldr	r2, [r3, #12]
 8000200:	f022 0203 	bic.w	r2, r2, #3
 8000204:	60da      	str	r2, [r3, #12]
	SYSCFG->EXTICR[0] &= ~(BV(0) | BV(1) | BV(2) | BV(3));
 8000206:	688a      	ldr	r2, [r1, #8]
	//3. enable ext interrupt in external interrupt controller
	EXTI->IMR |= BV(0);
 8000208:	f5a3 4344 	sub.w	r3, r3, #50176	@ 0xc400
	SYSCFG->EXTICR[0] &= ~(BV(0) | BV(1) | BV(2) | BV(3));
 800020c:	f022 020f 	bic.w	r2, r2, #15
 8000210:	608a      	str	r2, [r1, #8]
	EXTI->IMR |= BV(0);
 8000212:	681a      	ldr	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000214:	4908      	ldr	r1, [pc, #32]	@ (8000238 <extint_init+0x50>)
 8000216:	f042 0201 	orr.w	r2, r2, #1
 800021a:	601a      	str	r2, [r3, #0]
	EXTI->RTSR |= BV(0);
 800021c:	689a      	ldr	r2, [r3, #8]
 800021e:	2040      	movs	r0, #64	@ 0x40
 8000220:	f042 0201 	orr.w	r2, r2, #1
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	6008      	str	r0, [r1, #0]

	//4. enable ext interrupt in NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40020000 	.word	0x40020000
 8000234:	40013800 	.word	0x40013800
 8000238:	e000e100 	.word	0xe000e100

0800023c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
	// clear pending bit into PR register
	EXTI->PR |= BV(0);
 800023c:	4a03      	ldr	r2, [pc, #12]	@ (800024c <EXTI0_IRQHandler+0x10>)
	//
	flag = 1;
 800023e:	4904      	ldr	r1, [pc, #16]	@ (8000250 <EXTI0_IRQHandler+0x14>)
	EXTI->PR |= BV(0);
 8000240:	6953      	ldr	r3, [r2, #20]
	flag = 1;
 8000242:	2001      	movs	r0, #1
	EXTI->PR |= BV(0);
 8000244:	4303      	orrs	r3, r0
 8000246:	6153      	str	r3, [r2, #20]
	flag = 1;
 8000248:	6008      	str	r0, [r1, #0]
}
 800024a:	4770      	bx	lr
 800024c:	40013c00 	.word	0x40013c00
 8000250:	20000020 	.word	0x20000020

08000254 <led_init>:
#include"led.h"

void led_init(uint16_t pin)
{
	// enable clock for gpio D port
	RCC->AHB1ENR |= BV(GPIOD_CLK_ENB);
 8000254:	4913      	ldr	r1, [pc, #76]	@ (80002a4 <led_init+0x50>)

	// select mode of GPIO pins as output
	LED_GPIO->MODER |= BV(2 * pin);
 8000256:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <led_init+0x54>)
	RCC->AHB1ENR |= BV(GPIOD_CLK_ENB);
 8000258:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800025a:	f042 0208 	orr.w	r2, r2, #8
{
 800025e:	b410      	push	{r4}
	RCC->AHB1ENR |= BV(GPIOD_CLK_ENB);
 8000260:	630a      	str	r2, [r1, #48]	@ 0x30
	LED_GPIO->MODER |= BV(2 * pin);
 8000262:	2201      	movs	r2, #1
 8000264:	681c      	ldr	r4, [r3, #0]
 8000266:	fa00 fc02 	lsl.w	ip, r0, r2
 800026a:	fa02 f10c 	lsl.w	r1, r2, ip
 800026e:	430c      	orrs	r4, r1
 8000270:	601c      	str	r4, [r3, #0]
	LED_GPIO->MODER &= ~BV(2 * pin + 1);
 8000272:	681c      	ldr	r4, [r3, #0]
 8000274:	4494      	add	ip, r2

	// select output type as push pull
	LED_GPIO->OTYPER &= ~BV(pin);
 8000276:	fa02 f000 	lsl.w	r0, r2, r0
	LED_GPIO->MODER &= ~BV(2 * pin + 1);
 800027a:	fa02 f20c 	lsl.w	r2, r2, ip

	// select output speed as low
	LED_GPIO->OSPEEDR &= ~(BV(2 * pin ) | BV(2 * pin + 1));
 800027e:	4311      	orrs	r1, r2
	LED_GPIO->MODER &= ~BV(2 * pin + 1);
 8000280:	ea24 0202 	bic.w	r2, r4, r2
 8000284:	601a      	str	r2, [r3, #0]
	LED_GPIO->OTYPER &= ~BV(pin);
 8000286:	685a      	ldr	r2, [r3, #4]

	// do not select pull up / pull down resistor
	LED_GPIO->PUPDR &=~(BV(2 * pin ) | BV(2 * pin + 1));
}
 8000288:	bc10      	pop	{r4}
	LED_GPIO->OTYPER &= ~BV(pin);
 800028a:	ea22 0200 	bic.w	r2, r2, r0
 800028e:	605a      	str	r2, [r3, #4]
	LED_GPIO->OSPEEDR &= ~(BV(2 * pin ) | BV(2 * pin + 1));
 8000290:	689a      	ldr	r2, [r3, #8]
 8000292:	ea22 0201 	bic.w	r2, r2, r1
 8000296:	609a      	str	r2, [r3, #8]
	LED_GPIO->PUPDR &=~(BV(2 * pin ) | BV(2 * pin + 1));
 8000298:	68da      	ldr	r2, [r3, #12]
 800029a:	ea22 0201 	bic.w	r2, r2, r1
 800029e:	60da      	str	r2, [r3, #12]
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020c00 	.word	0x40020c00

080002ac <led_blink>:
void led_on(uint16_t pin)
{
	// write 1 on respective bits of ODR
	LED_GPIO->ODR |= BV(pin);
 80002ac:	4a0f      	ldr	r2, [pc, #60]	@ (80002ec <led_blink+0x40>)

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
	uint32_t init_ticks = DWT->CYCCNT;
	uint32_t ticks = (SystemCoreClock / 1000);
 80002ae:	4910      	ldr	r1, [pc, #64]	@ (80002f0 <led_blink+0x44>)
 80002b0:	6953      	ldr	r3, [r2, #20]
 80002b2:	f04f 0c01 	mov.w	ip, #1
 80002b6:	fa0c fc00 	lsl.w	ip, ip, r0
 80002ba:	ea4c 0303 	orr.w	r3, ip, r3
 80002be:	6153      	str	r3, [r2, #20]
 80002c0:	680b      	ldr	r3, [r1, #0]
 80002c2:	4a0c      	ldr	r2, [pc, #48]	@ (80002f4 <led_blink+0x48>)
	uint32_t init_ticks = DWT->CYCCNT;
 80002c4:	490c      	ldr	r1, [pc, #48]	@ (80002f8 <led_blink+0x4c>)
	uint32_t ticks = (SystemCoreClock / 1000);
 80002c6:	fba2 2303 	umull	r2, r3, r2, r3
 80002ca:	099b      	lsrs	r3, r3, #6
 80002cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
	uint32_t init_ticks = DWT->CYCCNT;
 80002d0:	6848      	ldr	r0, [r1, #4]
	ms *= ticks;
 80002d2:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002d6:	684b      	ldr	r3, [r1, #4]
 80002d8:	1a1b      	subs	r3, r3, r0
 80002da:	4293      	cmp	r3, r2
 80002dc:	d3fb      	bcc.n	80002d6 <led_blink+0x2a>
}
void led_off(uint16_t pin)
{
	// write 0 on respective bits of ODR
	LED_GPIO->ODR &= ~BV(pin);
 80002de:	4a03      	ldr	r2, [pc, #12]	@ (80002ec <led_blink+0x40>)
 80002e0:	6953      	ldr	r3, [r2, #20]
 80002e2:	ea23 030c 	bic.w	r3, r3, ip
 80002e6:	6153      	str	r3, [r2, #20]
void led_blink(uint16_t pin)
{
	led_on(pin);
	DelayMs(500);
	led_off(pin);
}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40020c00 	.word	0x40020c00
 80002f0:	20000000 	.word	0x20000000
 80002f4:	10624dd3 	.word	0x10624dd3
 80002f8:	e0001000 	.word	0xe0001000

080002fc <main>:
#endif

extern volatile int flag;

int main(void)
{
 80002fc:	b508      	push	{r3, lr}
	extint_init();
 80002fe:	f7ff ff73 	bl	80001e8 <extint_init>
	led_init(LED_RED);
 8000302:	200e      	movs	r0, #14
 8000304:	f7ff ffa6 	bl	8000254 <led_init>
 8000308:	4c04      	ldr	r4, [pc, #16]	@ (800031c <main+0x20>)

	while(1)
	{
		while(flag == 0)
			;
		flag = 0;
 800030a:	2500      	movs	r5, #0
		while(flag == 0)
 800030c:	6823      	ldr	r3, [r4, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0fc      	beq.n	800030c <main+0x10>
		led_blink(LED_RED);
 8000312:	200e      	movs	r0, #14
		flag = 0;
 8000314:	6025      	str	r5, [r4, #0]
		led_blink(LED_RED);
 8000316:	f7ff ffc9 	bl	80002ac <led_blink>
		while(flag == 0)
 800031a:	e7f7      	b.n	800030c <main+0x10>
 800031c:	20000020 	.word	0x20000020

08000320 <SystemInit>:


uint32_t DWT_Init(void)
{
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000320:	4a0e      	ldr	r2, [pc, #56]	@ (800035c <SystemInit+0x3c>)
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000322:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <SystemInit+0x40>)
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000324:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 8000328:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800032c:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000330:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 8000334:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8000338:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	f022 0201 	bic.w	r2, r2, #1
 8000342:	601a      	str	r2, [r3, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000344:	681a      	ldr	r2, [r3, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000346:	2000      	movs	r0, #0
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000348:	f042 0201 	orr.w	r2, r2, #1
 800034c:	601a      	str	r2, [r3, #0]
    DWT->CYCCNT = 0;
 800034e:	6058      	str	r0, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000350:	bf00      	nop
    __ASM volatile ("NOP");
 8000352:	bf00      	nop
    __ASM volatile ("NOP");
 8000354:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000356:	685b      	ldr	r3, [r3, #4]
}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	e0001000 	.word	0xe0001000

08000364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000364:	480d      	ldr	r0, [pc, #52]	@ (800039c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000366:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000368:	f7ff ffda 	bl	8000320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	@ (80003a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	@ (80003a8 <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	@ (80003ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	@ (80003b0 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000392:	f000 f811 	bl	80003b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000396:	f7ff ffb1 	bl	80002fc <main>

0800039a <LoopForever>:

LoopForever:
    b LoopForever
 800039a:	e7fe      	b.n	800039a <LoopForever>
  ldr   r0, =_estack
 800039c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a8:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 80003ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b0:	20000024 	.word	0x20000024

080003b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC_IRQHandler>
	...

080003b8 <__libc_init_array>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	4d0d      	ldr	r5, [pc, #52]	@ (80003f0 <__libc_init_array+0x38>)
 80003bc:	4c0d      	ldr	r4, [pc, #52]	@ (80003f4 <__libc_init_array+0x3c>)
 80003be:	1b64      	subs	r4, r4, r5
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	2600      	movs	r6, #0
 80003c4:	42a6      	cmp	r6, r4
 80003c6:	d109      	bne.n	80003dc <__libc_init_array+0x24>
 80003c8:	4d0b      	ldr	r5, [pc, #44]	@ (80003f8 <__libc_init_array+0x40>)
 80003ca:	4c0c      	ldr	r4, [pc, #48]	@ (80003fc <__libc_init_array+0x44>)
 80003cc:	f000 f818 	bl	8000400 <_init>
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	10a4      	asrs	r4, r4, #2
 80003d4:	2600      	movs	r6, #0
 80003d6:	42a6      	cmp	r6, r4
 80003d8:	d105      	bne.n	80003e6 <__libc_init_array+0x2e>
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e0:	4798      	blx	r3
 80003e2:	3601      	adds	r6, #1
 80003e4:	e7ee      	b.n	80003c4 <__libc_init_array+0xc>
 80003e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ea:	4798      	blx	r3
 80003ec:	3601      	adds	r6, #1
 80003ee:	e7f2      	b.n	80003d6 <__libc_init_array+0x1e>
 80003f0:	08000418 	.word	0x08000418
 80003f4:	08000418 	.word	0x08000418
 80003f8:	08000418 	.word	0x08000418
 80003fc:	0800041c 	.word	0x0800041c

08000400 <_init>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr

0800040c <_fini>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr
